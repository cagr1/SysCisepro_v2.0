Imports System.Data
Imports ClassLibraryCisepro.ENUMS
Imports ClassLibraryCisepro.ProcesosSql

Namespace CONTABILIDAD.CUENTAS_POR_COBRAR
    Public Class ClassCuentasPorCobrar

        Public Function ReporteFacturadoPorClienteRangoFecha(ByVal tipoCon As TipoConexion, ByVal anio As Integer, ByVal filtro As String, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"ANIO", SqlDbType.Int, anio})
            pars.Add(New Object() {"FILTRO", SqlDbType.VarChar, filtro})
            pars.Add(New Object() {"FECHA_INICIAL", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"FECHA_FINAL", SqlDbType.DateTime, fechaFinal}) 
            Return ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, "ReporteFacturadoPorClienteRangoFecha", True, pars)
        End Function

        Public Function BuscarCuentasPorCobrarGeneralPorRangoFecha(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal todos As Boolean) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"FECHA_INICIAL", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"FECHA_FINAL", SqlDbType.DateTime, fechaFinal})
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, "BuscarCuentasPorCobrarGeneralPorRangoFecha", True, pars) 
            If Not todos Then
                For Each row As DataRow In table.Rows
                    If row.Item("saldo") < 0.01 Then row.Delete()
                Next row
            End If
            Return table
        End Function

        Public Function BuscarCuentasPorCobrarGeneralPorConsorcioRangoFecha(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal grupo As String, ByVal todos As Boolean) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"FECHA_INICIAL", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"FECHA_FINAL", SqlDbType.DateTime, fechaFinal})
            pars.Add(New Object() {"GRUPO", SqlDbType.VarChar, grupo})
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, "BuscarCuentasPorCobrarGeneralPorConsorcioRangoFecha", True, pars)
            If Not todos Then
                For Each row As DataRow In table.Rows
                    If row.Item("saldo") < 0.01 Then row.Delete()
                Next row
            End If
            Return table
        End Function

        Public Function BuscarCuentasPorCobrarPorClientesConsorcioPorRangoFecha(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal grupo As String, ByVal todos As Boolean) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"FECHA_INICIAL", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"FECHA_FINAL", SqlDbType.DateTime, fechaFinal})
            pars.Add(New Object() {"GRUPO", SqlDbType.VarChar, grupo})
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, "BuscarCuentasPorCobrarPorClientesConsorcioPorRangoFecha", True, pars) 
            If Not todos Then
                For Each row As DataRow In table.Rows
                    If row.Item("saldo") < 0.01 Then row.Delete()
                Next row
            End If
            Return table
        End Function
         
        Public Function BuscarCuentasPorCobrarPorClientePorRangoFecha(ByVal tipoCon As TipoConexion, ByVal idCliente As Integer, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal todos As Boolean) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"FECHA_INICIAL", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"FECHA_FINAL", SqlDbType.DateTime, fechaFinal})
            pars.Add(New Object() {"ID_CLIENTE", SqlDbType.Int, idCliente})
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, "BuscarCuentasPorCobrarPorClientePorRangoFecha", True, pars) 
            If Not todos Then
                For Each row As DataRow In table.Rows
                    If row.Item("saldo") < 0.01 Then row.Delete()
                Next row
            End If
            Return table
        End Function
         
        Public Function BuscarCuentasPorCobrarGeneralDetalladoPorClienteRangoFecha(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal banco As Integer) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"DESDE", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"HASTA", SqlDbType.DateTime, fechaFinal})
            Dim sql As String

            If banco = 0 Then ' todos
                sql = "select tod.ID_CLIENTE_GENERAL,tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.id_factura_venta,tod.numero_factura_venta, tod.fecha_emision_factura_venta, tod.facturado, tod.retenido, tod.cobrar, tod.nota_credito, tod.abonado, tod.saldo, tod.observaciones_factura_venta, (tod.BANCO_CONVENIO + ' - ' + tod.TIPO_CUENTA + ' - ' + tod.NUM_CUENTA_TARJ) DEBITAR, (tod.TITULAR_CUENTA + ' - ' + tod.TIPO_DOC + ' - ' +  tod.NUM_CI_RUC) TITULAR, tod.VALOR VALOR_CONVENIO from (select cob.ID_CLIENTE_GENERAL, cob.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, cob.id_factura_venta, cob.numero_factura_venta, cob.fecha_emision_factura_venta, cob.facturado, cob.retenido, (cob.facturado - cob.retenido) cobrar, cob.nota_credito, cob.abonado, ((cob.facturado - cob.retenido) - (cob.nota_credito + cob.abonado)) saldo, cob.observaciones_factura_venta, cob.BANCO_CONVENIO, cob.TIPO_CUENTA, cob.TIPO_DOC, cob.NUM_CUENTA_TARJ, cob.NUM_CI_RUC, cob.TITULAR_CUENTA, cob.VALOR from (select cg.ID_CLIENTE_GENERAL, cg.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, fv.id_factura_venta, fv.numero_factura_venta, fv.fecha_emision_factura_venta,fv.total_factura_venta facturado, (select case when sum(cr.total_comprobante_retencion_venta) is null then 0 else sum(cr.total_comprobante_retencion_venta) end from comprobante_retencion_venta cr where cr.id_factura_venta=fv.id_factura_venta and cr.estado_comprobante_retencion_venta > 0 and cr.fecha_emision_comprobante_retencion_venta between @DESDE AND @HASTA) retenido, (select case when sum(nc.total_nota_credito) is null then 0 else sum(nc.total_nota_credito) end from nota_credito_venta nc where nc.id_factura_venta=fv.id_factura_venta and nc.estado_nota_credito > 0 and nc.fecha_emision_nota_credito between @DESDE AND @HASTA) nota_credito, (select case when sum(pv.monto_pago_factura_venta) is null then 0 else sum(pv.monto_pago_factura_venta) end from pagos_factura_venta pv where pv.id_factura_venta=fv.id_factura_venta and pv.estado_pago_factura_venta > 0 and (pv.forma_pago_factura_venta <> 'RETENCIÓN' and pv.forma_pago_factura_venta <> 'NOTA DE CRÉDITO') and pv.fecha_pago_factura_compra between @DESDE AND @HASTA) abonado, fv.observaciones_factura_venta, cc.BANCO_CONVENIO, cc.TIPO_CUENTA, cc.TIPO_DOC, cc.NUM_CUENTA_TARJ, cc.NUM_CI_RUC, cc.TITULAR_CUENTA, cc.VALOR from factura_venta fv join CLIENTE_GENERAL cg on fv.ID_CLIENTE_GENERAL = cg.ID_CLIENTE_GENERAL join FACTURA_DEBITO_CONVENIO fd on fv.ID_FACTURA_VENTA = fd.id_factura join CONVENIO_CLIENTE_BANCO_DEBITO cc on (fd.id_convenio = cc.ID_CONVENIO and cc.ESTADO > 0) where fv.estado_factura_venta > 0 and fv.fecha_emision_factura_venta between @DESDE AND @HASTA ) as cob ) as tod where tod.saldo > 0 order by tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.fecha_emision_factura_venta"
            ElseIf banco = 1 Then ' banco machala
                sql = "select tod.ID_CLIENTE_GENERAL,tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.id_factura_venta,tod.numero_factura_venta, tod.fecha_emision_factura_venta, tod.facturado, tod.retenido, tod.cobrar, tod.nota_credito, tod.abonado, tod.saldo, tod.observaciones_factura_venta, (tod.BANCO_CONVENIO + ' - ' + tod.TIPO_CUENTA + ' - ' + tod.NUM_CUENTA_TARJ) DEBITAR, (tod.TITULAR_CUENTA + ' - ' + tod.TIPO_DOC + ' - ' +  tod.NUM_CI_RUC) TITULAR, tod.VALOR VALOR_CONVENIO from (select cob.ID_CLIENTE_GENERAL, cob.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, cob.id_factura_venta, cob.numero_factura_venta, cob.fecha_emision_factura_venta, cob.facturado, cob.retenido, (cob.facturado - cob.retenido) cobrar, cob.nota_credito, cob.abonado, ((cob.facturado - cob.retenido) - (cob.nota_credito + cob.abonado)) saldo, cob.observaciones_factura_venta, cob.BANCO_CONVENIO, cob.TIPO_CUENTA, cob.TIPO_DOC, cob.NUM_CUENTA_TARJ, cob.NUM_CI_RUC, cob.TITULAR_CUENTA, cob.VALOR from (select cg.ID_CLIENTE_GENERAL, cg.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, fv.id_factura_venta, fv.numero_factura_venta, fv.fecha_emision_factura_venta,fv.total_factura_venta facturado, (select case when sum(cr.total_comprobante_retencion_venta) is null then 0 else sum(cr.total_comprobante_retencion_venta) end from comprobante_retencion_venta cr where cr.id_factura_venta=fv.id_factura_venta and cr.estado_comprobante_retencion_venta > 0 and cr.fecha_emision_comprobante_retencion_venta between @DESDE AND @HASTA) retenido, (select case when sum(nc.total_nota_credito) is null then 0 else sum(nc.total_nota_credito) end from nota_credito_venta nc where nc.id_factura_venta=fv.id_factura_venta and nc.estado_nota_credito > 0 and nc.fecha_emision_nota_credito between @DESDE AND @HASTA) nota_credito, (select case when sum(pv.monto_pago_factura_venta) is null then 0 else sum(pv.monto_pago_factura_venta) end from pagos_factura_venta pv where pv.id_factura_venta=fv.id_factura_venta and pv.estado_pago_factura_venta > 0 and (pv.forma_pago_factura_venta <> 'RETENCIÓN' and pv.forma_pago_factura_venta <> 'NOTA DE CRÉDITO') and pv.fecha_pago_factura_compra between @DESDE AND @HASTA) abonado, fv.observaciones_factura_venta, cc.BANCO_CONVENIO, cc.TIPO_CUENTA, cc.TIPO_DOC, cc.NUM_CUENTA_TARJ, cc.NUM_CI_RUC, cc.TITULAR_CUENTA, cc.VALOR from factura_venta fv join CLIENTE_GENERAL cg on fv.ID_CLIENTE_GENERAL = cg.ID_CLIENTE_GENERAL join FACTURA_DEBITO_CONVENIO fd on fv.ID_FACTURA_VENTA = fd.id_factura join CONVENIO_CLIENTE_BANCO_DEBITO cc on (fd.id_convenio = cc.ID_CONVENIO and cc.ESTADO > 0) where cc.BANCO_CONVENIO like '%BANCO DE MACHALA%' AND fv.estado_factura_venta > 0 and fv.fecha_emision_factura_venta between @DESDE AND @HASTA ) as cob ) as tod where tod.saldo > 0 order by tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.fecha_emision_factura_venta"
            Else ' interbancario
                sql = "select tod.ID_CLIENTE_GENERAL,tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.id_factura_venta,tod.numero_factura_venta, tod.fecha_emision_factura_venta, tod.facturado, tod.retenido, tod.cobrar, tod.nota_credito, tod.abonado, tod.saldo, tod.observaciones_factura_venta, (tod.BANCO_CONVENIO + ' - ' + tod.TIPO_CUENTA + ' - ' + tod.NUM_CUENTA_TARJ) DEBITAR, (tod.TITULAR_CUENTA + ' - ' + tod.TIPO_DOC + ' - ' +  tod.NUM_CI_RUC) TITULAR, tod.VALOR VALOR_CONVENIO from (select cob.ID_CLIENTE_GENERAL, cob.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, cob.id_factura_venta, cob.numero_factura_venta, cob.fecha_emision_factura_venta, cob.facturado, cob.retenido, (cob.facturado - cob.retenido) cobrar, cob.nota_credito, cob.abonado, ((cob.facturado - cob.retenido) - (cob.nota_credito + cob.abonado)) saldo, cob.observaciones_factura_venta, cob.BANCO_CONVENIO, cob.TIPO_CUENTA, cob.TIPO_DOC, cob.NUM_CUENTA_TARJ, cob.NUM_CI_RUC, cob.TITULAR_CUENTA, cob.VALOR from (select cg.ID_CLIENTE_GENERAL, cg.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, fv.id_factura_venta, fv.numero_factura_venta, fv.fecha_emision_factura_venta,fv.total_factura_venta facturado, (select case when sum(cr.total_comprobante_retencion_venta) is null then 0 else sum(cr.total_comprobante_retencion_venta) end from comprobante_retencion_venta cr where cr.id_factura_venta=fv.id_factura_venta and cr.estado_comprobante_retencion_venta > 0 and cr.fecha_emision_comprobante_retencion_venta between @DESDE AND @HASTA) retenido, (select case when sum(nc.total_nota_credito) is null then 0 else sum(nc.total_nota_credito) end from nota_credito_venta nc where nc.id_factura_venta=fv.id_factura_venta and nc.estado_nota_credito > 0 and nc.fecha_emision_nota_credito between @DESDE AND @HASTA) nota_credito, (select case when sum(pv.monto_pago_factura_venta) is null then 0 else sum(pv.monto_pago_factura_venta) end from pagos_factura_venta pv where pv.id_factura_venta=fv.id_factura_venta and pv.estado_pago_factura_venta > 0 and (pv.forma_pago_factura_venta <> 'RETENCIÓN' and pv.forma_pago_factura_venta <> 'NOTA DE CRÉDITO') and pv.fecha_pago_factura_compra between @DESDE AND @HASTA) abonado, fv.observaciones_factura_venta, cc.BANCO_CONVENIO, cc.TIPO_CUENTA, cc.TIPO_DOC, cc.NUM_CUENTA_TARJ, cc.NUM_CI_RUC, cc.TITULAR_CUENTA, cc.VALOR from factura_venta fv join CLIENTE_GENERAL cg on fv.ID_CLIENTE_GENERAL = cg.ID_CLIENTE_GENERAL join FACTURA_DEBITO_CONVENIO fd on fv.ID_FACTURA_VENTA = fd.id_factura join CONVENIO_CLIENTE_BANCO_DEBITO cc on (fd.id_convenio = cc.ID_CONVENIO and cc.ESTADO > 0) where cc.BANCO_CONVENIO not like '%BANCO DE MACHALA%' AND fv.estado_factura_venta > 0 and fv.fecha_emision_factura_venta between @DESDE AND @HASTA ) as cob ) as tod where tod.saldo > 0 order by tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.fecha_emision_factura_venta"
            End If
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, sql, False, pars)
            Return table
        End Function

        Public Function BuscarCuentasPorCobrarGeneralDetalladoPorClienteRangoFechaIdCliente(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal idCliente As String, ByVal banco As Integer) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"DESDE", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"HASTA", SqlDbType.DateTime, fechaFinal})
            pars.Add(New Object() {"ID_CLIENTE", SqlDbType.Int, idCliente})            
            Dim sql As String
            If banco = 0 Then ' todos
                sql = "select tod.ID_CLIENTE_GENERAL,tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.id_factura_venta,tod.numero_factura_venta, tod.fecha_emision_factura_venta, tod.facturado, tod.retenido, tod.cobrar, tod.nota_credito, tod.abonado, tod.saldo, tod.observaciones_factura_venta, (tod.BANCO_CONVENIO + ' - ' + tod.TIPO_CUENTA + ' - ' + tod.NUM_CUENTA_TARJ) DEBITAR, (tod.TITULAR_CUENTA + ' - ' + tod.TIPO_DOC + ' - ' +  tod.NUM_CI_RUC) TITULAR, tod.VALOR VALOR_CONVENIO from (select cob.ID_CLIENTE_GENERAL, cob.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, cob.id_factura_venta, cob.numero_factura_venta, cob.fecha_emision_factura_venta, cob.facturado, cob.retenido, (cob.facturado - cob.retenido) cobrar, cob.nota_credito, cob.abonado, ((cob.facturado - cob.retenido) - (cob.nota_credito + cob.abonado)) saldo, cob.observaciones_factura_venta, cob.BANCO_CONVENIO, cob.TIPO_CUENTA, cob.TIPO_DOC, cob.NUM_CUENTA_TARJ, cob.NUM_CI_RUC, cob.TITULAR_CUENTA, cob.VALOR from (select cg.ID_CLIENTE_GENERAL, cg.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, fv.id_factura_venta, fv.numero_factura_venta, fv.fecha_emision_factura_venta,fv.total_factura_venta facturado, (select case when sum(cr.total_comprobante_retencion_venta) is null then 0 else sum(cr.total_comprobante_retencion_venta) end from comprobante_retencion_venta cr where cr.id_factura_venta=fv.id_factura_venta and cr.estado_comprobante_retencion_venta > 0 and cr.fecha_emision_comprobante_retencion_venta between @DESDE AND @HASTA) retenido, (select case when sum(nc.total_nota_credito) is null then 0 else sum(nc.total_nota_credito) end from nota_credito_venta nc where nc.id_factura_venta=fv.id_factura_venta and nc.estado_nota_credito > 0 and nc.fecha_emision_nota_credito between @DESDE AND @HASTA) nota_credito, (select case when sum(pv.monto_pago_factura_venta) is null then 0 else sum(pv.monto_pago_factura_venta) end from pagos_factura_venta pv where pv.id_factura_venta=fv.id_factura_venta and pv.estado_pago_factura_venta > 0 and (pv.forma_pago_factura_venta <> 'RETENCIÓN' and pv.forma_pago_factura_venta <> 'NOTA DE CRÉDITO') and pv.fecha_pago_factura_compra between @DESDE AND @HASTA) abonado, fv.observaciones_factura_venta, cc.BANCO_CONVENIO, cc.TIPO_CUENTA, cc.TIPO_DOC, cc.NUM_CUENTA_TARJ, cc.NUM_CI_RUC, cc.TITULAR_CUENTA, cc.VALOR from factura_venta fv join CLIENTE_GENERAL cg on fv.ID_CLIENTE_GENERAL = cg.ID_CLIENTE_GENERAL join FACTURA_DEBITO_CONVENIO fd on fv.ID_FACTURA_VENTA = fd.id_factura join CONVENIO_CLIENTE_BANCO_DEBITO cc on (fd.id_convenio = cc.ID_CONVENIO and cc.ESTADO > 0) where fv.id_cliente_general = @ID_CLIENTE AND fv.estado_factura_venta > 0 and fv.fecha_emision_factura_venta between @DESDE AND @HASTA) as cob ) as tod where tod.saldo > 0 order by tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.fecha_emision_factura_venta"
            ElseIf banco = 1 Then ' banco machala
                sql = "select tod.ID_CLIENTE_GENERAL,tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.id_factura_venta,tod.numero_factura_venta, tod.fecha_emision_factura_venta, tod.facturado, tod.retenido, tod.cobrar, tod.nota_credito, tod.abonado, tod.saldo, tod.observaciones_factura_venta, (tod.BANCO_CONVENIO + ' - ' + tod.TIPO_CUENTA + ' - ' + tod.NUM_CUENTA_TARJ) DEBITAR, (tod.TITULAR_CUENTA + ' - ' + tod.TIPO_DOC + ' - ' +  tod.NUM_CI_RUC) TITULAR, tod.VALOR VALOR_CONVENIO from (select cob.ID_CLIENTE_GENERAL, cob.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, cob.id_factura_venta, cob.numero_factura_venta, cob.fecha_emision_factura_venta, cob.facturado, cob.retenido, (cob.facturado - cob.retenido) cobrar, cob.nota_credito, cob.abonado, ((cob.facturado - cob.retenido) - (cob.nota_credito + cob.abonado)) saldo, cob.observaciones_factura_venta, cob.BANCO_CONVENIO, cob.TIPO_CUENTA, cob.TIPO_DOC, cob.NUM_CUENTA_TARJ, cob.NUM_CI_RUC, cob.TITULAR_CUENTA, cob.VALOR from (select cg.ID_CLIENTE_GENERAL, cg.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, fv.id_factura_venta, fv.numero_factura_venta, fv.fecha_emision_factura_venta,fv.total_factura_venta facturado, (select case when sum(cr.total_comprobante_retencion_venta) is null then 0 else sum(cr.total_comprobante_retencion_venta) end from comprobante_retencion_venta cr where cr.id_factura_venta=fv.id_factura_venta and cr.estado_comprobante_retencion_venta > 0 and cr.fecha_emision_comprobante_retencion_venta between @DESDE AND @HASTA) retenido, (select case when sum(nc.total_nota_credito) is null then 0 else sum(nc.total_nota_credito) end from nota_credito_venta nc where nc.id_factura_venta=fv.id_factura_venta and nc.estado_nota_credito > 0 and nc.fecha_emision_nota_credito between @DESDE AND @HASTA) nota_credito, (select case when sum(pv.monto_pago_factura_venta) is null then 0 else sum(pv.monto_pago_factura_venta) end from pagos_factura_venta pv where pv.id_factura_venta=fv.id_factura_venta and pv.estado_pago_factura_venta > 0 and (pv.forma_pago_factura_venta <> 'RETENCIÓN' and pv.forma_pago_factura_venta <> 'NOTA DE CRÉDITO') and pv.fecha_pago_factura_compra between @DESDE AND @HASTA) abonado, fv.observaciones_factura_venta, cc.BANCO_CONVENIO, cc.TIPO_CUENTA, cc.TIPO_DOC, cc.NUM_CUENTA_TARJ, cc.NUM_CI_RUC, cc.TITULAR_CUENTA, cc.VALOR from factura_venta fv join CLIENTE_GENERAL cg on fv.ID_CLIENTE_GENERAL = cg.ID_CLIENTE_GENERAL join FACTURA_DEBITO_CONVENIO fd on fv.ID_FACTURA_VENTA = fd.id_factura join CONVENIO_CLIENTE_BANCO_DEBITO cc on (fd.id_convenio = cc.ID_CONVENIO and cc.ESTADO > 0) where cc.BANCO_CONVENIO like '%BANCO DE MACHALA%' AND fv.id_cliente_general = @ID_CLIENTE AND fv.estado_factura_venta > 0 and fv.fecha_emision_factura_venta between @DESDE AND @HASTA) as cob ) as tod where tod.saldo > 0 order by tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.fecha_emision_factura_venta"
            Else ' interbancario
                sql = "select tod.ID_CLIENTE_GENERAL,tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.id_factura_venta,tod.numero_factura_venta, tod.fecha_emision_factura_venta, tod.facturado, tod.retenido, tod.cobrar, tod.nota_credito, tod.abonado, tod.saldo, tod.observaciones_factura_venta, (tod.BANCO_CONVENIO + ' - ' + tod.TIPO_CUENTA + ' - ' + tod.NUM_CUENTA_TARJ) DEBITAR, (tod.TITULAR_CUENTA + ' - ' + tod.TIPO_DOC + ' - ' +  tod.NUM_CI_RUC) TITULAR, tod.VALOR VALOR_CONVENIO from (select cob.ID_CLIENTE_GENERAL, cob.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, cob.id_factura_venta, cob.numero_factura_venta, cob.fecha_emision_factura_venta, cob.facturado, cob.retenido, (cob.facturado - cob.retenido) cobrar, cob.nota_credito, cob.abonado, ((cob.facturado - cob.retenido) - (cob.nota_credito + cob.abonado)) saldo, cob.observaciones_factura_venta, cob.BANCO_CONVENIO, cob.TIPO_CUENTA, cob.TIPO_DOC, cob.NUM_CUENTA_TARJ, cob.NUM_CI_RUC, cob.TITULAR_CUENTA, cob.VALOR from (select cg.ID_CLIENTE_GENERAL, cg.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, fv.id_factura_venta, fv.numero_factura_venta, fv.fecha_emision_factura_venta,fv.total_factura_venta facturado, (select case when sum(cr.total_comprobante_retencion_venta) is null then 0 else sum(cr.total_comprobante_retencion_venta) end from comprobante_retencion_venta cr where cr.id_factura_venta=fv.id_factura_venta and cr.estado_comprobante_retencion_venta > 0 and cr.fecha_emision_comprobante_retencion_venta between @DESDE AND @HASTA) retenido, (select case when sum(nc.total_nota_credito) is null then 0 else sum(nc.total_nota_credito) end from nota_credito_venta nc where nc.id_factura_venta=fv.id_factura_venta and nc.estado_nota_credito > 0 and nc.fecha_emision_nota_credito between @DESDE AND @HASTA) nota_credito, (select case when sum(pv.monto_pago_factura_venta) is null then 0 else sum(pv.monto_pago_factura_venta) end from pagos_factura_venta pv where pv.id_factura_venta=fv.id_factura_venta and pv.estado_pago_factura_venta > 0 and (pv.forma_pago_factura_venta <> 'RETENCIÓN' and pv.forma_pago_factura_venta <> 'NOTA DE CRÉDITO') and pv.fecha_pago_factura_compra between @DESDE AND @HASTA) abonado, fv.observaciones_factura_venta, cc.BANCO_CONVENIO, cc.TIPO_CUENTA, cc.TIPO_DOC, cc.NUM_CUENTA_TARJ, cc.NUM_CI_RUC, cc.TITULAR_CUENTA, cc.VALOR from factura_venta fv join CLIENTE_GENERAL cg on fv.ID_CLIENTE_GENERAL = cg.ID_CLIENTE_GENERAL join FACTURA_DEBITO_CONVENIO fd on fv.ID_FACTURA_VENTA = fd.id_factura join CONVENIO_CLIENTE_BANCO_DEBITO cc on (fd.id_convenio = cc.ID_CONVENIO and cc.ESTADO > 0) where cc.BANCO_CONVENIO not like '%BANCO DE MACHALA%' AND fv.id_cliente_general = @ID_CLIENTE AND fv.estado_factura_venta > 0 and fv.fecha_emision_factura_venta between @DESDE AND @HASTA) as cob ) as tod where tod.saldo > 0 order by tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.fecha_emision_factura_venta"
            End If
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, sql, False, pars)
            Return table
        End Function
         
        Public Function BuscarCuentasPorCobrarGeneralDetalladoPorClienteRangoFecha(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"DESDE", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"HASTA", SqlDbType.DateTime, fechaFinal})
            'Dim sql = "select tod.ID_CLIENTE_GENERAL,tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.id_factura_venta,tod.numero_factura_venta, tod.fecha_emision_factura_venta, tod.facturado, tod.retenido, tod.cobrar, tod.nota_credito, tod.abonado, tod.saldo, tod.observaciones_factura_venta, (tod.BANCO_CONVENIO + ' - ' + tod.TIPO_CUENTA + ' - ' + tod.NUM_CUENTA_TARJ) DEBITAR, (tod.TITULAR_CUENTA + ' - ' + tod.TIPO_DOC + ' - ' +  tod.NUM_CI_RUC) TITULAR, tod.VALOR VALOR_CONVENIO from (select cob.ID_CLIENTE_GENERAL, cob.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, cob.id_factura_venta, cob.numero_factura_venta, cob.fecha_emision_factura_venta, cob.facturado, cob.retenido, (cob.facturado - cob.retenido) cobrar, cob.nota_credito, cob.abonado, ((cob.facturado - cob.retenido) - (cob.nota_credito + cob.abonado)) saldo, cob.observaciones_factura_venta, '' BANCO_CONVENIO, '' TIPO_CUENTA, '' TIPO_DOC, '' NUM_CUENTA_TARJ, '' NUM_CI_RUC, '' TITULAR_CUENTA, '' VALOR from (select cg.ID_CLIENTE_GENERAL, cg.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, fv.id_factura_venta, fv.numero_factura_venta, fv.fecha_emision_factura_venta,fv.total_factura_venta facturado, (select case when sum(cr.total_comprobante_retencion_venta) is null then 0 else sum(cr.total_comprobante_retencion_venta) end from comprobante_retencion_venta cr where cr.id_factura_venta=fv.id_factura_venta and cr.estado_comprobante_retencion_venta > 0 and cr.fecha_emision_comprobante_retencion_venta between @DESDE and @HASTA) retenido, (select case when sum(nc.total_nota_credito) is null then 0 else sum(nc.total_nota_credito) end from nota_credito_venta nc where nc.id_factura_venta=fv.id_factura_venta and nc.estado_nota_credito > 0 and nc.fecha_emision_nota_credito between @DESDE and @HASTA) nota_credito, (select case when sum(pv.monto_pago_factura_venta) is null then 0 else sum(pv.monto_pago_factura_venta) end from pagos_factura_venta pv where pv.id_factura_venta=fv.id_factura_venta and pv.estado_pago_factura_venta > 0 and (pv.forma_pago_factura_venta <> 'RETENCIÓN' and pv.forma_pago_factura_venta <> 'NOTA DE CRÉDITO') and pv.fecha_pago_factura_compra between @DESDE and @HASTA) abonado, fv.observaciones_factura_venta, '' BANCO_CONVENIO, '' TIPO_CUENTA, '' TIPO_DOC, '' NUM_CUENTA_TARJ, '' NUM_CI_RUC, '' TITULAR_CUENTA, '' VALOR from factura_venta fv join CLIENTE_GENERAL cg on fv.ID_CLIENTE_GENERAL = cg.ID_CLIENTE_GENERAL where fv.ID_CLIENTE_GENERAL not in (select cc.ID_CLIENTE_GENERAL from CONVENIO_CLIENTE_BANCO_DEBITO cc) and fv.estado_factura_venta > 0 and fv.fecha_emision_factura_venta between @DESDE and @HASTA) as cob ) as tod where tod.saldo > 0 order by tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.fecha_emision_factura_venta"
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, "sp_BuscarCuentasPorCobrarGenrealDetalladoporClienteRangoFecha", True, pars)
            Return table
        End Function

        Public Function BuscarCuentasPorCobrarGeneralDetalladoPorClienteRangoFechaIdCliente(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal idCliente As String) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"DESDE", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"HASTA", SqlDbType.DateTime, fechaFinal})
            pars.Add(New Object() {"ID_CLIENTE", SqlDbType.Int, idCliente})
            Dim sql = "select tod.ID_CLIENTE_GENERAL,tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.id_factura_venta,tod.numero_factura_venta, tod.fecha_emision_factura_venta, tod.facturado, tod.retenido, tod.cobrar, tod.nota_credito, tod.abonado, tod.saldo, tod.observaciones_factura_venta, (tod.BANCO_CONVENIO + ' - ' + tod.TIPO_CUENTA + ' - ' + tod.NUM_CUENTA_TARJ) DEBITAR, (tod.TITULAR_CUENTA + ' - ' + tod.TIPO_DOC + ' - ' +  tod.NUM_CI_RUC) TITULAR, tod.VALOR VALOR_CONVENIO from (select cob.ID_CLIENTE_GENERAL, cob.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, cob.id_factura_venta, cob.numero_factura_venta, cob.fecha_emision_factura_venta, cob.facturado, cob.retenido, (cob.facturado - cob.retenido) cobrar, cob.nota_credito, cob.abonado, ((cob.facturado - cob.retenido) - (cob.nota_credito + cob.abonado)) saldo, cob.observaciones_factura_venta, '' BANCO_CONVENIO, '' TIPO_CUENTA, '' TIPO_DOC, '' NUM_CUENTA_TARJ, '' NUM_CI_RUC, '' TITULAR_CUENTA, '' VALOR from (select cg.ID_CLIENTE_GENERAL, cg.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, fv.id_factura_venta, fv.numero_factura_venta, fv.fecha_emision_factura_venta,fv.total_factura_venta facturado, (select case when sum(cr.total_comprobante_retencion_venta) is null then 0 else sum(cr.total_comprobante_retencion_venta) end from comprobante_retencion_venta cr where cr.id_factura_venta=fv.id_factura_venta and cr.estado_comprobante_retencion_venta > 0 and cr.fecha_emision_comprobante_retencion_venta between @DESDE AND @HASTA) retenido, (select case when sum(nc.total_nota_credito) is null then 0 else sum(nc.total_nota_credito) end from nota_credito_venta nc where nc.id_factura_venta=fv.id_factura_venta and nc.estado_nota_credito > 0 and nc.fecha_emision_nota_credito between @DESDE AND @HASTA) nota_credito, (select case when sum(pv.monto_pago_factura_venta) is null then 0 else sum(pv.monto_pago_factura_venta) end from pagos_factura_venta pv where pv.id_factura_venta=fv.id_factura_venta and pv.estado_pago_factura_venta > 0 and (pv.forma_pago_factura_venta <> 'RETENCIÓN' and pv.forma_pago_factura_venta <> 'NOTA DE CRÉDITO') and pv.fecha_pago_factura_compra between @DESDE AND @HASTA) abonado, fv.observaciones_factura_venta, '' BANCO_CONVENIO, '' TIPO_CUENTA, '' TIPO_DOC, '' NUM_CUENTA_TARJ, '' NUM_CI_RUC, '' TITULAR_CUENTA, '' VALOR from factura_venta fv join CLIENTE_GENERAL cg on fv.ID_CLIENTE_GENERAL = cg.ID_CLIENTE_GENERAL where fv.ID_CLIENTE_GENERAL not in (select cc.ID_CLIENTE_GENERAL from CONVENIO_CLIENTE_BANCO_DEBITO cc) and fv.id_cliente_general = @ID_CLIENTE AND fv.estado_factura_venta > 0 and fv.fecha_emision_factura_venta between @DESDE AND @HASTA) as cob ) as tod where tod.saldo > 0 order by tod.NOMPRE_RAZON_SOCIAL_CLIENTE_GENERAL, tod.fecha_emision_factura_venta"
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, sql, False, pars)
            Return table
        End Function

        Public Function BuscarCuentasPorCobrarGeneralDetalladoPorClienteAcumulado(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"DESDE", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"HASTA", SqlDbType.DateTime, fechaFinal})
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, "sp_BuscarCuentasPorCobrarGenrealDetalladoporClienteAcumulado", True, pars)
            Return table
        End Function

        Public Function BuscarCuentasPorCobrarGeneralDetallado(ByVal tipoCon As TipoConexion, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime) As DataTable
            Dim pars = New List(Of Object())
            pars.Add(New Object() {"DESDE", SqlDbType.DateTime, fechaInicial})
            pars.Add(New Object() {"HASTA", SqlDbType.DateTime, fechaFinal})
            Dim table = ComandosSql.SeleccionarQueryWithParamsToDataTable(tipoCon, "sp_BuscarCuentasPorCobrarGeneralDetallado", True, pars)
            Return table
        End Function


    End Class
End Namespace

