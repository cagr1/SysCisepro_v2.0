'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsBalanceComprobacion"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsBalanceComprobacion
    Inherits Global.System.Data.DataSet
    
    Private tableEMPRESA_GENERAL As EMPRESA_GENERALDataTable
    
    Private tableBALANCE_COMPROBACION As BALANCE_COMPROBACIONDataTable
    
    Private tableDETALLE_BALANCE_COMPROBACIÓN As DETALLE_BALANCE_COMPROBACIÓNDataTable
    
    Private tableCORTES_CONTABLES As CORTES_CONTABLESDataTable
    
    Private relationFK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION As Global.System.Data.DataRelation
    
    Private relationEMPRESA_GENERAL_BALANCE_COMPROBACION As Global.System.Data.DataRelation
    
    Private relationCORTES_CONTABLES_BALANCE_COMPROBACION As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EMPRESA_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New EMPRESA_GENERALDataTable(ds.Tables("EMPRESA_GENERAL")))
            End If
            If (Not (ds.Tables("BALANCE_COMPROBACION")) Is Nothing) Then
                MyBase.Tables.Add(New BALANCE_COMPROBACIONDataTable(ds.Tables("BALANCE_COMPROBACION")))
            End If
            If (Not (ds.Tables("DETALLE_BALANCE_COMPROBACIÓN")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLE_BALANCE_COMPROBACIÓNDataTable(ds.Tables("DETALLE_BALANCE_COMPROBACIÓN")))
            End If
            If (Not (ds.Tables("CORTES_CONTABLES")) Is Nothing) Then
                MyBase.Tables.Add(New CORTES_CONTABLESDataTable(ds.Tables("CORTES_CONTABLES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EMPRESA_GENERAL() As EMPRESA_GENERALDataTable
        Get
            Return Me.tableEMPRESA_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BALANCE_COMPROBACION() As BALANCE_COMPROBACIONDataTable
        Get
            Return Me.tableBALANCE_COMPROBACION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DETALLE_BALANCE_COMPROBACIÓN() As DETALLE_BALANCE_COMPROBACIÓNDataTable
        Get
            Return Me.tableDETALLE_BALANCE_COMPROBACIÓN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CORTES_CONTABLES() As CORTES_CONTABLESDataTable
        Get
            Return Me.tableCORTES_CONTABLES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsBalanceComprobacion = CType(MyBase.Clone,dsBalanceComprobacion)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("EMPRESA_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New EMPRESA_GENERALDataTable(ds.Tables("EMPRESA_GENERAL")))
            End If
            If (Not (ds.Tables("BALANCE_COMPROBACION")) Is Nothing) Then
                MyBase.Tables.Add(New BALANCE_COMPROBACIONDataTable(ds.Tables("BALANCE_COMPROBACION")))
            End If
            If (Not (ds.Tables("DETALLE_BALANCE_COMPROBACIÓN")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLE_BALANCE_COMPROBACIÓNDataTable(ds.Tables("DETALLE_BALANCE_COMPROBACIÓN")))
            End If
            If (Not (ds.Tables("CORTES_CONTABLES")) Is Nothing) Then
                MyBase.Tables.Add(New CORTES_CONTABLESDataTable(ds.Tables("CORTES_CONTABLES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEMPRESA_GENERAL = CType(MyBase.Tables("EMPRESA_GENERAL"),EMPRESA_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEMPRESA_GENERAL) Is Nothing) Then
                Me.tableEMPRESA_GENERAL.InitVars
            End If
        End If
        Me.tableBALANCE_COMPROBACION = CType(MyBase.Tables("BALANCE_COMPROBACION"),BALANCE_COMPROBACIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBALANCE_COMPROBACION) Is Nothing) Then
                Me.tableBALANCE_COMPROBACION.InitVars
            End If
        End If
        Me.tableDETALLE_BALANCE_COMPROBACIÓN = CType(MyBase.Tables("DETALLE_BALANCE_COMPROBACIÓN"),DETALLE_BALANCE_COMPROBACIÓNDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDETALLE_BALANCE_COMPROBACIÓN) Is Nothing) Then
                Me.tableDETALLE_BALANCE_COMPROBACIÓN.InitVars
            End If
        End If
        Me.tableCORTES_CONTABLES = CType(MyBase.Tables("CORTES_CONTABLES"),CORTES_CONTABLESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCORTES_CONTABLES) Is Nothing) Then
                Me.tableCORTES_CONTABLES.InitVars
            End If
        End If
        Me.relationFK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION = Me.Relations("FK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION")
        Me.relationEMPRESA_GENERAL_BALANCE_COMPROBACION = Me.Relations("EMPRESA_GENERAL_BALANCE_COMPROBACION")
        Me.relationCORTES_CONTABLES_BALANCE_COMPROBACION = Me.Relations("CORTES_CONTABLES_BALANCE_COMPROBACION")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsBalanceComprobacion"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsBalanceComprobacion.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEMPRESA_GENERAL = New EMPRESA_GENERALDataTable()
        MyBase.Tables.Add(Me.tableEMPRESA_GENERAL)
        Me.tableBALANCE_COMPROBACION = New BALANCE_COMPROBACIONDataTable()
        MyBase.Tables.Add(Me.tableBALANCE_COMPROBACION)
        Me.tableDETALLE_BALANCE_COMPROBACIÓN = New DETALLE_BALANCE_COMPROBACIÓNDataTable()
        MyBase.Tables.Add(Me.tableDETALLE_BALANCE_COMPROBACIÓN)
        Me.tableCORTES_CONTABLES = New CORTES_CONTABLESDataTable()
        MyBase.Tables.Add(Me.tableCORTES_CONTABLES)
        Me.relationFK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION = New Global.System.Data.DataRelation("FK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION", New Global.System.Data.DataColumn() {Me.tableBALANCE_COMPROBACION.ID_BALANCEColumn}, New Global.System.Data.DataColumn() {Me.tableDETALLE_BALANCE_COMPROBACIÓN.ID_BALANCEColumn}, false)
        Me.Relations.Add(Me.relationFK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION)
        Me.relationEMPRESA_GENERAL_BALANCE_COMPROBACION = New Global.System.Data.DataRelation("EMPRESA_GENERAL_BALANCE_COMPROBACION", New Global.System.Data.DataColumn() {Me.tableEMPRESA_GENERAL.ID_EMPRESAColumn}, New Global.System.Data.DataColumn() {Me.tableBALANCE_COMPROBACION.ID_EMPRESAColumn}, false)
        Me.Relations.Add(Me.relationEMPRESA_GENERAL_BALANCE_COMPROBACION)
        Me.relationCORTES_CONTABLES_BALANCE_COMPROBACION = New Global.System.Data.DataRelation("CORTES_CONTABLES_BALANCE_COMPROBACION", New Global.System.Data.DataColumn() {Me.tableCORTES_CONTABLES.ID_CORTEColumn}, New Global.System.Data.DataColumn() {Me.tableBALANCE_COMPROBACION.ID_CORTEColumn}, false)
        Me.Relations.Add(Me.relationCORTES_CONTABLES_BALANCE_COMPROBACION)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeEMPRESA_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeBALANCE_COMPROBACION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeDETALLE_BALANCE_COMPROBACIÓN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCORTES_CONTABLES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsBalanceComprobacion = New dsBalanceComprobacion()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub EMPRESA_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As EMPRESA_GENERALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub BALANCE_COMPROBACIONRowChangeEventHandler(ByVal sender As Object, ByVal e As BALANCE_COMPROBACIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub DETALLE_BALANCE_COMPROBACIÓNRowChangeEventHandler(ByVal sender As Object, ByVal e As DETALLE_BALANCE_COMPROBACIÓNRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CORTES_CONTABLESRowChangeEventHandler(ByVal sender As Object, ByVal e As CORTES_CONTABLESRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EMPRESA_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of EMPRESA_GENERALRow)
        
        Private columnID_EMPRESA As Global.System.Data.DataColumn
        
        Private columnCODIGO_EMPRESA As Global.System.Data.DataColumn
        
        Private columnRUC_EMPRESA As Global.System.Data.DataColumn
        
        Private columnRAZON_SOCIAL_EMPRESA As Global.System.Data.DataColumn
        
        Private columnNOMBRE_COMERCIAL_EMPRESA As Global.System.Data.DataColumn
        
        Private columnRUC_EMPRE As Global.System.Data.DataColumn
        
        Private columnDIRECCION_MATRIZ_EMPRESA As Global.System.Data.DataColumn
        
        Private columnNRO_RES_CONT_ESPECIAL_EMPRESA As Global.System.Data.DataColumn
        
        Private columnOBLIGADO_LLEVAR_CONT_EMPRESA As Global.System.Data.DataColumn
        
        Private columnESTADO_EMPRESA As Global.System.Data.DataColumn
        
        Private columnTELEFONO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EMPRESA_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RUC_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUC_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RAZON_SOCIAL_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZON_SOCIAL_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_COMERCIAL_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_COMERCIAL_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RUC_EMPREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUC_EMPRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DIRECCION_MATRIZ_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION_MATRIZ_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NRO_RES_CONT_ESPECIAL_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_RES_CONT_ESPECIAL_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property OBLIGADO_LLEVAR_CONT_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOBLIGADO_LLEVAR_CONT_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELEFONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EMPRESA_GENERALRow
            Get
                Return CType(Me.Rows(index),EMPRESA_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EMPRESA_GENERALRowChanging As EMPRESA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EMPRESA_GENERALRowChanged As EMPRESA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EMPRESA_GENERALRowDeleting As EMPRESA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EMPRESA_GENERALRowDeleted As EMPRESA_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddEMPRESA_GENERALRow(ByVal row As EMPRESA_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddEMPRESA_GENERALRow(ByVal ID_EMPRESA As Integer, ByVal CODIGO_EMPRESA As Integer, ByVal RUC_EMPRESA As String, ByVal RAZON_SOCIAL_EMPRESA As String, ByVal NOMBRE_COMERCIAL_EMPRESA As String, ByVal RUC_EMPRE As String, ByVal DIRECCION_MATRIZ_EMPRESA As String, ByVal NRO_RES_CONT_ESPECIAL_EMPRESA As String, ByVal OBLIGADO_LLEVAR_CONT_EMPRESA As String, ByVal ESTADO_EMPRESA As Integer, ByVal TELEFONO As String) As EMPRESA_GENERALRow
            Dim rowEMPRESA_GENERALRow As EMPRESA_GENERALRow = CType(Me.NewRow,EMPRESA_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_EMPRESA, CODIGO_EMPRESA, RUC_EMPRESA, RAZON_SOCIAL_EMPRESA, NOMBRE_COMERCIAL_EMPRESA, RUC_EMPRE, DIRECCION_MATRIZ_EMPRESA, NRO_RES_CONT_ESPECIAL_EMPRESA, OBLIGADO_LLEVAR_CONT_EMPRESA, ESTADO_EMPRESA, TELEFONO}
            rowEMPRESA_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEMPRESA_GENERALRow)
            Return rowEMPRESA_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_EMPRESA(ByVal ID_EMPRESA As Integer) As EMPRESA_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_EMPRESA}),EMPRESA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EMPRESA_GENERALDataTable = CType(MyBase.Clone,EMPRESA_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EMPRESA_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_EMPRESA = MyBase.Columns("ID_EMPRESA")
            Me.columnCODIGO_EMPRESA = MyBase.Columns("CODIGO_EMPRESA")
            Me.columnRUC_EMPRESA = MyBase.Columns("RUC_EMPRESA")
            Me.columnRAZON_SOCIAL_EMPRESA = MyBase.Columns("RAZON_SOCIAL_EMPRESA")
            Me.columnNOMBRE_COMERCIAL_EMPRESA = MyBase.Columns("NOMBRE_COMERCIAL_EMPRESA")
            Me.columnRUC_EMPRE = MyBase.Columns("RUC_EMPRE")
            Me.columnDIRECCION_MATRIZ_EMPRESA = MyBase.Columns("DIRECCION_MATRIZ_EMPRESA")
            Me.columnNRO_RES_CONT_ESPECIAL_EMPRESA = MyBase.Columns("NRO_RES_CONT_ESPECIAL_EMPRESA")
            Me.columnOBLIGADO_LLEVAR_CONT_EMPRESA = MyBase.Columns("OBLIGADO_LLEVAR_CONT_EMPRESA")
            Me.columnESTADO_EMPRESA = MyBase.Columns("ESTADO_EMPRESA")
            Me.columnTELEFONO = MyBase.Columns("TELEFONO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_EMPRESA = New Global.System.Data.DataColumn("ID_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPRESA)
            Me.columnCODIGO_EMPRESA = New Global.System.Data.DataColumn("CODIGO_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_EMPRESA)
            Me.columnRUC_EMPRESA = New Global.System.Data.DataColumn("RUC_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC_EMPRESA)
            Me.columnRAZON_SOCIAL_EMPRESA = New Global.System.Data.DataColumn("RAZON_SOCIAL_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZON_SOCIAL_EMPRESA)
            Me.columnNOMBRE_COMERCIAL_EMPRESA = New Global.System.Data.DataColumn("NOMBRE_COMERCIAL_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_COMERCIAL_EMPRESA)
            Me.columnRUC_EMPRE = New Global.System.Data.DataColumn("RUC_EMPRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC_EMPRE)
            Me.columnDIRECCION_MATRIZ_EMPRESA = New Global.System.Data.DataColumn("DIRECCION_MATRIZ_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION_MATRIZ_EMPRESA)
            Me.columnNRO_RES_CONT_ESPECIAL_EMPRESA = New Global.System.Data.DataColumn("NRO_RES_CONT_ESPECIAL_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_RES_CONT_ESPECIAL_EMPRESA)
            Me.columnOBLIGADO_LLEVAR_CONT_EMPRESA = New Global.System.Data.DataColumn("OBLIGADO_LLEVAR_CONT_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOBLIGADO_LLEVAR_CONT_EMPRESA)
            Me.columnESTADO_EMPRESA = New Global.System.Data.DataColumn("ESTADO_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_EMPRESA)
            Me.columnTELEFONO = New Global.System.Data.DataColumn("TELEFONO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_EMPRESA}, true))
            Me.columnID_EMPRESA.AllowDBNull = false
            Me.columnID_EMPRESA.Unique = true
            Me.columnCODIGO_EMPRESA.AllowDBNull = false
            Me.columnRUC_EMPRESA.MaxLength = 15
            Me.columnRAZON_SOCIAL_EMPRESA.AllowDBNull = false
            Me.columnRAZON_SOCIAL_EMPRESA.MaxLength = 2147483647
            Me.columnNOMBRE_COMERCIAL_EMPRESA.AllowDBNull = false
            Me.columnNOMBRE_COMERCIAL_EMPRESA.MaxLength = 2147483647
            Me.columnRUC_EMPRE.AllowDBNull = false
            Me.columnRUC_EMPRE.MaxLength = 15
            Me.columnDIRECCION_MATRIZ_EMPRESA.AllowDBNull = false
            Me.columnDIRECCION_MATRIZ_EMPRESA.MaxLength = 2147483647
            Me.columnNRO_RES_CONT_ESPECIAL_EMPRESA.MaxLength = 50
            Me.columnOBLIGADO_LLEVAR_CONT_EMPRESA.AllowDBNull = false
            Me.columnOBLIGADO_LLEVAR_CONT_EMPRESA.MaxLength = 50
            Me.columnESTADO_EMPRESA.AllowDBNull = false
            Me.columnTELEFONO.AllowDBNull = false
            Me.columnTELEFONO.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewEMPRESA_GENERALRow() As EMPRESA_GENERALRow
            Return CType(Me.NewRow,EMPRESA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EMPRESA_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EMPRESA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EMPRESA_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent EMPRESA_GENERALRowChanged(Me, New EMPRESA_GENERALRowChangeEvent(CType(e.Row,EMPRESA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EMPRESA_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent EMPRESA_GENERALRowChanging(Me, New EMPRESA_GENERALRowChangeEvent(CType(e.Row,EMPRESA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EMPRESA_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent EMPRESA_GENERALRowDeleted(Me, New EMPRESA_GENERALRowChangeEvent(CType(e.Row,EMPRESA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EMPRESA_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent EMPRESA_GENERALRowDeleting(Me, New EMPRESA_GENERALRowChangeEvent(CType(e.Row,EMPRESA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveEMPRESA_GENERALRow(ByVal row As EMPRESA_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsBalanceComprobacion = New dsBalanceComprobacion()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EMPRESA_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BALANCE_COMPROBACIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of BALANCE_COMPROBACIONRow)
        
        Private columnID_BALANCE As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnFECHA_INICIO_CORTE As Global.System.Data.DataColumn
        
        Private columnFECHA_FIN_CORTE As Global.System.Data.DataColumn
        
        Private columnTOTAL_DEBE As Global.System.Data.DataColumn
        
        Private columnTOTAL_HABER As Global.System.Data.DataColumn
        
        Private columnTOTAL_DEUDOR As Global.System.Data.DataColumn
        
        Private columnTOTAL_ACREEDOR As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnID_CORTE As Global.System.Data.DataColumn
        
        Private columnID_EMPRESA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BALANCE_COMPROBACION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_BALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_BALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_INICIO_CORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_INICIO_CORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_FIN_CORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_FIN_CORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TOTAL_DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_DEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TOTAL_HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_HABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TOTAL_DEUDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_DEUDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TOTAL_ACREEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_ACREEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BALANCE_COMPROBACIONRow
            Get
                Return CType(Me.Rows(index),BALANCE_COMPROBACIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BALANCE_COMPROBACIONRowChanging As BALANCE_COMPROBACIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BALANCE_COMPROBACIONRowChanged As BALANCE_COMPROBACIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BALANCE_COMPROBACIONRowDeleting As BALANCE_COMPROBACIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BALANCE_COMPROBACIONRowDeleted As BALANCE_COMPROBACIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddBALANCE_COMPROBACIONRow(ByVal row As BALANCE_COMPROBACIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddBALANCE_COMPROBACIONRow(ByVal ID_BALANCE As Long, ByVal DESCRIPCION As String, ByVal FECHA As Date, ByVal FECHA_INICIO_CORTE As Date, ByVal FECHA_FIN_CORTE As Date, ByVal TOTAL_DEBE As Decimal, ByVal TOTAL_HABER As Decimal, ByVal TOTAL_DEUDOR As Decimal, ByVal TOTAL_ACREEDOR As Decimal, ByVal ESTADO As Integer, ByVal parentCORTES_CONTABLESRowByCORTES_CONTABLES_BALANCE_COMPROBACION As CORTES_CONTABLESRow, ByVal parentEMPRESA_GENERALRowByEMPRESA_GENERAL_BALANCE_COMPROBACION As EMPRESA_GENERALRow) As BALANCE_COMPROBACIONRow
            Dim rowBALANCE_COMPROBACIONRow As BALANCE_COMPROBACIONRow = CType(Me.NewRow,BALANCE_COMPROBACIONRow)
            Dim columnValuesArray() As Object = New Object() {ID_BALANCE, DESCRIPCION, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, TOTAL_DEBE, TOTAL_HABER, TOTAL_DEUDOR, TOTAL_ACREEDOR, ESTADO, Nothing, Nothing}
            If (Not (parentCORTES_CONTABLESRowByCORTES_CONTABLES_BALANCE_COMPROBACION) Is Nothing) Then
                columnValuesArray(10) = parentCORTES_CONTABLESRowByCORTES_CONTABLES_BALANCE_COMPROBACION(0)
            End If
            If (Not (parentEMPRESA_GENERALRowByEMPRESA_GENERAL_BALANCE_COMPROBACION) Is Nothing) Then
                columnValuesArray(11) = parentEMPRESA_GENERALRowByEMPRESA_GENERAL_BALANCE_COMPROBACION(0)
            End If
            rowBALANCE_COMPROBACIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBALANCE_COMPROBACIONRow)
            Return rowBALANCE_COMPROBACIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_BALANCE(ByVal ID_BALANCE As Long) As BALANCE_COMPROBACIONRow
            Return CType(Me.Rows.Find(New Object() {ID_BALANCE}),BALANCE_COMPROBACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BALANCE_COMPROBACIONDataTable = CType(MyBase.Clone,BALANCE_COMPROBACIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BALANCE_COMPROBACIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_BALANCE = MyBase.Columns("ID_BALANCE")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnFECHA_INICIO_CORTE = MyBase.Columns("FECHA_INICIO_CORTE")
            Me.columnFECHA_FIN_CORTE = MyBase.Columns("FECHA_FIN_CORTE")
            Me.columnTOTAL_DEBE = MyBase.Columns("TOTAL_DEBE")
            Me.columnTOTAL_HABER = MyBase.Columns("TOTAL_HABER")
            Me.columnTOTAL_DEUDOR = MyBase.Columns("TOTAL_DEUDOR")
            Me.columnTOTAL_ACREEDOR = MyBase.Columns("TOTAL_ACREEDOR")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnID_CORTE = MyBase.Columns("ID_CORTE")
            Me.columnID_EMPRESA = MyBase.Columns("ID_EMPRESA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_BALANCE = New Global.System.Data.DataColumn("ID_BALANCE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_BALANCE)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnFECHA_INICIO_CORTE = New Global.System.Data.DataColumn("FECHA_INICIO_CORTE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INICIO_CORTE)
            Me.columnFECHA_FIN_CORTE = New Global.System.Data.DataColumn("FECHA_FIN_CORTE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_FIN_CORTE)
            Me.columnTOTAL_DEBE = New Global.System.Data.DataColumn("TOTAL_DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_DEBE)
            Me.columnTOTAL_HABER = New Global.System.Data.DataColumn("TOTAL_HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_HABER)
            Me.columnTOTAL_DEUDOR = New Global.System.Data.DataColumn("TOTAL_DEUDOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_DEUDOR)
            Me.columnTOTAL_ACREEDOR = New Global.System.Data.DataColumn("TOTAL_ACREEDOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_ACREEDOR)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_CORTE = New Global.System.Data.DataColumn("ID_CORTE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CORTE)
            Me.columnID_EMPRESA = New Global.System.Data.DataColumn("ID_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPRESA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_BALANCE}, true))
            Me.columnID_BALANCE.AllowDBNull = false
            Me.columnID_BALANCE.Unique = true
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
            Me.columnFECHA.AllowDBNull = false
            Me.columnFECHA_INICIO_CORTE.AllowDBNull = false
            Me.columnFECHA_FIN_CORTE.AllowDBNull = false
            Me.columnTOTAL_DEBE.AllowDBNull = false
            Me.columnTOTAL_HABER.AllowDBNull = false
            Me.columnTOTAL_DEUDOR.AllowDBNull = false
            Me.columnTOTAL_ACREEDOR.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
            Me.columnID_CORTE.AllowDBNull = false
            Me.columnID_EMPRESA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewBALANCE_COMPROBACIONRow() As BALANCE_COMPROBACIONRow
            Return CType(Me.NewRow,BALANCE_COMPROBACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BALANCE_COMPROBACIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BALANCE_COMPROBACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BALANCE_COMPROBACIONRowChangedEvent) Is Nothing) Then
                RaiseEvent BALANCE_COMPROBACIONRowChanged(Me, New BALANCE_COMPROBACIONRowChangeEvent(CType(e.Row,BALANCE_COMPROBACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BALANCE_COMPROBACIONRowChangingEvent) Is Nothing) Then
                RaiseEvent BALANCE_COMPROBACIONRowChanging(Me, New BALANCE_COMPROBACIONRowChangeEvent(CType(e.Row,BALANCE_COMPROBACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BALANCE_COMPROBACIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent BALANCE_COMPROBACIONRowDeleted(Me, New BALANCE_COMPROBACIONRowChangeEvent(CType(e.Row,BALANCE_COMPROBACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BALANCE_COMPROBACIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent BALANCE_COMPROBACIONRowDeleting(Me, New BALANCE_COMPROBACIONRowChangeEvent(CType(e.Row,BALANCE_COMPROBACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveBALANCE_COMPROBACIONRow(ByVal row As BALANCE_COMPROBACIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsBalanceComprobacion = New dsBalanceComprobacion()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BALANCE_COMPROBACIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DETALLE_BALANCE_COMPROBACIÓNDataTable
        Inherits Global.System.Data.TypedTableBase(Of DETALLE_BALANCE_COMPROBACIÓNRow)
        
        Private columnID_DETALLE As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnREFERENCIA As Global.System.Data.DataColumn
        
        Private columnDEBE As Global.System.Data.DataColumn
        
        Private columnHABER As Global.System.Data.DataColumn
        
        Private columnDEUDOR As Global.System.Data.DataColumn
        
        Private columnACREEDOR As Global.System.Data.DataColumn
        
        Private columnDEUDOR_ACREEDOR As Global.System.Data.DataColumn
        
        Private columnID_BALANCE As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DETALLE_BALANCE_COMPROBACIÓN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_DETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property REFERENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DEUDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEUDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ACREEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACREEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DEUDOR_ACREEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEUDOR_ACREEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_BALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_BALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DETALLE_BALANCE_COMPROBACIÓNRow
            Get
                Return CType(Me.Rows(index),DETALLE_BALANCE_COMPROBACIÓNRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event DETALLE_BALANCE_COMPROBACIÓNRowChanging As DETALLE_BALANCE_COMPROBACIÓNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event DETALLE_BALANCE_COMPROBACIÓNRowChanged As DETALLE_BALANCE_COMPROBACIÓNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event DETALLE_BALANCE_COMPROBACIÓNRowDeleting As DETALLE_BALANCE_COMPROBACIÓNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event DETALLE_BALANCE_COMPROBACIÓNRowDeleted As DETALLE_BALANCE_COMPROBACIÓNRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddDETALLE_BALANCE_COMPROBACIÓNRow(ByVal row As DETALLE_BALANCE_COMPROBACIÓNRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddDETALLE_BALANCE_COMPROBACIÓNRow(ByVal ID_DETALLE As Long, ByVal FECHA As Date, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal REFERENCIA As Long, ByVal DEBE As Decimal, ByVal HABER As Decimal, ByVal DEUDOR As Decimal, ByVal ACREEDOR As Decimal, ByVal DEUDOR_ACREEDOR As Integer, ByVal parentBALANCE_COMPROBACIONRowByFK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION As BALANCE_COMPROBACIONRow, ByVal ESTADO As Integer) As DETALLE_BALANCE_COMPROBACIÓNRow
            Dim rowDETALLE_BALANCE_COMPROBACIÓNRow As DETALLE_BALANCE_COMPROBACIÓNRow = CType(Me.NewRow,DETALLE_BALANCE_COMPROBACIÓNRow)
            Dim columnValuesArray() As Object = New Object() {ID_DETALLE, FECHA, CODIGO, DESCRIPCION, REFERENCIA, DEBE, HABER, DEUDOR, ACREEDOR, DEUDOR_ACREEDOR, Nothing, ESTADO}
            If (Not (parentBALANCE_COMPROBACIONRowByFK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION) Is Nothing) Then
                columnValuesArray(10) = parentBALANCE_COMPROBACIONRowByFK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION(0)
            End If
            rowDETALLE_BALANCE_COMPROBACIÓNRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDETALLE_BALANCE_COMPROBACIÓNRow)
            Return rowDETALLE_BALANCE_COMPROBACIÓNRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_DETALLE(ByVal ID_DETALLE As Long) As DETALLE_BALANCE_COMPROBACIÓNRow
            Return CType(Me.Rows.Find(New Object() {ID_DETALLE}),DETALLE_BALANCE_COMPROBACIÓNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DETALLE_BALANCE_COMPROBACIÓNDataTable = CType(MyBase.Clone,DETALLE_BALANCE_COMPROBACIÓNDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DETALLE_BALANCE_COMPROBACIÓNDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_DETALLE = MyBase.Columns("ID_DETALLE")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnREFERENCIA = MyBase.Columns("REFERENCIA")
            Me.columnDEBE = MyBase.Columns("DEBE")
            Me.columnHABER = MyBase.Columns("HABER")
            Me.columnDEUDOR = MyBase.Columns("DEUDOR")
            Me.columnACREEDOR = MyBase.Columns("ACREEDOR")
            Me.columnDEUDOR_ACREEDOR = MyBase.Columns("DEUDOR_ACREEDOR")
            Me.columnID_BALANCE = MyBase.Columns("ID_BALANCE")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_DETALLE = New Global.System.Data.DataColumn("ID_DETALLE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_DETALLE)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnREFERENCIA = New Global.System.Data.DataColumn("REFERENCIA", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA)
            Me.columnDEBE = New Global.System.Data.DataColumn("DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE)
            Me.columnHABER = New Global.System.Data.DataColumn("HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABER)
            Me.columnDEUDOR = New Global.System.Data.DataColumn("DEUDOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEUDOR)
            Me.columnACREEDOR = New Global.System.Data.DataColumn("ACREEDOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACREEDOR)
            Me.columnDEUDOR_ACREEDOR = New Global.System.Data.DataColumn("DEUDOR_ACREEDOR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEUDOR_ACREEDOR)
            Me.columnID_BALANCE = New Global.System.Data.DataColumn("ID_BALANCE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_BALANCE)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_DETALLE}, true))
            Me.columnID_DETALLE.AllowDBNull = false
            Me.columnID_DETALLE.Unique = true
            Me.columnFECHA.AllowDBNull = false
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
            Me.columnREFERENCIA.AllowDBNull = false
            Me.columnDEBE.AllowDBNull = false
            Me.columnHABER.AllowDBNull = false
            Me.columnDEUDOR.AllowDBNull = false
            Me.columnACREEDOR.AllowDBNull = false
            Me.columnDEUDOR_ACREEDOR.AllowDBNull = false
            Me.columnID_BALANCE.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewDETALLE_BALANCE_COMPROBACIÓNRow() As DETALLE_BALANCE_COMPROBACIÓNRow
            Return CType(Me.NewRow,DETALLE_BALANCE_COMPROBACIÓNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DETALLE_BALANCE_COMPROBACIÓNRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DETALLE_BALANCE_COMPROBACIÓNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DETALLE_BALANCE_COMPROBACIÓNRowChangedEvent) Is Nothing) Then
                RaiseEvent DETALLE_BALANCE_COMPROBACIÓNRowChanged(Me, New DETALLE_BALANCE_COMPROBACIÓNRowChangeEvent(CType(e.Row,DETALLE_BALANCE_COMPROBACIÓNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DETALLE_BALANCE_COMPROBACIÓNRowChangingEvent) Is Nothing) Then
                RaiseEvent DETALLE_BALANCE_COMPROBACIÓNRowChanging(Me, New DETALLE_BALANCE_COMPROBACIÓNRowChangeEvent(CType(e.Row,DETALLE_BALANCE_COMPROBACIÓNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DETALLE_BALANCE_COMPROBACIÓNRowDeletedEvent) Is Nothing) Then
                RaiseEvent DETALLE_BALANCE_COMPROBACIÓNRowDeleted(Me, New DETALLE_BALANCE_COMPROBACIÓNRowChangeEvent(CType(e.Row,DETALLE_BALANCE_COMPROBACIÓNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DETALLE_BALANCE_COMPROBACIÓNRowDeletingEvent) Is Nothing) Then
                RaiseEvent DETALLE_BALANCE_COMPROBACIÓNRowDeleting(Me, New DETALLE_BALANCE_COMPROBACIÓNRowChangeEvent(CType(e.Row,DETALLE_BALANCE_COMPROBACIÓNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveDETALLE_BALANCE_COMPROBACIÓNRow(ByVal row As DETALLE_BALANCE_COMPROBACIÓNRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsBalanceComprobacion = New dsBalanceComprobacion()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DETALLE_BALANCE_COMPROBACIÓNDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CORTES_CONTABLESDataTable
        Inherits Global.System.Data.TypedTableBase(Of CORTES_CONTABLESRow)
        
        Private columnID_CORTE As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnFECHA_INICIO_CORTE As Global.System.Data.DataColumn
        
        Private columnFECHA_FIN_CORTE As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnID_EMPRESA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CORTES_CONTABLES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_INICIO_CORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_INICIO_CORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_FIN_CORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_FIN_CORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CORTES_CONTABLESRow
            Get
                Return CType(Me.Rows(index),CORTES_CONTABLESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CORTES_CONTABLESRowChanging As CORTES_CONTABLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CORTES_CONTABLESRowChanged As CORTES_CONTABLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CORTES_CONTABLESRowDeleting As CORTES_CONTABLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CORTES_CONTABLESRowDeleted As CORTES_CONTABLESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCORTES_CONTABLESRow(ByVal row As CORTES_CONTABLESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCORTES_CONTABLESRow(ByVal ID_CORTE As Long, ByVal FECHA As Date, ByVal FECHA_INICIO_CORTE As Date, ByVal FECHA_FIN_CORTE As Date, ByVal ESTADO As Integer, ByVal ID_EMPRESA As Integer) As CORTES_CONTABLESRow
            Dim rowCORTES_CONTABLESRow As CORTES_CONTABLESRow = CType(Me.NewRow,CORTES_CONTABLESRow)
            Dim columnValuesArray() As Object = New Object() {ID_CORTE, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, ESTADO, ID_EMPRESA}
            rowCORTES_CONTABLESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCORTES_CONTABLESRow)
            Return rowCORTES_CONTABLESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_CORTE(ByVal ID_CORTE As Long) As CORTES_CONTABLESRow
            Return CType(Me.Rows.Find(New Object() {ID_CORTE}),CORTES_CONTABLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CORTES_CONTABLESDataTable = CType(MyBase.Clone,CORTES_CONTABLESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CORTES_CONTABLESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_CORTE = MyBase.Columns("ID_CORTE")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnFECHA_INICIO_CORTE = MyBase.Columns("FECHA_INICIO_CORTE")
            Me.columnFECHA_FIN_CORTE = MyBase.Columns("FECHA_FIN_CORTE")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnID_EMPRESA = MyBase.Columns("ID_EMPRESA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_CORTE = New Global.System.Data.DataColumn("ID_CORTE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CORTE)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnFECHA_INICIO_CORTE = New Global.System.Data.DataColumn("FECHA_INICIO_CORTE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INICIO_CORTE)
            Me.columnFECHA_FIN_CORTE = New Global.System.Data.DataColumn("FECHA_FIN_CORTE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_FIN_CORTE)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_EMPRESA = New Global.System.Data.DataColumn("ID_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPRESA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_CORTE}, true))
            Me.columnID_CORTE.AllowDBNull = false
            Me.columnID_CORTE.Unique = true
            Me.columnFECHA.AllowDBNull = false
            Me.columnFECHA_INICIO_CORTE.AllowDBNull = false
            Me.columnFECHA_FIN_CORTE.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
            Me.columnID_EMPRESA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCORTES_CONTABLESRow() As CORTES_CONTABLESRow
            Return CType(Me.NewRow,CORTES_CONTABLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CORTES_CONTABLESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CORTES_CONTABLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CORTES_CONTABLESRowChangedEvent) Is Nothing) Then
                RaiseEvent CORTES_CONTABLESRowChanged(Me, New CORTES_CONTABLESRowChangeEvent(CType(e.Row,CORTES_CONTABLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CORTES_CONTABLESRowChangingEvent) Is Nothing) Then
                RaiseEvent CORTES_CONTABLESRowChanging(Me, New CORTES_CONTABLESRowChangeEvent(CType(e.Row,CORTES_CONTABLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CORTES_CONTABLESRowDeletedEvent) Is Nothing) Then
                RaiseEvent CORTES_CONTABLESRowDeleted(Me, New CORTES_CONTABLESRowChangeEvent(CType(e.Row,CORTES_CONTABLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CORTES_CONTABLESRowDeletingEvent) Is Nothing) Then
                RaiseEvent CORTES_CONTABLESRowDeleting(Me, New CORTES_CONTABLESRowChangeEvent(CType(e.Row,CORTES_CONTABLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCORTES_CONTABLESRow(ByVal row As CORTES_CONTABLESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsBalanceComprobacion = New dsBalanceComprobacion()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CORTES_CONTABLESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EMPRESA_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableEMPRESA_GENERAL As EMPRESA_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEMPRESA_GENERAL = CType(Me.Table,EMPRESA_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.ID_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.ID_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.CODIGO_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.CODIGO_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RUC_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEMPRESA_GENERAL.RUC_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RUC_EMPRESA' de la tabla 'EMPRESA_GENERAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.RUC_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RAZON_SOCIAL_EMPRESA() As String
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.RAZON_SOCIAL_EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.RAZON_SOCIAL_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_COMERCIAL_EMPRESA() As String
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.NOMBRE_COMERCIAL_EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.NOMBRE_COMERCIAL_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RUC_EMPRE() As String
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.RUC_EMPREColumn),String)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.RUC_EMPREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DIRECCION_MATRIZ_EMPRESA() As String
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.DIRECCION_MATRIZ_EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.DIRECCION_MATRIZ_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NRO_RES_CONT_ESPECIAL_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEMPRESA_GENERAL.NRO_RES_CONT_ESPECIAL_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_RES_CONT_ESPECIAL_EMPRESA' de la tabla 'EMPRESA_GENER"& _ 
                            "AL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.NRO_RES_CONT_ESPECIAL_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property OBLIGADO_LLEVAR_CONT_EMPRESA() As String
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.OBLIGADO_LLEVAR_CONT_EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.OBLIGADO_LLEVAR_CONT_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.ESTADO_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.ESTADO_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TELEFONO() As String
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.TELEFONOColumn),String)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.TELEFONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsRUC_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableEMPRESA_GENERAL.RUC_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetRUC_EMPRESANull()
            Me(Me.tableEMPRESA_GENERAL.RUC_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNRO_RES_CONT_ESPECIAL_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableEMPRESA_GENERAL.NRO_RES_CONT_ESPECIAL_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNRO_RES_CONT_ESPECIAL_EMPRESANull()
            Me(Me.tableEMPRESA_GENERAL.NRO_RES_CONT_ESPECIAL_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetBALANCE_COMPROBACIONRows() As BALANCE_COMPROBACIONRow()
            If (Me.Table.ChildRelations("EMPRESA_GENERAL_BALANCE_COMPROBACION") Is Nothing) Then
                Return New BALANCE_COMPROBACIONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("EMPRESA_GENERAL_BALANCE_COMPROBACION")),BALANCE_COMPROBACIONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BALANCE_COMPROBACIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableBALANCE_COMPROBACION As BALANCE_COMPROBACIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBALANCE_COMPROBACION = CType(Me.Table,BALANCE_COMPROBACIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_BALANCE() As Long
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.ID_BALANCEColumn),Long)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.ID_BALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA() As Date
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_INICIO_CORTE() As Date
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.FECHA_INICIO_CORTEColumn),Date)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.FECHA_INICIO_CORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_FIN_CORTE() As Date
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.FECHA_FIN_CORTEColumn),Date)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.FECHA_FIN_CORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TOTAL_DEBE() As Decimal
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.TOTAL_DEBEColumn),Decimal)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.TOTAL_DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TOTAL_HABER() As Decimal
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.TOTAL_HABERColumn),Decimal)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.TOTAL_HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TOTAL_DEUDOR() As Decimal
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.TOTAL_DEUDORColumn),Decimal)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.TOTAL_DEUDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TOTAL_ACREEDOR() As Decimal
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.TOTAL_ACREEDORColumn),Decimal)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.TOTAL_ACREEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CORTE() As Long
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.ID_CORTEColumn),Long)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.ID_CORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableBALANCE_COMPROBACION.ID_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableBALANCE_COMPROBACION.ID_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property EMPRESA_GENERALRow() As EMPRESA_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EMPRESA_GENERAL_BALANCE_COMPROBACION")),EMPRESA_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EMPRESA_GENERAL_BALANCE_COMPROBACION"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CORTES_CONTABLESRow() As CORTES_CONTABLESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CORTES_CONTABLES_BALANCE_COMPROBACION")),CORTES_CONTABLESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CORTES_CONTABLES_BALANCE_COMPROBACION"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetDETALLE_BALANCE_COMPROBACIÓNRows() As DETALLE_BALANCE_COMPROBACIÓNRow()
            If (Me.Table.ChildRelations("FK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION") Is Nothing) Then
                Return New DETALLE_BALANCE_COMPROBACIÓNRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION")),DETALLE_BALANCE_COMPROBACIÓNRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DETALLE_BALANCE_COMPROBACIÓNRow
        Inherits Global.System.Data.DataRow
        
        Private tableDETALLE_BALANCE_COMPROBACIÓN As DETALLE_BALANCE_COMPROBACIÓNDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDETALLE_BALANCE_COMPROBACIÓN = CType(Me.Table,DETALLE_BALANCE_COMPROBACIÓNDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_DETALLE() As Long
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.ID_DETALLEColumn),Long)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.ID_DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA() As Date
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property REFERENCIA() As Long
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.REFERENCIAColumn),Long)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.REFERENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DEBE() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.DEBEColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property HABER() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.HABERColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DEUDOR() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.DEUDORColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.DEUDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACREEDOR() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.ACREEDORColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.ACREEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DEUDOR_ACREEDOR() As Integer
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.DEUDOR_ACREEDORColumn),Integer)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.DEUDOR_ACREEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_BALANCE() As Long
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.ID_BALANCEColumn),Long)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.ID_BALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableDETALLE_BALANCE_COMPROBACIÓN.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BALANCE_COMPROBACIONRow() As BALANCE_COMPROBACIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION")),BALANCE_COMPROBACIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DETALLE_BALANCE_COMPROBACIÓN_BALANCE_COMPROBACION"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CORTES_CONTABLESRow
        Inherits Global.System.Data.DataRow
        
        Private tableCORTES_CONTABLES As CORTES_CONTABLESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCORTES_CONTABLES = CType(Me.Table,CORTES_CONTABLESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CORTE() As Long
            Get
                Return CType(Me(Me.tableCORTES_CONTABLES.ID_CORTEColumn),Long)
            End Get
            Set
                Me(Me.tableCORTES_CONTABLES.ID_CORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA() As Date
            Get
                Return CType(Me(Me.tableCORTES_CONTABLES.FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableCORTES_CONTABLES.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_INICIO_CORTE() As Date
            Get
                Return CType(Me(Me.tableCORTES_CONTABLES.FECHA_INICIO_CORTEColumn),Date)
            End Get
            Set
                Me(Me.tableCORTES_CONTABLES.FECHA_INICIO_CORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_FIN_CORTE() As Date
            Get
                Return CType(Me(Me.tableCORTES_CONTABLES.FECHA_FIN_CORTEColumn),Date)
            End Get
            Set
                Me(Me.tableCORTES_CONTABLES.FECHA_FIN_CORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableCORTES_CONTABLES.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableCORTES_CONTABLES.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableCORTES_CONTABLES.ID_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableCORTES_CONTABLES.ID_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetBALANCE_COMPROBACIONRows() As BALANCE_COMPROBACIONRow()
            If (Me.Table.ChildRelations("CORTES_CONTABLES_BALANCE_COMPROBACION") Is Nothing) Then
                Return New BALANCE_COMPROBACIONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CORTES_CONTABLES_BALANCE_COMPROBACION")),BALANCE_COMPROBACIONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class EMPRESA_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EMPRESA_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As EMPRESA_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As EMPRESA_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class BALANCE_COMPROBACIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BALANCE_COMPROBACIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As BALANCE_COMPROBACIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As BALANCE_COMPROBACIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class DETALLE_BALANCE_COMPROBACIÓNRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DETALLE_BALANCE_COMPROBACIÓNRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As DETALLE_BALANCE_COMPROBACIÓNRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As DETALLE_BALANCE_COMPROBACIÓNRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CORTES_CONTABLESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CORTES_CONTABLESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CORTES_CONTABLESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CORTES_CONTABLESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsBalanceComprobacionTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EMPRESA_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EMPRESA_GENERAL"
            tableMapping.ColumnMappings.Add("ID_EMPRESA", "ID_EMPRESA")
            tableMapping.ColumnMappings.Add("CODIGO_EMPRESA", "CODIGO_EMPRESA")
            tableMapping.ColumnMappings.Add("RUC_EMPRESA", "RUC_EMPRESA")
            tableMapping.ColumnMappings.Add("RAZON_SOCIAL_EMPRESA", "RAZON_SOCIAL_EMPRESA")
            tableMapping.ColumnMappings.Add("NOMBRE_COMERCIAL_EMPRESA", "NOMBRE_COMERCIAL_EMPRESA")
            tableMapping.ColumnMappings.Add("RUC_EMPRE", "RUC_EMPRE")
            tableMapping.ColumnMappings.Add("DIRECCION_MATRIZ_EMPRESA", "DIRECCION_MATRIZ_EMPRESA")
            tableMapping.ColumnMappings.Add("NRO_RES_CONT_ESPECIAL_EMPRESA", "NRO_RES_CONT_ESPECIAL_EMPRESA")
            tableMapping.ColumnMappings.Add("OBLIGADO_LLEVAR_CONT_EMPRESA", "OBLIGADO_LLEVAR_CONT_EMPRESA")
            tableMapping.ColumnMappings.Add("ESTADO_EMPRESA", "ESTADO_EMPRESA")
            tableMapping.ColumnMappings.Add("TELEFONO", "TELEFONO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[EMPRESA_GENERAL] WHERE (([ID_EMPRESA] = @Original_ID_EMPRESA) "& _ 
                "AND ([CODIGO_EMPRESA] = @Original_CODIGO_EMPRESA) AND ((@IsNull_RUC_EMPRESA = 1 "& _ 
                "AND [RUC_EMPRESA] IS NULL) OR ([RUC_EMPRESA] = @Original_RUC_EMPRESA)) AND ([RUC"& _ 
                "_EMPRE] = @Original_RUC_EMPRE) AND ((@IsNull_NRO_RES_CONT_ESPECIAL_EMPRESA = 1 A"& _ 
                "ND [NRO_RES_CONT_ESPECIAL_EMPRESA] IS NULL) OR ([NRO_RES_CONT_ESPECIAL_EMPRESA] "& _ 
                "= @Original_NRO_RES_CONT_ESPECIAL_EMPRESA)) AND ([OBLIGADO_LLEVAR_CONT_EMPRESA] "& _ 
                "= @Original_OBLIGADO_LLEVAR_CONT_EMPRESA) AND ([ESTADO_EMPRESA] = @Original_ESTA"& _ 
                "DO_EMPRESA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CODIGO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RUC_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RUC_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RUC_EMPRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OBLIGADO_LLEVAR_CONT_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBLIGADO_LLEVAR_CONT_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EMPRESA_GENERAL] ([ID_EMPRESA], [CODIGO_EMPRESA], [RUC_EMPRESA"& _ 
                "], [RAZON_SOCIAL_EMPRESA], [NOMBRE_COMERCIAL_EMPRESA], [RUC_EMPRE], [DIRECCION_M"& _ 
                "ATRIZ_EMPRESA], [NRO_RES_CONT_ESPECIAL_EMPRESA], [OBLIGADO_LLEVAR_CONT_EMPRESA],"& _ 
                " [ESTADO_EMPRESA], [TELEFONO]) VALUES (@ID_EMPRESA, @CODIGO_EMPRESA, @RUC_EMPRES"& _ 
                "A, @RAZON_SOCIAL_EMPRESA, @NOMBRE_COMERCIAL_EMPRESA, @RUC_EMPRE, @DIRECCION_MATR"& _ 
                "IZ_EMPRESA, @NRO_RES_CONT_ESPECIAL_EMPRESA, @OBLIGADO_LLEVAR_CONT_EMPRESA, @ESTA"& _ 
                "DO_EMPRESA, @TELEFONO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_EMPRESA, CODIGO_EMPRESA, RUC_EMPRESA, RAZON_S"& _ 
                "OCIAL_EMPRESA, NOMBRE_COMERCIAL_EMPRESA, RUC_EMPRE, DIRECCION_MATRIZ_EMPRESA, NR"& _ 
                "O_RES_CONT_ESPECIAL_EMPRESA, OBLIGADO_LLEVAR_CONT_EMPRESA, ESTADO_EMPRESA, TELEF"& _ 
                "ONO FROM EMPRESA_GENERAL WHERE (ID_EMPRESA = @ID_EMPRESA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUC_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RAZON_SOCIAL_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RAZON_SOCIAL_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_COMERCIAL_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_COMERCIAL_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUC_EMPRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION_MATRIZ_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION_MATRIZ_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBLIGADO_LLEVAR_CONT_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBLIGADO_LLEVAR_CONT_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TELEFONO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[EMPRESA_GENERAL] SET [ID_EMPRESA] = @ID_EMPRESA, [CODIGO_EMPRESA] ="& _ 
                " @CODIGO_EMPRESA, [RUC_EMPRESA] = @RUC_EMPRESA, [RAZON_SOCIAL_EMPRESA] = @RAZON_"& _ 
                "SOCIAL_EMPRESA, [NOMBRE_COMERCIAL_EMPRESA] = @NOMBRE_COMERCIAL_EMPRESA, [RUC_EMP"& _ 
                "RE] = @RUC_EMPRE, [DIRECCION_MATRIZ_EMPRESA] = @DIRECCION_MATRIZ_EMPRESA, [NRO_R"& _ 
                "ES_CONT_ESPECIAL_EMPRESA] = @NRO_RES_CONT_ESPECIAL_EMPRESA, [OBLIGADO_LLEVAR_CON"& _ 
                "T_EMPRESA] = @OBLIGADO_LLEVAR_CONT_EMPRESA, [ESTADO_EMPRESA] = @ESTADO_EMPRESA, "& _ 
                "[TELEFONO] = @TELEFONO WHERE (([ID_EMPRESA] = @Original_ID_EMPRESA) AND ([CODIGO"& _ 
                "_EMPRESA] = @Original_CODIGO_EMPRESA) AND ((@IsNull_RUC_EMPRESA = 1 AND [RUC_EMP"& _ 
                "RESA] IS NULL) OR ([RUC_EMPRESA] = @Original_RUC_EMPRESA)) AND ([RUC_EMPRE] = @O"& _ 
                "riginal_RUC_EMPRE) AND ((@IsNull_NRO_RES_CONT_ESPECIAL_EMPRESA = 1 AND [NRO_RES_"& _ 
                "CONT_ESPECIAL_EMPRESA] IS NULL) OR ([NRO_RES_CONT_ESPECIAL_EMPRESA] = @Original_"& _ 
                "NRO_RES_CONT_ESPECIAL_EMPRESA)) AND ([OBLIGADO_LLEVAR_CONT_EMPRESA] = @Original_"& _ 
                "OBLIGADO_LLEVAR_CONT_EMPRESA) AND ([ESTADO_EMPRESA] = @Original_ESTADO_EMPRESA))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_EMPRESA, CODIGO_EMPRESA, RUC_EMPRESA, RAZON_SOCIAL_EMPRESA, NOMBRE_"& _ 
                "COMERCIAL_EMPRESA, RUC_EMPRE, DIRECCION_MATRIZ_EMPRESA, NRO_RES_CONT_ESPECIAL_EM"& _ 
                "PRESA, OBLIGADO_LLEVAR_CONT_EMPRESA, ESTADO_EMPRESA, TELEFONO FROM EMPRESA_GENER"& _ 
                "AL WHERE (ID_EMPRESA = @ID_EMPRESA)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUC_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RAZON_SOCIAL_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RAZON_SOCIAL_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_COMERCIAL_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_COMERCIAL_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUC_EMPRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION_MATRIZ_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION_MATRIZ_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBLIGADO_LLEVAR_CONT_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBLIGADO_LLEVAR_CONT_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TELEFONO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CODIGO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RUC_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RUC_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RUC_EMPRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_RES_CONT_ESPECIAL_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OBLIGADO_LLEVAR_CONT_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBLIGADO_LLEVAR_CONT_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_EMPRESA, CODIGO_EMPRESA, RUC_EMPRESA, RAZON_SOCIAL_EMPRESA, NOMBRE_COME"& _ 
                "RCIAL_EMPRESA, RUC_EMPRE, DIRECCION_MATRIZ_EMPRESA, NRO_RES_CONT_ESPECIAL_EMPRES"& _ 
                "A, OBLIGADO_LLEVAR_CONT_EMPRESA, ESTADO_EMPRESA, TELEFONO FROM dbo.EMPRESA_GENER"& _ 
                "AL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsBalanceComprobacion.EMPRESA_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsBalanceComprobacion.EMPRESA_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsBalanceComprobacion.EMPRESA_GENERALDataTable = New dsBalanceComprobacion.EMPRESA_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsBalanceComprobacion.EMPRESA_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsBalanceComprobacion) As Integer
            Return Me.Adapter.Update(dataSet, "EMPRESA_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_EMPRESA As Integer, ByVal Original_CODIGO_EMPRESA As Integer, ByVal Original_RUC_EMPRESA As String, ByVal Original_RUC_EMPRE As String, ByVal Original_NRO_RES_CONT_ESPECIAL_EMPRESA As String, ByVal Original_OBLIGADO_LLEVAR_CONT_EMPRESA As String, ByVal Original_ESTADO_EMPRESA As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_EMPRESA,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_EMPRESA,Integer)
            If (Original_RUC_EMPRESA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_RUC_EMPRESA,String)
            End If
            If (Original_RUC_EMPRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RUC_EMPRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_RUC_EMPRE,String)
            End If
            If (Original_NRO_RES_CONT_ESPECIAL_EMPRESA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NRO_RES_CONT_ESPECIAL_EMPRESA,String)
            End If
            If (Original_OBLIGADO_LLEVAR_CONT_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OBLIGADO_LLEVAR_CONT_EMPRESA")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_OBLIGADO_LLEVAR_CONT_EMPRESA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ESTADO_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_EMPRESA As Integer, ByVal CODIGO_EMPRESA As Integer, ByVal RUC_EMPRESA As String, ByVal RAZON_SOCIAL_EMPRESA As String, ByVal NOMBRE_COMERCIAL_EMPRESA As String, ByVal RUC_EMPRE As String, ByVal DIRECCION_MATRIZ_EMPRESA As String, ByVal NRO_RES_CONT_ESPECIAL_EMPRESA As String, ByVal OBLIGADO_LLEVAR_CONT_EMPRESA As String, ByVal ESTADO_EMPRESA As Integer, ByVal TELEFONO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_EMPRESA,Integer)
            If (RUC_EMPRESA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(RUC_EMPRESA,String)
            End If
            If (RAZON_SOCIAL_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RAZON_SOCIAL_EMPRESA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RAZON_SOCIAL_EMPRESA,String)
            End If
            If (NOMBRE_COMERCIAL_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_COMERCIAL_EMPRESA")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NOMBRE_COMERCIAL_EMPRESA,String)
            End If
            If (RUC_EMPRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RUC_EMPRE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RUC_EMPRE,String)
            End If
            If (DIRECCION_MATRIZ_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DIRECCION_MATRIZ_EMPRESA")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DIRECCION_MATRIZ_EMPRESA,String)
            End If
            If (NRO_RES_CONT_ESPECIAL_EMPRESA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(NRO_RES_CONT_ESPECIAL_EMPRESA,String)
            End If
            If (OBLIGADO_LLEVAR_CONT_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OBLIGADO_LLEVAR_CONT_EMPRESA")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(OBLIGADO_LLEVAR_CONT_EMPRESA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(ESTADO_EMPRESA,Integer)
            If (TELEFONO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TELEFONO")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(TELEFONO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal CODIGO_EMPRESA As Integer,  _
                    ByVal RUC_EMPRESA As String,  _
                    ByVal RAZON_SOCIAL_EMPRESA As String,  _
                    ByVal NOMBRE_COMERCIAL_EMPRESA As String,  _
                    ByVal RUC_EMPRE As String,  _
                    ByVal DIRECCION_MATRIZ_EMPRESA As String,  _
                    ByVal NRO_RES_CONT_ESPECIAL_EMPRESA As String,  _
                    ByVal OBLIGADO_LLEVAR_CONT_EMPRESA As String,  _
                    ByVal ESTADO_EMPRESA As Integer,  _
                    ByVal TELEFONO As String,  _
                    ByVal Original_ID_EMPRESA As Integer,  _
                    ByVal Original_CODIGO_EMPRESA As Integer,  _
                    ByVal Original_RUC_EMPRESA As String,  _
                    ByVal Original_RUC_EMPRE As String,  _
                    ByVal Original_NRO_RES_CONT_ESPECIAL_EMPRESA As String,  _
                    ByVal Original_OBLIGADO_LLEVAR_CONT_EMPRESA As String,  _
                    ByVal Original_ESTADO_EMPRESA As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_EMPRESA,Integer)
            If (RUC_EMPRESA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(RUC_EMPRESA,String)
            End If
            If (RAZON_SOCIAL_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RAZON_SOCIAL_EMPRESA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RAZON_SOCIAL_EMPRESA,String)
            End If
            If (NOMBRE_COMERCIAL_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_COMERCIAL_EMPRESA")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(NOMBRE_COMERCIAL_EMPRESA,String)
            End If
            If (RUC_EMPRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RUC_EMPRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RUC_EMPRE,String)
            End If
            If (DIRECCION_MATRIZ_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DIRECCION_MATRIZ_EMPRESA")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DIRECCION_MATRIZ_EMPRESA,String)
            End If
            If (NRO_RES_CONT_ESPECIAL_EMPRESA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(NRO_RES_CONT_ESPECIAL_EMPRESA,String)
            End If
            If (OBLIGADO_LLEVAR_CONT_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OBLIGADO_LLEVAR_CONT_EMPRESA")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(OBLIGADO_LLEVAR_CONT_EMPRESA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ESTADO_EMPRESA,Integer)
            If (TELEFONO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TELEFONO")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(TELEFONO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CODIGO_EMPRESA,Integer)
            If (Original_RUC_EMPRESA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_RUC_EMPRESA,String)
            End If
            If (Original_RUC_EMPRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RUC_EMPRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_RUC_EMPRE,String)
            End If
            If (Original_NRO_RES_CONT_ESPECIAL_EMPRESA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_NRO_RES_CONT_ESPECIAL_EMPRESA,String)
            End If
            If (Original_OBLIGADO_LLEVAR_CONT_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OBLIGADO_LLEVAR_CONT_EMPRESA")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_OBLIGADO_LLEVAR_CONT_EMPRESA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ESTADO_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_EMPRESA As Integer,  _
                    ByVal RUC_EMPRESA As String,  _
                    ByVal RAZON_SOCIAL_EMPRESA As String,  _
                    ByVal NOMBRE_COMERCIAL_EMPRESA As String,  _
                    ByVal RUC_EMPRE As String,  _
                    ByVal DIRECCION_MATRIZ_EMPRESA As String,  _
                    ByVal NRO_RES_CONT_ESPECIAL_EMPRESA As String,  _
                    ByVal OBLIGADO_LLEVAR_CONT_EMPRESA As String,  _
                    ByVal ESTADO_EMPRESA As Integer,  _
                    ByVal TELEFONO As String,  _
                    ByVal Original_ID_EMPRESA As Integer,  _
                    ByVal Original_CODIGO_EMPRESA As Integer,  _
                    ByVal Original_RUC_EMPRESA As String,  _
                    ByVal Original_RUC_EMPRE As String,  _
                    ByVal Original_NRO_RES_CONT_ESPECIAL_EMPRESA As String,  _
                    ByVal Original_OBLIGADO_LLEVAR_CONT_EMPRESA As String,  _
                    ByVal Original_ESTADO_EMPRESA As Integer) As Integer
            Return Me.Update(Original_ID_EMPRESA, CODIGO_EMPRESA, RUC_EMPRESA, RAZON_SOCIAL_EMPRESA, NOMBRE_COMERCIAL_EMPRESA, RUC_EMPRE, DIRECCION_MATRIZ_EMPRESA, NRO_RES_CONT_ESPECIAL_EMPRESA, OBLIGADO_LLEVAR_CONT_EMPRESA, ESTADO_EMPRESA, TELEFONO, Original_ID_EMPRESA, Original_CODIGO_EMPRESA, Original_RUC_EMPRESA, Original_RUC_EMPRE, Original_NRO_RES_CONT_ESPECIAL_EMPRESA, Original_OBLIGADO_LLEVAR_CONT_EMPRESA, Original_ESTADO_EMPRESA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BALANCE_COMPROBACIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BALANCE_COMPROBACION"
            tableMapping.ColumnMappings.Add("ID_BALANCE", "ID_BALANCE")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("FECHA_INICIO_CORTE", "FECHA_INICIO_CORTE")
            tableMapping.ColumnMappings.Add("FECHA_FIN_CORTE", "FECHA_FIN_CORTE")
            tableMapping.ColumnMappings.Add("TOTAL_DEBE", "TOTAL_DEBE")
            tableMapping.ColumnMappings.Add("TOTAL_HABER", "TOTAL_HABER")
            tableMapping.ColumnMappings.Add("TOTAL_DEUDOR", "TOTAL_DEUDOR")
            tableMapping.ColumnMappings.Add("TOTAL_ACREEDOR", "TOTAL_ACREEDOR")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            tableMapping.ColumnMappings.Add("ID_CORTE", "ID_CORTE")
            tableMapping.ColumnMappings.Add("ID_EMPRESA", "ID_EMPRESA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[BALANCE_COMPROBACION] WHERE (([ID_BALANCE] = @Original_ID_BALA"& _ 
                "NCE) AND ([FECHA] = @Original_FECHA) AND ([FECHA_INICIO_CORTE] = @Original_FECHA"& _ 
                "_INICIO_CORTE) AND ([FECHA_FIN_CORTE] = @Original_FECHA_FIN_CORTE) AND ([TOTAL_D"& _ 
                "EBE] = @Original_TOTAL_DEBE) AND ([TOTAL_HABER] = @Original_TOTAL_HABER) AND ([T"& _ 
                "OTAL_DEUDOR] = @Original_TOTAL_DEUDOR) AND ([TOTAL_ACREEDOR] = @Original_TOTAL_A"& _ 
                "CREEDOR) AND ([ESTADO] = @Original_ESTADO) AND ([ID_CORTE] = @Original_ID_CORTE)"& _ 
                " AND ([ID_EMPRESA] = @Original_ID_EMPRESA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_BALANCE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BALANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_DEBE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_DEBE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_HABER", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_HABER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_DEUDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_DEUDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_ACREEDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_ACREEDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CORTE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[BALANCE_COMPROBACION] ([ID_BALANCE], [DESCRIPCION], [FECHA], ["& _ 
                "FECHA_INICIO_CORTE], [FECHA_FIN_CORTE], [TOTAL_DEBE], [TOTAL_HABER], [TOTAL_DEUD"& _ 
                "OR], [TOTAL_ACREEDOR], [ESTADO], [ID_CORTE], [ID_EMPRESA]) VALUES (@ID_BALANCE, "& _ 
                "@DESCRIPCION, @FECHA, @FECHA_INICIO_CORTE, @FECHA_FIN_CORTE, @TOTAL_DEBE, @TOTAL"& _ 
                "_HABER, @TOTAL_DEUDOR, @TOTAL_ACREEDOR, @ESTADO, @ID_CORTE, @ID_EMPRESA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T ID_BALANCE, DESCRIPCION, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, TOTAL_DEB"& _ 
                "E, TOTAL_HABER, TOTAL_DEUDOR, TOTAL_ACREEDOR, ESTADO, ID_CORTE, ID_EMPRESA FROM "& _ 
                "BALANCE_COMPROBACION WHERE (ID_BALANCE = @ID_BALANCE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_BALANCE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BALANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_INICIO_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_FIN_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DEBE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_DEBE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_HABER", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_HABER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DEUDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_DEUDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_ACREEDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_ACREEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CORTE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[BALANCE_COMPROBACION] SET [ID_BALANCE] = @ID_BALANCE, [DESCRIPCION]"& _ 
                " = @DESCRIPCION, [FECHA] = @FECHA, [FECHA_INICIO_CORTE] = @FECHA_INICIO_CORTE, ["& _ 
                "FECHA_FIN_CORTE] = @FECHA_FIN_CORTE, [TOTAL_DEBE] = @TOTAL_DEBE, [TOTAL_HABER] ="& _ 
                " @TOTAL_HABER, [TOTAL_DEUDOR] = @TOTAL_DEUDOR, [TOTAL_ACREEDOR] = @TOTAL_ACREEDO"& _ 
                "R, [ESTADO] = @ESTADO, [ID_CORTE] = @ID_CORTE, [ID_EMPRESA] = @ID_EMPRESA WHERE "& _ 
                "(([ID_BALANCE] = @Original_ID_BALANCE) AND ([FECHA] = @Original_FECHA) AND ([FEC"& _ 
                "HA_INICIO_CORTE] = @Original_FECHA_INICIO_CORTE) AND ([FECHA_FIN_CORTE] = @Origi"& _ 
                "nal_FECHA_FIN_CORTE) AND ([TOTAL_DEBE] = @Original_TOTAL_DEBE) AND ([TOTAL_HABER"& _ 
                "] = @Original_TOTAL_HABER) AND ([TOTAL_DEUDOR] = @Original_TOTAL_DEUDOR) AND ([T"& _ 
                "OTAL_ACREEDOR] = @Original_TOTAL_ACREEDOR) AND ([ESTADO] = @Original_ESTADO) AND"& _ 
                " ([ID_CORTE] = @Original_ID_CORTE) AND ([ID_EMPRESA] = @Original_ID_EMPRESA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT ID_BALANCE, DESCRIPCION, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, TOTA"& _ 
                "L_DEBE, TOTAL_HABER, TOTAL_DEUDOR, TOTAL_ACREEDOR, ESTADO, ID_CORTE, ID_EMPRESA "& _ 
                "FROM BALANCE_COMPROBACION WHERE (ID_BALANCE = @ID_BALANCE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_BALANCE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BALANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_INICIO_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_FIN_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DEBE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_DEBE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_HABER", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_HABER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DEUDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_DEUDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_ACREEDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_ACREEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CORTE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_BALANCE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BALANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_DEBE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_DEBE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_HABER", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_HABER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_DEUDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_DEUDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_ACREEDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "TOTAL_ACREEDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CORTE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_BALANCE, DESCRIPCION, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, TOTAL"& _ 
                "_DEBE, TOTAL_HABER, TOTAL_DEUDOR, TOTAL_ACREEDOR, ESTADO, ID_CORTE, ID_EMPRESA F"& _ 
                "ROM dbo.BALANCE_COMPROBACION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsBalanceComprobacion.BALANCE_COMPROBACIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsBalanceComprobacion.BALANCE_COMPROBACIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsBalanceComprobacion.BALANCE_COMPROBACIONDataTable = New dsBalanceComprobacion.BALANCE_COMPROBACIONDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsBalanceComprobacion.BALANCE_COMPROBACIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsBalanceComprobacion) As Integer
            Return Me.Adapter.Update(dataSet, "BALANCE_COMPROBACION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_BALANCE As Long, ByVal Original_FECHA As Date, ByVal Original_FECHA_INICIO_CORTE As Date, ByVal Original_FECHA_FIN_CORTE As Date, ByVal Original_TOTAL_DEBE As Decimal, ByVal Original_TOTAL_HABER As Decimal, ByVal Original_TOTAL_DEUDOR As Decimal, ByVal Original_TOTAL_ACREEDOR As Decimal, ByVal Original_ESTADO As Integer, ByVal Original_ID_CORTE As Long, ByVal Original_ID_EMPRESA As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_BALANCE,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FECHA_INICIO_CORTE,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_FIN_CORTE,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TOTAL_DEBE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TOTAL_HABER,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_TOTAL_DEUDOR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TOTAL_ACREEDOR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ID_CORTE,Long)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_BALANCE As Long, ByVal DESCRIPCION As String, ByVal FECHA As Date, ByVal FECHA_INICIO_CORTE As Date, ByVal FECHA_FIN_CORTE As Date, ByVal TOTAL_DEBE As Decimal, ByVal TOTAL_HABER As Decimal, ByVal TOTAL_DEUDOR As Decimal, ByVal TOTAL_ACREEDOR As Decimal, ByVal ESTADO As Integer, ByVal ID_CORTE As Long, ByVal ID_EMPRESA As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_BALANCE,Long)
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FECHA,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FECHA_INICIO_CORTE,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_FIN_CORTE,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(TOTAL_DEBE,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(TOTAL_HABER,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(TOTAL_DEUDOR,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(TOTAL_ACREEDOR,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(ESTADO,Integer)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ID_CORTE,Long)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_BALANCE As Long,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal FECHA As Date,  _
                    ByVal FECHA_INICIO_CORTE As Date,  _
                    ByVal FECHA_FIN_CORTE As Date,  _
                    ByVal TOTAL_DEBE As Decimal,  _
                    ByVal TOTAL_HABER As Decimal,  _
                    ByVal TOTAL_DEUDOR As Decimal,  _
                    ByVal TOTAL_ACREEDOR As Decimal,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ID_CORTE As Long,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal Original_ID_BALANCE As Long,  _
                    ByVal Original_FECHA As Date,  _
                    ByVal Original_FECHA_INICIO_CORTE As Date,  _
                    ByVal Original_FECHA_FIN_CORTE As Date,  _
                    ByVal Original_TOTAL_DEBE As Decimal,  _
                    ByVal Original_TOTAL_HABER As Decimal,  _
                    ByVal Original_TOTAL_DEUDOR As Decimal,  _
                    ByVal Original_TOTAL_ACREEDOR As Decimal,  _
                    ByVal Original_ESTADO As Integer,  _
                    ByVal Original_ID_CORTE As Long,  _
                    ByVal Original_ID_EMPRESA As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_BALANCE,Long)
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FECHA_INICIO_CORTE,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_FIN_CORTE,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TOTAL_DEBE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TOTAL_HABER,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TOTAL_DEUDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TOTAL_ACREEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ID_CORTE,Long)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ID_BALANCE,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FECHA_INICIO_CORTE,Date)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_FECHA_FIN_CORTE,Date)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_TOTAL_DEBE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_TOTAL_HABER,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_TOTAL_DEUDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_TOTAL_ACREEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ID_CORTE,Long)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DESCRIPCION As String,  _
                    ByVal FECHA As Date,  _
                    ByVal FECHA_INICIO_CORTE As Date,  _
                    ByVal FECHA_FIN_CORTE As Date,  _
                    ByVal TOTAL_DEBE As Decimal,  _
                    ByVal TOTAL_HABER As Decimal,  _
                    ByVal TOTAL_DEUDOR As Decimal,  _
                    ByVal TOTAL_ACREEDOR As Decimal,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ID_CORTE As Long,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal Original_ID_BALANCE As Long,  _
                    ByVal Original_FECHA As Date,  _
                    ByVal Original_FECHA_INICIO_CORTE As Date,  _
                    ByVal Original_FECHA_FIN_CORTE As Date,  _
                    ByVal Original_TOTAL_DEBE As Decimal,  _
                    ByVal Original_TOTAL_HABER As Decimal,  _
                    ByVal Original_TOTAL_DEUDOR As Decimal,  _
                    ByVal Original_TOTAL_ACREEDOR As Decimal,  _
                    ByVal Original_ESTADO As Integer,  _
                    ByVal Original_ID_CORTE As Long,  _
                    ByVal Original_ID_EMPRESA As Integer) As Integer
            Return Me.Update(Original_ID_BALANCE, DESCRIPCION, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, TOTAL_DEBE, TOTAL_HABER, TOTAL_DEUDOR, TOTAL_ACREEDOR, ESTADO, ID_CORTE, ID_EMPRESA, Original_ID_BALANCE, Original_FECHA, Original_FECHA_INICIO_CORTE, Original_FECHA_FIN_CORTE, Original_TOTAL_DEBE, Original_TOTAL_HABER, Original_TOTAL_DEUDOR, Original_TOTAL_ACREEDOR, Original_ESTADO, Original_ID_CORTE, Original_ID_EMPRESA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DETALLE_BALANCE_COMPROBACIÓNTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DETALLE_BALANCE_COMPROBACIÓN"
            tableMapping.ColumnMappings.Add("ID_DETALLE", "ID_DETALLE")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("REFERENCIA", "REFERENCIA")
            tableMapping.ColumnMappings.Add("DEBE", "DEBE")
            tableMapping.ColumnMappings.Add("HABER", "HABER")
            tableMapping.ColumnMappings.Add("DEUDOR", "DEUDOR")
            tableMapping.ColumnMappings.Add("ACREEDOR", "ACREEDOR")
            tableMapping.ColumnMappings.Add("DEUDOR_ACREEDOR", "DEUDOR_ACREEDOR")
            tableMapping.ColumnMappings.Add("ID_BALANCE", "ID_BALANCE")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DETALLE_BALANCE_COMPROBACIÓN] WHERE (([ID_DETALLE] = @Original"& _ 
                "_ID_DETALLE) AND ([FECHA] = @Original_FECHA) AND ([REFERENCIA] = @Original_REFER"& _ 
                "ENCIA) AND ([DEBE] = @Original_DEBE) AND ([HABER] = @Original_HABER) AND ([DEUDO"& _ 
                "R] = @Original_DEUDOR) AND ([ACREEDOR] = @Original_ACREEDOR) AND ([DEUDOR_ACREED"& _ 
                "OR] = @Original_DEUDOR_ACREEDOR) AND ([ID_BALANCE] = @Original_ID_BALANCE) AND ("& _ 
                "[ESTADO] = @Original_ESTADO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_DETALLE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_DETALLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERENCIA", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERENCIA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEBE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "DEBE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HABER", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "HABER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEUDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "DEUDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACREEDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "ACREEDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEUDOR_ACREEDOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEUDOR_ACREEDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_BALANCE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BALANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DETALLE_BALANCE_COMPROBACIÓN] ([ID_DETALLE], [FECHA], [CODIGO]"& _ 
                ", [DESCRIPCION], [REFERENCIA], [DEBE], [HABER], [DEUDOR], [ACREEDOR], [DEUDOR_AC"& _ 
                "REEDOR], [ID_BALANCE], [ESTADO]) VALUES (@ID_DETALLE, @FECHA, @CODIGO, @DESCRIPC"& _ 
                "ION, @REFERENCIA, @DEBE, @HABER, @DEUDOR, @ACREEDOR, @DEUDOR_ACREEDOR, @ID_BALAN"& _ 
                "CE, @ESTADO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_DETALLE, FECHA, CODIGO, DESCRIPCION, REFERENCIA, DEBE, "& _ 
                "HABER, DEUDOR, ACREEDOR, DEUDOR_ACREEDOR, ID_BALANCE, ESTADO FROM DETALLE_BALANC"& _ 
                "E_COMPROBACIÓN WHERE (ID_DETALLE = @ID_DETALLE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_DETALLE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_DETALLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERENCIA", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEBE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "DEBE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HABER", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "HABER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEUDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "DEUDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACREEDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "ACREEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEUDOR_ACREEDOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEUDOR_ACREEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_BALANCE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BALANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DETALLE_BALANCE_COMPROBACIÓN] SET [ID_DETALLE] = @ID_DETALLE, [FECH"& _ 
                "A] = @FECHA, [CODIGO] = @CODIGO, [DESCRIPCION] = @DESCRIPCION, [REFERENCIA] = @R"& _ 
                "EFERENCIA, [DEBE] = @DEBE, [HABER] = @HABER, [DEUDOR] = @DEUDOR, [ACREEDOR] = @A"& _ 
                "CREEDOR, [DEUDOR_ACREEDOR] = @DEUDOR_ACREEDOR, [ID_BALANCE] = @ID_BALANCE, [ESTA"& _ 
                "DO] = @ESTADO WHERE (([ID_DETALLE] = @Original_ID_DETALLE) AND ([FECHA] = @Origi"& _ 
                "nal_FECHA) AND ([REFERENCIA] = @Original_REFERENCIA) AND ([DEBE] = @Original_DEB"& _ 
                "E) AND ([HABER] = @Original_HABER) AND ([DEUDOR] = @Original_DEUDOR) AND ([ACREE"& _ 
                "DOR] = @Original_ACREEDOR) AND ([DEUDOR_ACREEDOR] = @Original_DEUDOR_ACREEDOR) A"& _ 
                "ND ([ID_BALANCE] = @Original_ID_BALANCE) AND ([ESTADO] = @Original_ESTADO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT ID_DETALLE, FECHA, CODIGO, DESCRIPCION, REFERENCIA, DEBE, HABER, DEUDOR, AC"& _ 
                "REEDOR, DEUDOR_ACREEDOR, ID_BALANCE, ESTADO FROM DETALLE_BALANCE_COMPROBACIÓN WH"& _ 
                "ERE (ID_DETALLE = @ID_DETALLE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_DETALLE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_DETALLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERENCIA", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEBE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "DEBE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HABER", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "HABER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEUDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "DEUDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACREEDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "ACREEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEUDOR_ACREEDOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEUDOR_ACREEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_BALANCE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BALANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_DETALLE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_DETALLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERENCIA", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERENCIA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEBE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "DEBE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HABER", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "HABER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEUDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "DEUDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACREEDOR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 4, "ACREEDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEUDOR_ACREEDOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEUDOR_ACREEDOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_BALANCE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BALANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_DETALLE, FECHA, CODIGO, DESCRIPCION, REFERENCIA, DEBE, HABER, DEUDOR, A"& _ 
                "CREEDOR, DEUDOR_ACREEDOR, ID_BALANCE, ESTADO FROM dbo.DETALLE_BALANCE_COMPROBACI"& _ 
                "ÓN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsBalanceComprobacion.DETALLE_BALANCE_COMPROBACIÓNDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsBalanceComprobacion.DETALLE_BALANCE_COMPROBACIÓNDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsBalanceComprobacion.DETALLE_BALANCE_COMPROBACIÓNDataTable = New dsBalanceComprobacion.DETALLE_BALANCE_COMPROBACIÓNDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsBalanceComprobacion.DETALLE_BALANCE_COMPROBACIÓNDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsBalanceComprobacion) As Integer
            Return Me.Adapter.Update(dataSet, "DETALLE_BALANCE_COMPROBACIÓN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_DETALLE As Long, ByVal Original_FECHA As Date, ByVal Original_REFERENCIA As Long, ByVal Original_DEBE As Decimal, ByVal Original_HABER As Decimal, ByVal Original_DEUDOR As Decimal, ByVal Original_ACREEDOR As Decimal, ByVal Original_DEUDOR_ACREEDOR As Integer, ByVal Original_ID_BALANCE As Long, ByVal Original_ESTADO As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_DETALLE,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REFERENCIA,Long)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DEBE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_HABER,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DEUDOR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ACREEDOR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_DEUDOR_ACREEDOR,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ID_BALANCE,Long)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_DETALLE As Long, ByVal FECHA As Date, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal REFERENCIA As Long, ByVal DEBE As Decimal, ByVal HABER As Decimal, ByVal DEUDOR As Decimal, ByVal ACREEDOR As Decimal, ByVal DEUDOR_ACREEDOR As Integer, ByVal ID_BALANCE As Long, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_DETALLE,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA,Date)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CODIGO,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(REFERENCIA,Long)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(DEBE,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(HABER,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(DEUDOR,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(ACREEDOR,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(DEUDOR_ACREEDOR,Integer)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ID_BALANCE,Long)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_DETALLE As Long,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO As String,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal REFERENCIA As Long,  _
                    ByVal DEBE As Decimal,  _
                    ByVal HABER As Decimal,  _
                    ByVal DEUDOR As Decimal,  _
                    ByVal ACREEDOR As Decimal,  _
                    ByVal DEUDOR_ACREEDOR As Integer,  _
                    ByVal ID_BALANCE As Long,  _
                    ByVal ESTADO As Integer,  _
                    ByVal Original_ID_DETALLE As Long,  _
                    ByVal Original_FECHA As Date,  _
                    ByVal Original_REFERENCIA As Long,  _
                    ByVal Original_DEBE As Decimal,  _
                    ByVal Original_HABER As Decimal,  _
                    ByVal Original_DEUDOR As Decimal,  _
                    ByVal Original_ACREEDOR As Decimal,  _
                    ByVal Original_DEUDOR_ACREEDOR As Integer,  _
                    ByVal Original_ID_BALANCE As Long,  _
                    ByVal Original_ESTADO As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_DETALLE,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA,Date)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CODIGO,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(REFERENCIA,Long)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DEBE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(HABER,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DEUDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ACREEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DEUDOR_ACREEDOR,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ID_BALANCE,Long)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ID_DETALLE,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_REFERENCIA,Long)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_DEBE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_HABER,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_DEUDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ACREEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_DEUDOR_ACREEDOR,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ID_BALANCE,Long)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO As String,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal REFERENCIA As Long,  _
                    ByVal DEBE As Decimal,  _
                    ByVal HABER As Decimal,  _
                    ByVal DEUDOR As Decimal,  _
                    ByVal ACREEDOR As Decimal,  _
                    ByVal DEUDOR_ACREEDOR As Integer,  _
                    ByVal ID_BALANCE As Long,  _
                    ByVal ESTADO As Integer,  _
                    ByVal Original_ID_DETALLE As Long,  _
                    ByVal Original_FECHA As Date,  _
                    ByVal Original_REFERENCIA As Long,  _
                    ByVal Original_DEBE As Decimal,  _
                    ByVal Original_HABER As Decimal,  _
                    ByVal Original_DEUDOR As Decimal,  _
                    ByVal Original_ACREEDOR As Decimal,  _
                    ByVal Original_DEUDOR_ACREEDOR As Integer,  _
                    ByVal Original_ID_BALANCE As Long,  _
                    ByVal Original_ESTADO As Integer) As Integer
            Return Me.Update(Original_ID_DETALLE, FECHA, CODIGO, DESCRIPCION, REFERENCIA, DEBE, HABER, DEUDOR, ACREEDOR, DEUDOR_ACREEDOR, ID_BALANCE, ESTADO, Original_ID_DETALLE, Original_FECHA, Original_REFERENCIA, Original_DEBE, Original_HABER, Original_DEUDOR, Original_ACREEDOR, Original_DEUDOR_ACREEDOR, Original_ID_BALANCE, Original_ESTADO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CORTES_CONTABLESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CORTES_CONTABLES"
            tableMapping.ColumnMappings.Add("ID_CORTE", "ID_CORTE")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("FECHA_INICIO_CORTE", "FECHA_INICIO_CORTE")
            tableMapping.ColumnMappings.Add("FECHA_FIN_CORTE", "FECHA_FIN_CORTE")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            tableMapping.ColumnMappings.Add("ID_EMPRESA", "ID_EMPRESA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CORTES_CONTABLES] WHERE (([ID_CORTE] = @Original_ID_CORTE) AND"& _ 
                " ([FECHA] = @Original_FECHA) AND ([FECHA_INICIO_CORTE] = @Original_FECHA_INICIO_"& _ 
                "CORTE) AND ([FECHA_FIN_CORTE] = @Original_FECHA_FIN_CORTE) AND ([ESTADO] = @Orig"& _ 
                "inal_ESTADO) AND ([ID_EMPRESA] = @Original_ID_EMPRESA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CORTE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CORTES_CONTABLES] ([ID_CORTE], [FECHA], [FECHA_INICIO_CORTE], "& _ 
                "[FECHA_FIN_CORTE], [ESTADO], [ID_EMPRESA]) VALUES (@ID_CORTE, @FECHA, @FECHA_INI"& _ 
                "CIO_CORTE, @FECHA_FIN_CORTE, @ESTADO, @ID_EMPRESA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CORTE, FECHA, FEC"& _ 
                "HA_INICIO_CORTE, FECHA_FIN_CORTE, ESTADO, ID_EMPRESA FROM CORTES_CONTABLES WHERE"& _ 
                " (ID_CORTE = @ID_CORTE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CORTE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_INICIO_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_FIN_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CORTES_CONTABLES] SET [ID_CORTE] = @ID_CORTE, [FECHA] = @FECHA, [FE"& _ 
                "CHA_INICIO_CORTE] = @FECHA_INICIO_CORTE, [FECHA_FIN_CORTE] = @FECHA_FIN_CORTE, ["& _ 
                "ESTADO] = @ESTADO, [ID_EMPRESA] = @ID_EMPRESA WHERE (([ID_CORTE] = @Original_ID_"& _ 
                "CORTE) AND ([FECHA] = @Original_FECHA) AND ([FECHA_INICIO_CORTE] = @Original_FEC"& _ 
                "HA_INICIO_CORTE) AND ([FECHA_FIN_CORTE] = @Original_FECHA_FIN_CORTE) AND ([ESTAD"& _ 
                "O] = @Original_ESTADO) AND ([ID_EMPRESA] = @Original_ID_EMPRESA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CO"& _ 
                "RTE, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, ESTADO, ID_EMPRESA FROM CORTES_"& _ 
                "CONTABLES WHERE (ID_CORTE = @ID_CORTE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CORTE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_INICIO_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_FIN_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN_CORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CORTE", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN_CORTE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN_CORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_CORTE, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, ESTADO, ID_EMPRESA F"& _ 
                "ROM dbo.CORTES_CONTABLES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsBalanceComprobacion.CORTES_CONTABLESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsBalanceComprobacion.CORTES_CONTABLESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsBalanceComprobacion.CORTES_CONTABLESDataTable = New dsBalanceComprobacion.CORTES_CONTABLESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsBalanceComprobacion.CORTES_CONTABLESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsBalanceComprobacion) As Integer
            Return Me.Adapter.Update(dataSet, "CORTES_CONTABLES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_CORTE As Long, ByVal Original_FECHA As Date, ByVal Original_FECHA_INICIO_CORTE As Date, ByVal Original_FECHA_FIN_CORTE As Date, ByVal Original_ESTADO As Integer, ByVal Original_ID_EMPRESA As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_CORTE,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FECHA_INICIO_CORTE,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_FIN_CORTE,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_CORTE As Long, ByVal FECHA As Date, ByVal FECHA_INICIO_CORTE As Date, ByVal FECHA_FIN_CORTE As Date, ByVal ESTADO As Integer, ByVal ID_EMPRESA As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_CORTE,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FECHA_INICIO_CORTE,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FECHA_FIN_CORTE,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ESTADO,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_CORTE As Long, ByVal FECHA As Date, ByVal FECHA_INICIO_CORTE As Date, ByVal FECHA_FIN_CORTE As Date, ByVal ESTADO As Integer, ByVal ID_EMPRESA As Integer, ByVal Original_ID_CORTE As Long, ByVal Original_FECHA As Date, ByVal Original_FECHA_INICIO_CORTE As Date, ByVal Original_FECHA_FIN_CORTE As Date, ByVal Original_ESTADO As Integer, ByVal Original_ID_EMPRESA As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_CORTE,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FECHA_INICIO_CORTE,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FECHA_FIN_CORTE,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID_CORTE,Long)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FECHA_INICIO_CORTE,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FECHA_FIN_CORTE,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FECHA As Date, ByVal FECHA_INICIO_CORTE As Date, ByVal FECHA_FIN_CORTE As Date, ByVal ESTADO As Integer, ByVal ID_EMPRESA As Integer, ByVal Original_ID_CORTE As Long, ByVal Original_FECHA As Date, ByVal Original_FECHA_INICIO_CORTE As Date, ByVal Original_FECHA_FIN_CORTE As Date, ByVal Original_ESTADO As Integer, ByVal Original_ID_EMPRESA As Integer) As Integer
            Return Me.Update(Original_ID_CORTE, FECHA, FECHA_INICIO_CORTE, FECHA_FIN_CORTE, ESTADO, ID_EMPRESA, Original_ID_CORTE, Original_FECHA, Original_FECHA_INICIO_CORTE, Original_FECHA_FIN_CORTE, Original_ESTADO, Original_ID_EMPRESA)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _eMPRESA_GENERALTableAdapter As EMPRESA_GENERALTableAdapter
        
        Private _bALANCE_COMPROBACIONTableAdapter As BALANCE_COMPROBACIONTableAdapter
        
        Private _dETALLE_BALANCE_COMPROBACIÓNTableAdapter As DETALLE_BALANCE_COMPROBACIÓNTableAdapter
        
        Private _cORTES_CONTABLESTableAdapter As CORTES_CONTABLESTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EMPRESA_GENERALTableAdapter() As EMPRESA_GENERALTableAdapter
            Get
                Return Me._eMPRESA_GENERALTableAdapter
            End Get
            Set
                Me._eMPRESA_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BALANCE_COMPROBACIONTableAdapter() As BALANCE_COMPROBACIONTableAdapter
            Get
                Return Me._bALANCE_COMPROBACIONTableAdapter
            End Get
            Set
                Me._bALANCE_COMPROBACIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DETALLE_BALANCE_COMPROBACIÓNTableAdapter() As DETALLE_BALANCE_COMPROBACIÓNTableAdapter
            Get
                Return Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter
            End Get
            Set
                Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CORTES_CONTABLESTableAdapter() As CORTES_CONTABLESTableAdapter
            Get
                Return Me._cORTES_CONTABLESTableAdapter
            End Get
            Set
                Me._cORTES_CONTABLESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eMPRESA_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eMPRESA_GENERALTableAdapter.Connection
                End If
                If ((Not (Me._bALANCE_COMPROBACIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._bALANCE_COMPROBACIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._bALANCE_COMPROBACIONTableAdapter.Connection
                End If
                If ((Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Connection
                End If
                If ((Not (Me._cORTES_CONTABLESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cORTES_CONTABLESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cORTES_CONTABLESTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._bALANCE_COMPROBACIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cORTES_CONTABLESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsBalanceComprobacion, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EMPRESA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eMPRESA_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cORTES_CONTABLESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CORTES_CONTABLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cORTES_CONTABLESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._bALANCE_COMPROBACIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BALANCE_COMPROBACION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._bALANCE_COMPROBACIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DETALLE_BALANCE_COMPROBACIÓN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsBalanceComprobacion, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EMPRESA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eMPRESA_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cORTES_CONTABLESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CORTES_CONTABLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cORTES_CONTABLESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._bALANCE_COMPROBACIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BALANCE_COMPROBACION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._bALANCE_COMPROBACIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DETALLE_BALANCE_COMPROBACIÓN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsBalanceComprobacion, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DETALLE_BALANCE_COMPROBACIÓN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._bALANCE_COMPROBACIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BALANCE_COMPROBACION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._bALANCE_COMPROBACIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cORTES_CONTABLESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CORTES_CONTABLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cORTES_CONTABLESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EMPRESA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eMPRESA_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsBalanceComprobacion) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eMPRESA_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._bALANCE_COMPROBACIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._bALANCE_COMPROBACIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cORTES_CONTABLESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cORTES_CONTABLESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eMPRESA_GENERALTableAdapter, Me._eMPRESA_GENERALTableAdapter.Connection)
                    Me._eMPRESA_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eMPRESA_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eMPRESA_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eMPRESA_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eMPRESA_GENERALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._bALANCE_COMPROBACIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._bALANCE_COMPROBACIONTableAdapter, Me._bALANCE_COMPROBACIONTableAdapter.Connection)
                    Me._bALANCE_COMPROBACIONTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._bALANCE_COMPROBACIONTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._bALANCE_COMPROBACIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._bALANCE_COMPROBACIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._bALANCE_COMPROBACIONTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter, Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Connection)
                    Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cORTES_CONTABLESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cORTES_CONTABLESTableAdapter, Me._cORTES_CONTABLESTableAdapter.Connection)
                    Me._cORTES_CONTABLESTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cORTES_CONTABLESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cORTES_CONTABLESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cORTES_CONTABLESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cORTES_CONTABLESTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                    Me._eMPRESA_GENERALTableAdapter.Connection = CType(revertConnections(Me._eMPRESA_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eMPRESA_GENERALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._bALANCE_COMPROBACIONTableAdapter) Is Nothing) Then
                    Me._bALANCE_COMPROBACIONTableAdapter.Connection = CType(revertConnections(Me._bALANCE_COMPROBACIONTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._bALANCE_COMPROBACIONTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter) Is Nothing) Then
                    Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Connection = CType(revertConnections(Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dETALLE_BALANCE_COMPROBACIÓNTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cORTES_CONTABLESTableAdapter) Is Nothing) Then
                    Me._cORTES_CONTABLESTableAdapter.Connection = CType(revertConnections(Me._cORTES_CONTABLESTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cORTES_CONTABLESTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
