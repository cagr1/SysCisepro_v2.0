'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetComprobanteEgresoBancoMachala"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetComprobanteEgresoBancoMachala
    Inherits Global.System.Data.DataSet
    
    Private tableCOMPROBANTE_EGRESO_BANCOS As COMPROBANTE_EGRESO_BANCOSDataTable
    
    Private tableCHEQUES_EMITIDOS As CHEQUES_EMITIDOSDataTable
    
    Private tableCUENTAS_BANCOS As CUENTAS_BANCOSDataTable
    
    Private tableASIENTOS_LIBRO_DIARIO As ASIENTOS_LIBRO_DIARIODataTable
    
    Private relationCOMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS As Global.System.Data.DataRelation
    
    Private relationCUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("COMPROBANTE_EGRESO_BANCOS")) Is Nothing) Then
                MyBase.Tables.Add(New COMPROBANTE_EGRESO_BANCOSDataTable(ds.Tables("COMPROBANTE_EGRESO_BANCOS")))
            End If
            If (Not (ds.Tables("CHEQUES_EMITIDOS")) Is Nothing) Then
                MyBase.Tables.Add(New CHEQUES_EMITIDOSDataTable(ds.Tables("CHEQUES_EMITIDOS")))
            End If
            If (Not (ds.Tables("CUENTAS_BANCOS")) Is Nothing) Then
                MyBase.Tables.Add(New CUENTAS_BANCOSDataTable(ds.Tables("CUENTAS_BANCOS")))
            End If
            If (Not (ds.Tables("ASIENTOS_LIBRO_DIARIO")) Is Nothing) Then
                MyBase.Tables.Add(New ASIENTOS_LIBRO_DIARIODataTable(ds.Tables("ASIENTOS_LIBRO_DIARIO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COMPROBANTE_EGRESO_BANCOS() As COMPROBANTE_EGRESO_BANCOSDataTable
        Get
            Return Me.tableCOMPROBANTE_EGRESO_BANCOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CHEQUES_EMITIDOS() As CHEQUES_EMITIDOSDataTable
        Get
            Return Me.tableCHEQUES_EMITIDOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CUENTAS_BANCOS() As CUENTAS_BANCOSDataTable
        Get
            Return Me.tableCUENTAS_BANCOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ASIENTOS_LIBRO_DIARIO() As ASIENTOS_LIBRO_DIARIODataTable
        Get
            Return Me.tableASIENTOS_LIBRO_DIARIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetComprobanteEgresoBancoMachala = CType(MyBase.Clone,DataSetComprobanteEgresoBancoMachala)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("COMPROBANTE_EGRESO_BANCOS")) Is Nothing) Then
                MyBase.Tables.Add(New COMPROBANTE_EGRESO_BANCOSDataTable(ds.Tables("COMPROBANTE_EGRESO_BANCOS")))
            End If
            If (Not (ds.Tables("CHEQUES_EMITIDOS")) Is Nothing) Then
                MyBase.Tables.Add(New CHEQUES_EMITIDOSDataTable(ds.Tables("CHEQUES_EMITIDOS")))
            End If
            If (Not (ds.Tables("CUENTAS_BANCOS")) Is Nothing) Then
                MyBase.Tables.Add(New CUENTAS_BANCOSDataTable(ds.Tables("CUENTAS_BANCOS")))
            End If
            If (Not (ds.Tables("ASIENTOS_LIBRO_DIARIO")) Is Nothing) Then
                MyBase.Tables.Add(New ASIENTOS_LIBRO_DIARIODataTable(ds.Tables("ASIENTOS_LIBRO_DIARIO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCOMPROBANTE_EGRESO_BANCOS = CType(MyBase.Tables("COMPROBANTE_EGRESO_BANCOS"),COMPROBANTE_EGRESO_BANCOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOMPROBANTE_EGRESO_BANCOS) Is Nothing) Then
                Me.tableCOMPROBANTE_EGRESO_BANCOS.InitVars
            End If
        End If
        Me.tableCHEQUES_EMITIDOS = CType(MyBase.Tables("CHEQUES_EMITIDOS"),CHEQUES_EMITIDOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCHEQUES_EMITIDOS) Is Nothing) Then
                Me.tableCHEQUES_EMITIDOS.InitVars
            End If
        End If
        Me.tableCUENTAS_BANCOS = CType(MyBase.Tables("CUENTAS_BANCOS"),CUENTAS_BANCOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCUENTAS_BANCOS) Is Nothing) Then
                Me.tableCUENTAS_BANCOS.InitVars
            End If
        End If
        Me.tableASIENTOS_LIBRO_DIARIO = CType(MyBase.Tables("ASIENTOS_LIBRO_DIARIO"),ASIENTOS_LIBRO_DIARIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableASIENTOS_LIBRO_DIARIO) Is Nothing) Then
                Me.tableASIENTOS_LIBRO_DIARIO.InitVars
            End If
        End If
        Me.relationCOMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS = Me.Relations("COMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS")
        Me.relationCUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS = Me.Relations("CUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetComprobanteEgresoBancoMachala"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetComprobanteEgresoBancoMachala.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCOMPROBANTE_EGRESO_BANCOS = New COMPROBANTE_EGRESO_BANCOSDataTable()
        MyBase.Tables.Add(Me.tableCOMPROBANTE_EGRESO_BANCOS)
        Me.tableCHEQUES_EMITIDOS = New CHEQUES_EMITIDOSDataTable()
        MyBase.Tables.Add(Me.tableCHEQUES_EMITIDOS)
        Me.tableCUENTAS_BANCOS = New CUENTAS_BANCOSDataTable()
        MyBase.Tables.Add(Me.tableCUENTAS_BANCOS)
        Me.tableASIENTOS_LIBRO_DIARIO = New ASIENTOS_LIBRO_DIARIODataTable()
        MyBase.Tables.Add(Me.tableASIENTOS_LIBRO_DIARIO)
        Me.relationCOMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS = New Global.System.Data.DataRelation("COMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS", New Global.System.Data.DataColumn() {Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_COMPROBANTE_EGRESO_BANCOSColumn}, New Global.System.Data.DataColumn() {Me.tableCHEQUES_EMITIDOS.ID_COMPROBANTE_EGRESO_BANCOSColumn}, false)
        Me.Relations.Add(Me.relationCOMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS)
        Me.relationCUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS = New Global.System.Data.DataRelation("CUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS", New Global.System.Data.DataColumn() {Me.tableCUENTAS_BANCOS.ID_CUENTA_BANCOSColumn}, New Global.System.Data.DataColumn() {Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_CUENTA_BANCOSColumn}, false)
        Me.Relations.Add(Me.relationCUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCOMPROBANTE_EGRESO_BANCOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCHEQUES_EMITIDOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCUENTAS_BANCOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeASIENTOS_LIBRO_DIARIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetComprobanteEgresoBancoMachala = New DataSetComprobanteEgresoBancoMachala()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub COMPROBANTE_EGRESO_BANCOSRowChangeEventHandler(ByVal sender As Object, ByVal e As COMPROBANTE_EGRESO_BANCOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CHEQUES_EMITIDOSRowChangeEventHandler(ByVal sender As Object, ByVal e As CHEQUES_EMITIDOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CUENTAS_BANCOSRowChangeEventHandler(ByVal sender As Object, ByVal e As CUENTAS_BANCOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub ASIENTOS_LIBRO_DIARIORowChangeEventHandler(ByVal sender As Object, ByVal e As ASIENTOS_LIBRO_DIARIORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COMPROBANTE_EGRESO_BANCOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of COMPROBANTE_EGRESO_BANCOSRow)
        
        Private columnID_COMPROBANTE_EGRESO_BANCOS As Global.System.Data.DataColumn
        
        Private columnNUMERO_COMPROBANTE_EGRESOBANCOS As Global.System.Data.DataColumn
        
        Private columnFECHA_COMPROBANTE_EGRESO_BANCOS As Global.System.Data.DataColumn
        
        Private columnNUMERO_FACTURA_RECEPTOR As Global.System.Data.DataColumn
        
        Private columnRUC_CI_RECEPTOR As Global.System.Data.DataColumn
        
        Private columnNOMBRE_RECEPTOR As Global.System.Data.DataColumn
        
        Private columnACTIVIDAD As Global.System.Data.DataColumn
        
        Private columnCONCEPTO As Global.System.Data.DataColumn
        
        Private columnTIPO_PAGO_COMPROBANTE_EGRESO_BANCOS As Global.System.Data.DataColumn
        
        Private columnRAZON_COMPROBANTE_EGRESO_BANCOS As Global.System.Data.DataColumn
        
        Private columnVALOR_COMPROBANTE_EGRESO_BANCOS As Global.System.Data.DataColumn
        
        Private columnNUMERO_CHEQUE As Global.System.Data.DataColumn
        
        Private columnESTADO_COMPROBANTE_EGRESO_BANCO As Global.System.Data.DataColumn
        
        Private columnID_PROVINCIAS As Global.System.Data.DataColumn
        
        Private columnID_CIUDAD As Global.System.Data.DataColumn
        
        Private columnID_PARROQUIAS As Global.System.Data.DataColumn
        
        Private columnID_CENTRO_COSTO As Global.System.Data.DataColumn
        
        Private columnID_BANCO As Global.System.Data.DataColumn
        
        Private columnID_CUENTA_BANCOS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COMPROBANTE_EGRESO_BANCOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_COMPROBANTE_EGRESO_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_COMPROBANTE_EGRESO_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUMERO_COMPROBANTE_EGRESOBANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_COMPROBANTE_EGRESOBANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_COMPROBANTE_EGRESO_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMPROBANTE_EGRESO_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUMERO_FACTURA_RECEPTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_FACTURA_RECEPTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RUC_CI_RECEPTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUC_CI_RECEPTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_RECEPTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_RECEPTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ACTIVIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTIVIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONCEPTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONCEPTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_PAGO_COMPROBANTE_EGRESO_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_PAGO_COMPROBANTE_EGRESO_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RAZON_COMPROBANTE_EGRESO_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZON_COMPROBANTE_EGRESO_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_COMPROBANTE_EGRESO_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_COMPROBANTE_EGRESO_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUMERO_CHEQUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_CHEQUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_COMPROBANTE_EGRESO_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_COMPROBANTE_EGRESO_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_PROVINCIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PROVINCIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_PARROQUIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PARROQUIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CENTRO_COSTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CENTRO_COSTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CUENTA_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CUENTA_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COMPROBANTE_EGRESO_BANCOSRow
            Get
                Return CType(Me.Rows(index),COMPROBANTE_EGRESO_BANCOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event COMPROBANTE_EGRESO_BANCOSRowChanging As COMPROBANTE_EGRESO_BANCOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event COMPROBANTE_EGRESO_BANCOSRowChanged As COMPROBANTE_EGRESO_BANCOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event COMPROBANTE_EGRESO_BANCOSRowDeleting As COMPROBANTE_EGRESO_BANCOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event COMPROBANTE_EGRESO_BANCOSRowDeleted As COMPROBANTE_EGRESO_BANCOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCOMPROBANTE_EGRESO_BANCOSRow(ByVal row As COMPROBANTE_EGRESO_BANCOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCOMPROBANTE_EGRESO_BANCOSRow( _
                    ByVal ID_COMPROBANTE_EGRESO_BANCOS As Long,  _
                    ByVal NUMERO_COMPROBANTE_EGRESOBANCOS As Long,  _
                    ByVal FECHA_COMPROBANTE_EGRESO_BANCOS As Date,  _
                    ByVal NUMERO_FACTURA_RECEPTOR As String,  _
                    ByVal RUC_CI_RECEPTOR As String,  _
                    ByVal NOMBRE_RECEPTOR As String,  _
                    ByVal ACTIVIDAD As String,  _
                    ByVal CONCEPTO As String,  _
                    ByVal TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS As String,  _
                    ByVal RAZON_COMPROBANTE_EGRESO_BANCOS As String,  _
                    ByVal VALOR_COMPROBANTE_EGRESO_BANCOS As Decimal,  _
                    ByVal NUMERO_CHEQUE As String,  _
                    ByVal ESTADO_COMPROBANTE_EGRESO_BANCO As Integer,  _
                    ByVal ID_PROVINCIAS As Integer,  _
                    ByVal ID_CIUDAD As Integer,  _
                    ByVal ID_PARROQUIAS As Integer,  _
                    ByVal ID_CENTRO_COSTO As Integer,  _
                    ByVal ID_BANCO As Integer,  _
                    ByVal parentCUENTAS_BANCOSRowByCUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS As CUENTAS_BANCOSRow) As COMPROBANTE_EGRESO_BANCOSRow
            Dim rowCOMPROBANTE_EGRESO_BANCOSRow As COMPROBANTE_EGRESO_BANCOSRow = CType(Me.NewRow,COMPROBANTE_EGRESO_BANCOSRow)
            Dim columnValuesArray() As Object = New Object() {ID_COMPROBANTE_EGRESO_BANCOS, NUMERO_COMPROBANTE_EGRESOBANCOS, FECHA_COMPROBANTE_EGRESO_BANCOS, NUMERO_FACTURA_RECEPTOR, RUC_CI_RECEPTOR, NOMBRE_RECEPTOR, ACTIVIDAD, CONCEPTO, TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS, RAZON_COMPROBANTE_EGRESO_BANCOS, VALOR_COMPROBANTE_EGRESO_BANCOS, NUMERO_CHEQUE, ESTADO_COMPROBANTE_EGRESO_BANCO, ID_PROVINCIAS, ID_CIUDAD, ID_PARROQUIAS, ID_CENTRO_COSTO, ID_BANCO, Nothing}
            If (Not (parentCUENTAS_BANCOSRowByCUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS) Is Nothing) Then
                columnValuesArray(18) = parentCUENTAS_BANCOSRowByCUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS(0)
            End If
            rowCOMPROBANTE_EGRESO_BANCOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOMPROBANTE_EGRESO_BANCOSRow)
            Return rowCOMPROBANTE_EGRESO_BANCOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_COMPROBANTE_EGRESO_BANCOS(ByVal ID_COMPROBANTE_EGRESO_BANCOS As Long) As COMPROBANTE_EGRESO_BANCOSRow
            Return CType(Me.Rows.Find(New Object() {ID_COMPROBANTE_EGRESO_BANCOS}),COMPROBANTE_EGRESO_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COMPROBANTE_EGRESO_BANCOSDataTable = CType(MyBase.Clone,COMPROBANTE_EGRESO_BANCOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COMPROBANTE_EGRESO_BANCOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_COMPROBANTE_EGRESO_BANCOS = MyBase.Columns("ID_COMPROBANTE_EGRESO_BANCOS")
            Me.columnNUMERO_COMPROBANTE_EGRESOBANCOS = MyBase.Columns("NUMERO_COMPROBANTE_EGRESOBANCOS")
            Me.columnFECHA_COMPROBANTE_EGRESO_BANCOS = MyBase.Columns("FECHA_COMPROBANTE_EGRESO_BANCOS")
            Me.columnNUMERO_FACTURA_RECEPTOR = MyBase.Columns("NUMERO_FACTURA_RECEPTOR")
            Me.columnRUC_CI_RECEPTOR = MyBase.Columns("RUC_CI_RECEPTOR")
            Me.columnNOMBRE_RECEPTOR = MyBase.Columns("NOMBRE_RECEPTOR")
            Me.columnACTIVIDAD = MyBase.Columns("ACTIVIDAD")
            Me.columnCONCEPTO = MyBase.Columns("CONCEPTO")
            Me.columnTIPO_PAGO_COMPROBANTE_EGRESO_BANCOS = MyBase.Columns("TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS")
            Me.columnRAZON_COMPROBANTE_EGRESO_BANCOS = MyBase.Columns("RAZON_COMPROBANTE_EGRESO_BANCOS")
            Me.columnVALOR_COMPROBANTE_EGRESO_BANCOS = MyBase.Columns("VALOR_COMPROBANTE_EGRESO_BANCOS")
            Me.columnNUMERO_CHEQUE = MyBase.Columns("NUMERO_CHEQUE")
            Me.columnESTADO_COMPROBANTE_EGRESO_BANCO = MyBase.Columns("ESTADO_COMPROBANTE_EGRESO_BANCO")
            Me.columnID_PROVINCIAS = MyBase.Columns("ID_PROVINCIAS")
            Me.columnID_CIUDAD = MyBase.Columns("ID_CIUDAD")
            Me.columnID_PARROQUIAS = MyBase.Columns("ID_PARROQUIAS")
            Me.columnID_CENTRO_COSTO = MyBase.Columns("ID_CENTRO_COSTO")
            Me.columnID_BANCO = MyBase.Columns("ID_BANCO")
            Me.columnID_CUENTA_BANCOS = MyBase.Columns("ID_CUENTA_BANCOS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_COMPROBANTE_EGRESO_BANCOS = New Global.System.Data.DataColumn("ID_COMPROBANTE_EGRESO_BANCOS", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_COMPROBANTE_EGRESO_BANCOS)
            Me.columnNUMERO_COMPROBANTE_EGRESOBANCOS = New Global.System.Data.DataColumn("NUMERO_COMPROBANTE_EGRESOBANCOS", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_COMPROBANTE_EGRESOBANCOS)
            Me.columnFECHA_COMPROBANTE_EGRESO_BANCOS = New Global.System.Data.DataColumn("FECHA_COMPROBANTE_EGRESO_BANCOS", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMPROBANTE_EGRESO_BANCOS)
            Me.columnNUMERO_FACTURA_RECEPTOR = New Global.System.Data.DataColumn("NUMERO_FACTURA_RECEPTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_FACTURA_RECEPTOR)
            Me.columnRUC_CI_RECEPTOR = New Global.System.Data.DataColumn("RUC_CI_RECEPTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC_CI_RECEPTOR)
            Me.columnNOMBRE_RECEPTOR = New Global.System.Data.DataColumn("NOMBRE_RECEPTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_RECEPTOR)
            Me.columnACTIVIDAD = New Global.System.Data.DataColumn("ACTIVIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTIVIDAD)
            Me.columnCONCEPTO = New Global.System.Data.DataColumn("CONCEPTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONCEPTO)
            Me.columnTIPO_PAGO_COMPROBANTE_EGRESO_BANCOS = New Global.System.Data.DataColumn("TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_PAGO_COMPROBANTE_EGRESO_BANCOS)
            Me.columnRAZON_COMPROBANTE_EGRESO_BANCOS = New Global.System.Data.DataColumn("RAZON_COMPROBANTE_EGRESO_BANCOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZON_COMPROBANTE_EGRESO_BANCOS)
            Me.columnVALOR_COMPROBANTE_EGRESO_BANCOS = New Global.System.Data.DataColumn("VALOR_COMPROBANTE_EGRESO_BANCOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_COMPROBANTE_EGRESO_BANCOS)
            Me.columnNUMERO_CHEQUE = New Global.System.Data.DataColumn("NUMERO_CHEQUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_CHEQUE)
            Me.columnESTADO_COMPROBANTE_EGRESO_BANCO = New Global.System.Data.DataColumn("ESTADO_COMPROBANTE_EGRESO_BANCO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_COMPROBANTE_EGRESO_BANCO)
            Me.columnID_PROVINCIAS = New Global.System.Data.DataColumn("ID_PROVINCIAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PROVINCIAS)
            Me.columnID_CIUDAD = New Global.System.Data.DataColumn("ID_CIUDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CIUDAD)
            Me.columnID_PARROQUIAS = New Global.System.Data.DataColumn("ID_PARROQUIAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PARROQUIAS)
            Me.columnID_CENTRO_COSTO = New Global.System.Data.DataColumn("ID_CENTRO_COSTO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CENTRO_COSTO)
            Me.columnID_BANCO = New Global.System.Data.DataColumn("ID_BANCO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_BANCO)
            Me.columnID_CUENTA_BANCOS = New Global.System.Data.DataColumn("ID_CUENTA_BANCOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CUENTA_BANCOS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_COMPROBANTE_EGRESO_BANCOS}, true))
            Me.columnID_COMPROBANTE_EGRESO_BANCOS.AllowDBNull = false
            Me.columnID_COMPROBANTE_EGRESO_BANCOS.Unique = true
            Me.columnNUMERO_COMPROBANTE_EGRESOBANCOS.AllowDBNull = false
            Me.columnFECHA_COMPROBANTE_EGRESO_BANCOS.AllowDBNull = false
            Me.columnNUMERO_FACTURA_RECEPTOR.AllowDBNull = false
            Me.columnNUMERO_FACTURA_RECEPTOR.MaxLength = 2147483647
            Me.columnRUC_CI_RECEPTOR.AllowDBNull = false
            Me.columnRUC_CI_RECEPTOR.MaxLength = 2147483647
            Me.columnNOMBRE_RECEPTOR.AllowDBNull = false
            Me.columnNOMBRE_RECEPTOR.MaxLength = 2147483647
            Me.columnACTIVIDAD.AllowDBNull = false
            Me.columnACTIVIDAD.MaxLength = 2147483647
            Me.columnCONCEPTO.AllowDBNull = false
            Me.columnCONCEPTO.MaxLength = 2147483647
            Me.columnTIPO_PAGO_COMPROBANTE_EGRESO_BANCOS.AllowDBNull = false
            Me.columnTIPO_PAGO_COMPROBANTE_EGRESO_BANCOS.MaxLength = 2147483647
            Me.columnRAZON_COMPROBANTE_EGRESO_BANCOS.AllowDBNull = false
            Me.columnRAZON_COMPROBANTE_EGRESO_BANCOS.MaxLength = 2147483647
            Me.columnVALOR_COMPROBANTE_EGRESO_BANCOS.AllowDBNull = false
            Me.columnNUMERO_CHEQUE.AllowDBNull = false
            Me.columnNUMERO_CHEQUE.MaxLength = 50
            Me.columnESTADO_COMPROBANTE_EGRESO_BANCO.AllowDBNull = false
            Me.columnID_PROVINCIAS.AllowDBNull = false
            Me.columnID_CIUDAD.AllowDBNull = false
            Me.columnID_PARROQUIAS.AllowDBNull = false
            Me.columnID_CENTRO_COSTO.AllowDBNull = false
            Me.columnID_BANCO.AllowDBNull = false
            Me.columnID_CUENTA_BANCOS.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCOMPROBANTE_EGRESO_BANCOSRow() As COMPROBANTE_EGRESO_BANCOSRow
            Return CType(Me.NewRow,COMPROBANTE_EGRESO_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COMPROBANTE_EGRESO_BANCOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COMPROBANTE_EGRESO_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COMPROBANTE_EGRESO_BANCOSRowChangedEvent) Is Nothing) Then
                RaiseEvent COMPROBANTE_EGRESO_BANCOSRowChanged(Me, New COMPROBANTE_EGRESO_BANCOSRowChangeEvent(CType(e.Row,COMPROBANTE_EGRESO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COMPROBANTE_EGRESO_BANCOSRowChangingEvent) Is Nothing) Then
                RaiseEvent COMPROBANTE_EGRESO_BANCOSRowChanging(Me, New COMPROBANTE_EGRESO_BANCOSRowChangeEvent(CType(e.Row,COMPROBANTE_EGRESO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COMPROBANTE_EGRESO_BANCOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent COMPROBANTE_EGRESO_BANCOSRowDeleted(Me, New COMPROBANTE_EGRESO_BANCOSRowChangeEvent(CType(e.Row,COMPROBANTE_EGRESO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COMPROBANTE_EGRESO_BANCOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent COMPROBANTE_EGRESO_BANCOSRowDeleting(Me, New COMPROBANTE_EGRESO_BANCOSRowChangeEvent(CType(e.Row,COMPROBANTE_EGRESO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCOMPROBANTE_EGRESO_BANCOSRow(ByVal row As COMPROBANTE_EGRESO_BANCOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetComprobanteEgresoBancoMachala = New DataSetComprobanteEgresoBancoMachala()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COMPROBANTE_EGRESO_BANCOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CHEQUES_EMITIDOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of CHEQUES_EMITIDOSRow)
        
        Private columnID_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnFECHA_EMISION_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnBANCO_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnCTA_CTE_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnNUMERO_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnBENEFICIARIO_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnVALOR_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnESTADO_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnFECHA_COBRO_CHEQUE_EMITIDO As Global.System.Data.DataColumn
        
        Private columnID_COMPROBANTE_EGRESO_BANCOS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CHEQUES_EMITIDOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_EMISION_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_EMISION_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property BANCO_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANCO_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CTA_CTE_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_CTE_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUMERO_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property BENEFICIARIO_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBENEFICIARIO_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_COBRO_CHEQUE_EMITIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COBRO_CHEQUE_EMITIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_COMPROBANTE_EGRESO_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_COMPROBANTE_EGRESO_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CHEQUES_EMITIDOSRow
            Get
                Return CType(Me.Rows(index),CHEQUES_EMITIDOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHEQUES_EMITIDOSRowChanging As CHEQUES_EMITIDOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHEQUES_EMITIDOSRowChanged As CHEQUES_EMITIDOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHEQUES_EMITIDOSRowDeleting As CHEQUES_EMITIDOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHEQUES_EMITIDOSRowDeleted As CHEQUES_EMITIDOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCHEQUES_EMITIDOSRow(ByVal row As CHEQUES_EMITIDOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCHEQUES_EMITIDOSRow(ByVal ID_CHEQUE_EMITIDO As Long, ByVal FECHA_EMISION_CHEQUE_EMITIDO As Date, ByVal BANCO_CHEQUE_EMITIDO As String, ByVal CTA_CTE_CHEQUE_EMITIDO As String, ByVal NUMERO_CHEQUE_EMITIDO As String, ByVal BENEFICIARIO_CHEQUE_EMITIDO As String, ByVal VALOR_CHEQUE_EMITIDO As Decimal, ByVal ESTADO_CHEQUE_EMITIDO As Integer, ByVal FECHA_COBRO_CHEQUE_EMITIDO As Date, ByVal parentCOMPROBANTE_EGRESO_BANCOSRowByCOMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS As COMPROBANTE_EGRESO_BANCOSRow) As CHEQUES_EMITIDOSRow
            Dim rowCHEQUES_EMITIDOSRow As CHEQUES_EMITIDOSRow = CType(Me.NewRow,CHEQUES_EMITIDOSRow)
            Dim columnValuesArray() As Object = New Object() {ID_CHEQUE_EMITIDO, FECHA_EMISION_CHEQUE_EMITIDO, BANCO_CHEQUE_EMITIDO, CTA_CTE_CHEQUE_EMITIDO, NUMERO_CHEQUE_EMITIDO, BENEFICIARIO_CHEQUE_EMITIDO, VALOR_CHEQUE_EMITIDO, ESTADO_CHEQUE_EMITIDO, FECHA_COBRO_CHEQUE_EMITIDO, Nothing}
            If (Not (parentCOMPROBANTE_EGRESO_BANCOSRowByCOMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS) Is Nothing) Then
                columnValuesArray(9) = parentCOMPROBANTE_EGRESO_BANCOSRowByCOMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS(0)
            End If
            rowCHEQUES_EMITIDOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCHEQUES_EMITIDOSRow)
            Return rowCHEQUES_EMITIDOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_CHEQUE_EMITIDO(ByVal ID_CHEQUE_EMITIDO As Long) As CHEQUES_EMITIDOSRow
            Return CType(Me.Rows.Find(New Object() {ID_CHEQUE_EMITIDO}),CHEQUES_EMITIDOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CHEQUES_EMITIDOSDataTable = CType(MyBase.Clone,CHEQUES_EMITIDOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CHEQUES_EMITIDOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_CHEQUE_EMITIDO = MyBase.Columns("ID_CHEQUE_EMITIDO")
            Me.columnFECHA_EMISION_CHEQUE_EMITIDO = MyBase.Columns("FECHA_EMISION_CHEQUE_EMITIDO")
            Me.columnBANCO_CHEQUE_EMITIDO = MyBase.Columns("BANCO_CHEQUE_EMITIDO")
            Me.columnCTA_CTE_CHEQUE_EMITIDO = MyBase.Columns("CTA_CTE_CHEQUE_EMITIDO")
            Me.columnNUMERO_CHEQUE_EMITIDO = MyBase.Columns("NUMERO_CHEQUE_EMITIDO")
            Me.columnBENEFICIARIO_CHEQUE_EMITIDO = MyBase.Columns("BENEFICIARIO_CHEQUE_EMITIDO")
            Me.columnVALOR_CHEQUE_EMITIDO = MyBase.Columns("VALOR_CHEQUE_EMITIDO")
            Me.columnESTADO_CHEQUE_EMITIDO = MyBase.Columns("ESTADO_CHEQUE_EMITIDO")
            Me.columnFECHA_COBRO_CHEQUE_EMITIDO = MyBase.Columns("FECHA_COBRO_CHEQUE_EMITIDO")
            Me.columnID_COMPROBANTE_EGRESO_BANCOS = MyBase.Columns("ID_COMPROBANTE_EGRESO_BANCOS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("ID_CHEQUE_EMITIDO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CHEQUE_EMITIDO)
            Me.columnFECHA_EMISION_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("FECHA_EMISION_CHEQUE_EMITIDO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_EMISION_CHEQUE_EMITIDO)
            Me.columnBANCO_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("BANCO_CHEQUE_EMITIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANCO_CHEQUE_EMITIDO)
            Me.columnCTA_CTE_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("CTA_CTE_CHEQUE_EMITIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_CTE_CHEQUE_EMITIDO)
            Me.columnNUMERO_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("NUMERO_CHEQUE_EMITIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_CHEQUE_EMITIDO)
            Me.columnBENEFICIARIO_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("BENEFICIARIO_CHEQUE_EMITIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBENEFICIARIO_CHEQUE_EMITIDO)
            Me.columnVALOR_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("VALOR_CHEQUE_EMITIDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_CHEQUE_EMITIDO)
            Me.columnESTADO_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("ESTADO_CHEQUE_EMITIDO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_CHEQUE_EMITIDO)
            Me.columnFECHA_COBRO_CHEQUE_EMITIDO = New Global.System.Data.DataColumn("FECHA_COBRO_CHEQUE_EMITIDO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COBRO_CHEQUE_EMITIDO)
            Me.columnID_COMPROBANTE_EGRESO_BANCOS = New Global.System.Data.DataColumn("ID_COMPROBANTE_EGRESO_BANCOS", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_COMPROBANTE_EGRESO_BANCOS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_CHEQUE_EMITIDO}, true))
            Me.columnID_CHEQUE_EMITIDO.AllowDBNull = false
            Me.columnID_CHEQUE_EMITIDO.Unique = true
            Me.columnFECHA_EMISION_CHEQUE_EMITIDO.AllowDBNull = false
            Me.columnBANCO_CHEQUE_EMITIDO.AllowDBNull = false
            Me.columnBANCO_CHEQUE_EMITIDO.MaxLength = 2147483647
            Me.columnCTA_CTE_CHEQUE_EMITIDO.AllowDBNull = false
            Me.columnCTA_CTE_CHEQUE_EMITIDO.MaxLength = 50
            Me.columnNUMERO_CHEQUE_EMITIDO.AllowDBNull = false
            Me.columnNUMERO_CHEQUE_EMITIDO.MaxLength = 50
            Me.columnBENEFICIARIO_CHEQUE_EMITIDO.AllowDBNull = false
            Me.columnBENEFICIARIO_CHEQUE_EMITIDO.MaxLength = 2147483647
            Me.columnVALOR_CHEQUE_EMITIDO.AllowDBNull = false
            Me.columnESTADO_CHEQUE_EMITIDO.AllowDBNull = false
            Me.columnID_COMPROBANTE_EGRESO_BANCOS.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCHEQUES_EMITIDOSRow() As CHEQUES_EMITIDOSRow
            Return CType(Me.NewRow,CHEQUES_EMITIDOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CHEQUES_EMITIDOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CHEQUES_EMITIDOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CHEQUES_EMITIDOSRowChangedEvent) Is Nothing) Then
                RaiseEvent CHEQUES_EMITIDOSRowChanged(Me, New CHEQUES_EMITIDOSRowChangeEvent(CType(e.Row,CHEQUES_EMITIDOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CHEQUES_EMITIDOSRowChangingEvent) Is Nothing) Then
                RaiseEvent CHEQUES_EMITIDOSRowChanging(Me, New CHEQUES_EMITIDOSRowChangeEvent(CType(e.Row,CHEQUES_EMITIDOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CHEQUES_EMITIDOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CHEQUES_EMITIDOSRowDeleted(Me, New CHEQUES_EMITIDOSRowChangeEvent(CType(e.Row,CHEQUES_EMITIDOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CHEQUES_EMITIDOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CHEQUES_EMITIDOSRowDeleting(Me, New CHEQUES_EMITIDOSRowChangeEvent(CType(e.Row,CHEQUES_EMITIDOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCHEQUES_EMITIDOSRow(ByVal row As CHEQUES_EMITIDOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetComprobanteEgresoBancoMachala = New DataSetComprobanteEgresoBancoMachala()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CHEQUES_EMITIDOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CUENTAS_BANCOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of CUENTAS_BANCOSRow)
        
        Private columnID_CUENTA_BANCOS As Global.System.Data.DataColumn
        
        Private columnNUMERO_CUENTA_BANCOS As Global.System.Data.DataColumn
        
        Private columnMONTO_CUENTA_BANCOS As Global.System.Data.DataColumn
        
        Private columnTIPO_CUENTA_BANCOS As Global.System.Data.DataColumn
        
        Private columnESTADO_CUENTA_BANCOS As Global.System.Data.DataColumn
        
        Private columnID_BANCO As Global.System.Data.DataColumn
        
        Private columnCODIGO_PLAN_CUENTAS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CUENTAS_BANCOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CUENTA_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CUENTA_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUMERO_CUENTA_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_CUENTA_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MONTO_CUENTA_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONTO_CUENTA_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_CUENTA_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CUENTA_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_CUENTA_BANCOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_CUENTA_BANCOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_PLAN_CUENTASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_PLAN_CUENTAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CUENTAS_BANCOSRow
            Get
                Return CType(Me.Rows(index),CUENTAS_BANCOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CUENTAS_BANCOSRowChanging As CUENTAS_BANCOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CUENTAS_BANCOSRowChanged As CUENTAS_BANCOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CUENTAS_BANCOSRowDeleting As CUENTAS_BANCOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CUENTAS_BANCOSRowDeleted As CUENTAS_BANCOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCUENTAS_BANCOSRow(ByVal row As CUENTAS_BANCOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCUENTAS_BANCOSRow(ByVal ID_CUENTA_BANCOS As Integer, ByVal NUMERO_CUENTA_BANCOS As String, ByVal MONTO_CUENTA_BANCOS As Decimal, ByVal TIPO_CUENTA_BANCOS As String, ByVal ESTADO_CUENTA_BANCOS As Integer, ByVal ID_BANCO As Integer, ByVal CODIGO_PLAN_CUENTAS As String) As CUENTAS_BANCOSRow
            Dim rowCUENTAS_BANCOSRow As CUENTAS_BANCOSRow = CType(Me.NewRow,CUENTAS_BANCOSRow)
            Dim columnValuesArray() As Object = New Object() {ID_CUENTA_BANCOS, NUMERO_CUENTA_BANCOS, MONTO_CUENTA_BANCOS, TIPO_CUENTA_BANCOS, ESTADO_CUENTA_BANCOS, ID_BANCO, CODIGO_PLAN_CUENTAS}
            rowCUENTAS_BANCOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCUENTAS_BANCOSRow)
            Return rowCUENTAS_BANCOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_CUENTA_BANCOS(ByVal ID_CUENTA_BANCOS As Integer) As CUENTAS_BANCOSRow
            Return CType(Me.Rows.Find(New Object() {ID_CUENTA_BANCOS}),CUENTAS_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CUENTAS_BANCOSDataTable = CType(MyBase.Clone,CUENTAS_BANCOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CUENTAS_BANCOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_CUENTA_BANCOS = MyBase.Columns("ID_CUENTA_BANCOS")
            Me.columnNUMERO_CUENTA_BANCOS = MyBase.Columns("NUMERO_CUENTA_BANCOS")
            Me.columnMONTO_CUENTA_BANCOS = MyBase.Columns("MONTO_CUENTA_BANCOS")
            Me.columnTIPO_CUENTA_BANCOS = MyBase.Columns("TIPO_CUENTA_BANCOS")
            Me.columnESTADO_CUENTA_BANCOS = MyBase.Columns("ESTADO_CUENTA_BANCOS")
            Me.columnID_BANCO = MyBase.Columns("ID_BANCO")
            Me.columnCODIGO_PLAN_CUENTAS = MyBase.Columns("CODIGO_PLAN_CUENTAS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_CUENTA_BANCOS = New Global.System.Data.DataColumn("ID_CUENTA_BANCOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CUENTA_BANCOS)
            Me.columnNUMERO_CUENTA_BANCOS = New Global.System.Data.DataColumn("NUMERO_CUENTA_BANCOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_CUENTA_BANCOS)
            Me.columnMONTO_CUENTA_BANCOS = New Global.System.Data.DataColumn("MONTO_CUENTA_BANCOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTO_CUENTA_BANCOS)
            Me.columnTIPO_CUENTA_BANCOS = New Global.System.Data.DataColumn("TIPO_CUENTA_BANCOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CUENTA_BANCOS)
            Me.columnESTADO_CUENTA_BANCOS = New Global.System.Data.DataColumn("ESTADO_CUENTA_BANCOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_CUENTA_BANCOS)
            Me.columnID_BANCO = New Global.System.Data.DataColumn("ID_BANCO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_BANCO)
            Me.columnCODIGO_PLAN_CUENTAS = New Global.System.Data.DataColumn("CODIGO_PLAN_CUENTAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_PLAN_CUENTAS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_CUENTA_BANCOS}, true))
            Me.columnID_CUENTA_BANCOS.AllowDBNull = false
            Me.columnID_CUENTA_BANCOS.Unique = true
            Me.columnNUMERO_CUENTA_BANCOS.AllowDBNull = false
            Me.columnNUMERO_CUENTA_BANCOS.MaxLength = 50
            Me.columnMONTO_CUENTA_BANCOS.AllowDBNull = false
            Me.columnTIPO_CUENTA_BANCOS.AllowDBNull = false
            Me.columnTIPO_CUENTA_BANCOS.MaxLength = 50
            Me.columnESTADO_CUENTA_BANCOS.AllowDBNull = false
            Me.columnID_BANCO.AllowDBNull = false
            Me.columnCODIGO_PLAN_CUENTAS.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCUENTAS_BANCOSRow() As CUENTAS_BANCOSRow
            Return CType(Me.NewRow,CUENTAS_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CUENTAS_BANCOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CUENTAS_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CUENTAS_BANCOSRowChangedEvent) Is Nothing) Then
                RaiseEvent CUENTAS_BANCOSRowChanged(Me, New CUENTAS_BANCOSRowChangeEvent(CType(e.Row,CUENTAS_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CUENTAS_BANCOSRowChangingEvent) Is Nothing) Then
                RaiseEvent CUENTAS_BANCOSRowChanging(Me, New CUENTAS_BANCOSRowChangeEvent(CType(e.Row,CUENTAS_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CUENTAS_BANCOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CUENTAS_BANCOSRowDeleted(Me, New CUENTAS_BANCOSRowChangeEvent(CType(e.Row,CUENTAS_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CUENTAS_BANCOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CUENTAS_BANCOSRowDeleting(Me, New CUENTAS_BANCOSRowChangeEvent(CType(e.Row,CUENTAS_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCUENTAS_BANCOSRow(ByVal row As CUENTAS_BANCOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetComprobanteEgresoBancoMachala = New DataSetComprobanteEgresoBancoMachala()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CUENTAS_BANCOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ASIENTOS_LIBRO_DIARIODataTable
        Inherits Global.System.Data.TypedTableBase(Of ASIENTOS_LIBRO_DIARIORow)
        
        Private columnID_ASIENTO As Global.System.Data.DataColumn
        
        Private columnFECHA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnCODIGO_CUENTA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_CUENTA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnCONCEPTO_ASIENTO As Global.System.Data.DataColumn
        
        Private columnDETALLE_TRANSACCION_ASIENTO As Global.System.Data.DataColumn
        
        Private columnPROVINCIA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnCIUDAD_ASIENTO As Global.System.Data.DataColumn
        
        Private columnPARROQUIA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnCENTRO_COSTO_ASIENTO As Global.System.Data.DataColumn
        
        Private columnVALOR_DEBE_ASIENTO As Global.System.Data.DataColumn
        
        Private columnVALOR_HABER_ASIENTO As Global.System.Data.DataColumn
        
        Private columnNUMERO_REGISTRO_ASIENTO As Global.System.Data.DataColumn
        
        Private columnDEBE_HABER As Global.System.Data.DataColumn
        
        Private columnCONCILIAR_ASIENTO As Global.System.Data.DataColumn
        
        Private columnESTADO_ASIENTO As Global.System.Data.DataColumn
        
        Private columnID_LIBRO_DIARIO As Global.System.Data.DataColumn
        
        Private columnESTADO_MAYOR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ASIENTOS_LIBRO_DIARIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_CUENTA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CUENTA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_CUENTA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_CUENTA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONCEPTO_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONCEPTO_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DETALLE_TRANSACCION_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETALLE_TRANSACCION_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PROVINCIA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVINCIA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CIUDAD_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIUDAD_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PARROQUIA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARROQUIA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CENTRO_COSTO_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCENTRO_COSTO_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_DEBE_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_DEBE_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_HABER_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_HABER_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUMERO_REGISTRO_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_REGISTRO_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DEBE_HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE_HABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONCILIAR_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONCILIAR_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_LIBRO_DIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_LIBRO_DIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_MAYORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_MAYOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ASIENTOS_LIBRO_DIARIORow
            Get
                Return CType(Me.Rows(index),ASIENTOS_LIBRO_DIARIORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ASIENTOS_LIBRO_DIARIORowChanging As ASIENTOS_LIBRO_DIARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ASIENTOS_LIBRO_DIARIORowChanged As ASIENTOS_LIBRO_DIARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ASIENTOS_LIBRO_DIARIORowDeleting As ASIENTOS_LIBRO_DIARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ASIENTOS_LIBRO_DIARIORowDeleted As ASIENTOS_LIBRO_DIARIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddASIENTOS_LIBRO_DIARIORow(ByVal row As ASIENTOS_LIBRO_DIARIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddASIENTOS_LIBRO_DIARIORow( _
                    ByVal ID_ASIENTO As Long,  _
                    ByVal FECHA_ASIENTO As Date,  _
                    ByVal CODIGO_CUENTA_ASIENTO As String,  _
                    ByVal NOMBRE_CUENTA_ASIENTO As String,  _
                    ByVal CONCEPTO_ASIENTO As String,  _
                    ByVal DETALLE_TRANSACCION_ASIENTO As String,  _
                    ByVal PROVINCIA_ASIENTO As String,  _
                    ByVal CIUDAD_ASIENTO As String,  _
                    ByVal PARROQUIA_ASIENTO As String,  _
                    ByVal CENTRO_COSTO_ASIENTO As String,  _
                    ByVal VALOR_DEBE_ASIENTO As Decimal,  _
                    ByVal VALOR_HABER_ASIENTO As Decimal,  _
                    ByVal NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal DEBE_HABER As Integer,  _
                    ByVal CONCILIAR_ASIENTO As Integer,  _
                    ByVal ESTADO_ASIENTO As Integer,  _
                    ByVal ID_LIBRO_DIARIO As Long,  _
                    ByVal ESTADO_MAYOR As Integer) As ASIENTOS_LIBRO_DIARIORow
            Dim rowASIENTOS_LIBRO_DIARIORow As ASIENTOS_LIBRO_DIARIORow = CType(Me.NewRow,ASIENTOS_LIBRO_DIARIORow)
            Dim columnValuesArray() As Object = New Object() {ID_ASIENTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CUENTA_ASIENTO, CONCEPTO_ASIENTO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, CIUDAD_ASIENTO, PARROQUIA_ASIENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VALOR_HABER_ASIENTO, NUMERO_REGISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO_ASIENTO, ID_LIBRO_DIARIO, ESTADO_MAYOR}
            rowASIENTOS_LIBRO_DIARIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowASIENTOS_LIBRO_DIARIORow)
            Return rowASIENTOS_LIBRO_DIARIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_ASIENTO(ByVal ID_ASIENTO As Long) As ASIENTOS_LIBRO_DIARIORow
            Return CType(Me.Rows.Find(New Object() {ID_ASIENTO}),ASIENTOS_LIBRO_DIARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ASIENTOS_LIBRO_DIARIODataTable = CType(MyBase.Clone,ASIENTOS_LIBRO_DIARIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ASIENTOS_LIBRO_DIARIODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ASIENTO = MyBase.Columns("ID_ASIENTO")
            Me.columnFECHA_ASIENTO = MyBase.Columns("FECHA_ASIENTO")
            Me.columnCODIGO_CUENTA_ASIENTO = MyBase.Columns("CODIGO_CUENTA_ASIENTO")
            Me.columnNOMBRE_CUENTA_ASIENTO = MyBase.Columns("NOMBRE_CUENTA_ASIENTO")
            Me.columnCONCEPTO_ASIENTO = MyBase.Columns("CONCEPTO_ASIENTO")
            Me.columnDETALLE_TRANSACCION_ASIENTO = MyBase.Columns("DETALLE_TRANSACCION_ASIENTO")
            Me.columnPROVINCIA_ASIENTO = MyBase.Columns("PROVINCIA_ASIENTO")
            Me.columnCIUDAD_ASIENTO = MyBase.Columns("CIUDAD_ASIENTO")
            Me.columnPARROQUIA_ASIENTO = MyBase.Columns("PARROQUIA_ASIENTO")
            Me.columnCENTRO_COSTO_ASIENTO = MyBase.Columns("CENTRO_COSTO_ASIENTO")
            Me.columnVALOR_DEBE_ASIENTO = MyBase.Columns("VALOR_DEBE_ASIENTO")
            Me.columnVALOR_HABER_ASIENTO = MyBase.Columns("VALOR_HABER_ASIENTO")
            Me.columnNUMERO_REGISTRO_ASIENTO = MyBase.Columns("NUMERO_REGISTRO_ASIENTO")
            Me.columnDEBE_HABER = MyBase.Columns("DEBE_HABER")
            Me.columnCONCILIAR_ASIENTO = MyBase.Columns("CONCILIAR_ASIENTO")
            Me.columnESTADO_ASIENTO = MyBase.Columns("ESTADO_ASIENTO")
            Me.columnID_LIBRO_DIARIO = MyBase.Columns("ID_LIBRO_DIARIO")
            Me.columnESTADO_MAYOR = MyBase.Columns("ESTADO_MAYOR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ASIENTO = New Global.System.Data.DataColumn("ID_ASIENTO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ASIENTO)
            Me.columnFECHA_ASIENTO = New Global.System.Data.DataColumn("FECHA_ASIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ASIENTO)
            Me.columnCODIGO_CUENTA_ASIENTO = New Global.System.Data.DataColumn("CODIGO_CUENTA_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CUENTA_ASIENTO)
            Me.columnNOMBRE_CUENTA_ASIENTO = New Global.System.Data.DataColumn("NOMBRE_CUENTA_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_CUENTA_ASIENTO)
            Me.columnCONCEPTO_ASIENTO = New Global.System.Data.DataColumn("CONCEPTO_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONCEPTO_ASIENTO)
            Me.columnDETALLE_TRANSACCION_ASIENTO = New Global.System.Data.DataColumn("DETALLE_TRANSACCION_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETALLE_TRANSACCION_ASIENTO)
            Me.columnPROVINCIA_ASIENTO = New Global.System.Data.DataColumn("PROVINCIA_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVINCIA_ASIENTO)
            Me.columnCIUDAD_ASIENTO = New Global.System.Data.DataColumn("CIUDAD_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIUDAD_ASIENTO)
            Me.columnPARROQUIA_ASIENTO = New Global.System.Data.DataColumn("PARROQUIA_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARROQUIA_ASIENTO)
            Me.columnCENTRO_COSTO_ASIENTO = New Global.System.Data.DataColumn("CENTRO_COSTO_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCENTRO_COSTO_ASIENTO)
            Me.columnVALOR_DEBE_ASIENTO = New Global.System.Data.DataColumn("VALOR_DEBE_ASIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_DEBE_ASIENTO)
            Me.columnVALOR_HABER_ASIENTO = New Global.System.Data.DataColumn("VALOR_HABER_ASIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_HABER_ASIENTO)
            Me.columnNUMERO_REGISTRO_ASIENTO = New Global.System.Data.DataColumn("NUMERO_REGISTRO_ASIENTO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_REGISTRO_ASIENTO)
            Me.columnDEBE_HABER = New Global.System.Data.DataColumn("DEBE_HABER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE_HABER)
            Me.columnCONCILIAR_ASIENTO = New Global.System.Data.DataColumn("CONCILIAR_ASIENTO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONCILIAR_ASIENTO)
            Me.columnESTADO_ASIENTO = New Global.System.Data.DataColumn("ESTADO_ASIENTO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ASIENTO)
            Me.columnID_LIBRO_DIARIO = New Global.System.Data.DataColumn("ID_LIBRO_DIARIO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_LIBRO_DIARIO)
            Me.columnESTADO_MAYOR = New Global.System.Data.DataColumn("ESTADO_MAYOR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_MAYOR)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_ASIENTO}, true))
            Me.columnID_ASIENTO.AllowDBNull = false
            Me.columnID_ASIENTO.Unique = true
            Me.columnFECHA_ASIENTO.AllowDBNull = false
            Me.columnCODIGO_CUENTA_ASIENTO.AllowDBNull = false
            Me.columnCODIGO_CUENTA_ASIENTO.MaxLength = 2147483647
            Me.columnNOMBRE_CUENTA_ASIENTO.AllowDBNull = false
            Me.columnNOMBRE_CUENTA_ASIENTO.MaxLength = 2147483647
            Me.columnCONCEPTO_ASIENTO.AllowDBNull = false
            Me.columnCONCEPTO_ASIENTO.MaxLength = 2147483647
            Me.columnDETALLE_TRANSACCION_ASIENTO.AllowDBNull = false
            Me.columnDETALLE_TRANSACCION_ASIENTO.MaxLength = 2147483647
            Me.columnPROVINCIA_ASIENTO.AllowDBNull = false
            Me.columnPROVINCIA_ASIENTO.MaxLength = 2147483647
            Me.columnCIUDAD_ASIENTO.AllowDBNull = false
            Me.columnCIUDAD_ASIENTO.MaxLength = 2147483647
            Me.columnPARROQUIA_ASIENTO.AllowDBNull = false
            Me.columnPARROQUIA_ASIENTO.MaxLength = 2147483647
            Me.columnCENTRO_COSTO_ASIENTO.AllowDBNull = false
            Me.columnCENTRO_COSTO_ASIENTO.MaxLength = 2147483647
            Me.columnNUMERO_REGISTRO_ASIENTO.AllowDBNull = false
            Me.columnDEBE_HABER.AllowDBNull = false
            Me.columnESTADO_ASIENTO.AllowDBNull = false
            Me.columnID_LIBRO_DIARIO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewASIENTOS_LIBRO_DIARIORow() As ASIENTOS_LIBRO_DIARIORow
            Return CType(Me.NewRow,ASIENTOS_LIBRO_DIARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ASIENTOS_LIBRO_DIARIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ASIENTOS_LIBRO_DIARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ASIENTOS_LIBRO_DIARIORowChangedEvent) Is Nothing) Then
                RaiseEvent ASIENTOS_LIBRO_DIARIORowChanged(Me, New ASIENTOS_LIBRO_DIARIORowChangeEvent(CType(e.Row,ASIENTOS_LIBRO_DIARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ASIENTOS_LIBRO_DIARIORowChangingEvent) Is Nothing) Then
                RaiseEvent ASIENTOS_LIBRO_DIARIORowChanging(Me, New ASIENTOS_LIBRO_DIARIORowChangeEvent(CType(e.Row,ASIENTOS_LIBRO_DIARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ASIENTOS_LIBRO_DIARIORowDeletedEvent) Is Nothing) Then
                RaiseEvent ASIENTOS_LIBRO_DIARIORowDeleted(Me, New ASIENTOS_LIBRO_DIARIORowChangeEvent(CType(e.Row,ASIENTOS_LIBRO_DIARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ASIENTOS_LIBRO_DIARIORowDeletingEvent) Is Nothing) Then
                RaiseEvent ASIENTOS_LIBRO_DIARIORowDeleting(Me, New ASIENTOS_LIBRO_DIARIORowChangeEvent(CType(e.Row,ASIENTOS_LIBRO_DIARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveASIENTOS_LIBRO_DIARIORow(ByVal row As ASIENTOS_LIBRO_DIARIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetComprobanteEgresoBancoMachala = New DataSetComprobanteEgresoBancoMachala()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ASIENTOS_LIBRO_DIARIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class COMPROBANTE_EGRESO_BANCOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOMPROBANTE_EGRESO_BANCOS As COMPROBANTE_EGRESO_BANCOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOMPROBANTE_EGRESO_BANCOS = CType(Me.Table,COMPROBANTE_EGRESO_BANCOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_COMPROBANTE_EGRESO_BANCOS() As Long
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_COMPROBANTE_EGRESO_BANCOSColumn),Long)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_COMPROBANTE_EGRESO_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUMERO_COMPROBANTE_EGRESOBANCOS() As Long
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.NUMERO_COMPROBANTE_EGRESOBANCOSColumn),Long)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.NUMERO_COMPROBANTE_EGRESOBANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_COMPROBANTE_EGRESO_BANCOS() As Date
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.FECHA_COMPROBANTE_EGRESO_BANCOSColumn),Date)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.FECHA_COMPROBANTE_EGRESO_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUMERO_FACTURA_RECEPTOR() As String
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.NUMERO_FACTURA_RECEPTORColumn),String)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.NUMERO_FACTURA_RECEPTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RUC_CI_RECEPTOR() As String
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.RUC_CI_RECEPTORColumn),String)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.RUC_CI_RECEPTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_RECEPTOR() As String
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.NOMBRE_RECEPTORColumn),String)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.NOMBRE_RECEPTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVIDAD() As String
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ACTIVIDADColumn),String)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ACTIVIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONCEPTO() As String
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.CONCEPTOColumn),String)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.CONCEPTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS() As String
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.TIPO_PAGO_COMPROBANTE_EGRESO_BANCOSColumn),String)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.TIPO_PAGO_COMPROBANTE_EGRESO_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RAZON_COMPROBANTE_EGRESO_BANCOS() As String
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.RAZON_COMPROBANTE_EGRESO_BANCOSColumn),String)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.RAZON_COMPROBANTE_EGRESO_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_COMPROBANTE_EGRESO_BANCOS() As Decimal
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.VALOR_COMPROBANTE_EGRESO_BANCOSColumn),Decimal)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.VALOR_COMPROBANTE_EGRESO_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUMERO_CHEQUE() As String
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.NUMERO_CHEQUEColumn),String)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.NUMERO_CHEQUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_COMPROBANTE_EGRESO_BANCO() As Integer
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ESTADO_COMPROBANTE_EGRESO_BANCOColumn),Integer)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ESTADO_COMPROBANTE_EGRESO_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_PROVINCIAS() As Integer
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_PROVINCIASColumn),Integer)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_PROVINCIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CIUDAD() As Integer
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_CIUDADColumn),Integer)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_PARROQUIAS() As Integer
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_PARROQUIASColumn),Integer)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_PARROQUIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CENTRO_COSTO() As Integer
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_CENTRO_COSTOColumn),Integer)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_CENTRO_COSTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_BANCO() As Integer
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_BANCOColumn),Integer)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CUENTA_BANCOS() As Integer
            Get
                Return CType(Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_CUENTA_BANCOSColumn),Integer)
            End Get
            Set
                Me(Me.tableCOMPROBANTE_EGRESO_BANCOS.ID_CUENTA_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CUENTAS_BANCOSRow() As CUENTAS_BANCOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS")),CUENTAS_BANCOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetCHEQUES_EMITIDOSRows() As CHEQUES_EMITIDOSRow()
            If (Me.Table.ChildRelations("COMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS") Is Nothing) Then
                Return New CHEQUES_EMITIDOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("COMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS")),CHEQUES_EMITIDOSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CHEQUES_EMITIDOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCHEQUES_EMITIDOS As CHEQUES_EMITIDOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCHEQUES_EMITIDOS = CType(Me.Table,CHEQUES_EMITIDOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CHEQUE_EMITIDO() As Long
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.ID_CHEQUE_EMITIDOColumn),Long)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.ID_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_EMISION_CHEQUE_EMITIDO() As Date
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.FECHA_EMISION_CHEQUE_EMITIDOColumn),Date)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.FECHA_EMISION_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BANCO_CHEQUE_EMITIDO() As String
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.BANCO_CHEQUE_EMITIDOColumn),String)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.BANCO_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CTA_CTE_CHEQUE_EMITIDO() As String
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.CTA_CTE_CHEQUE_EMITIDOColumn),String)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.CTA_CTE_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUMERO_CHEQUE_EMITIDO() As String
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.NUMERO_CHEQUE_EMITIDOColumn),String)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.NUMERO_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BENEFICIARIO_CHEQUE_EMITIDO() As String
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.BENEFICIARIO_CHEQUE_EMITIDOColumn),String)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.BENEFICIARIO_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_CHEQUE_EMITIDO() As Decimal
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.VALOR_CHEQUE_EMITIDOColumn),Decimal)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.VALOR_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_CHEQUE_EMITIDO() As Integer
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.ESTADO_CHEQUE_EMITIDOColumn),Integer)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.ESTADO_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_COBRO_CHEQUE_EMITIDO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCHEQUES_EMITIDOS.FECHA_COBRO_CHEQUE_EMITIDOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COBRO_CHEQUE_EMITIDO' de la tabla 'CHEQUES_EMITIDOS"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.FECHA_COBRO_CHEQUE_EMITIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_COMPROBANTE_EGRESO_BANCOS() As Long
            Get
                Return CType(Me(Me.tableCHEQUES_EMITIDOS.ID_COMPROBANTE_EGRESO_BANCOSColumn),Long)
            End Get
            Set
                Me(Me.tableCHEQUES_EMITIDOS.ID_COMPROBANTE_EGRESO_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COMPROBANTE_EGRESO_BANCOSRow() As COMPROBANTE_EGRESO_BANCOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("COMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS")),COMPROBANTE_EGRESO_BANCOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("COMPROBANTE_EGRESO_BANCOS_CHEQUES_EMITIDOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_COBRO_CHEQUE_EMITIDONull() As Boolean
            Return Me.IsNull(Me.tableCHEQUES_EMITIDOS.FECHA_COBRO_CHEQUE_EMITIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_COBRO_CHEQUE_EMITIDONull()
            Me(Me.tableCHEQUES_EMITIDOS.FECHA_COBRO_CHEQUE_EMITIDOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CUENTAS_BANCOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCUENTAS_BANCOS As CUENTAS_BANCOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCUENTAS_BANCOS = CType(Me.Table,CUENTAS_BANCOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CUENTA_BANCOS() As Integer
            Get
                Return CType(Me(Me.tableCUENTAS_BANCOS.ID_CUENTA_BANCOSColumn),Integer)
            End Get
            Set
                Me(Me.tableCUENTAS_BANCOS.ID_CUENTA_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUMERO_CUENTA_BANCOS() As String
            Get
                Return CType(Me(Me.tableCUENTAS_BANCOS.NUMERO_CUENTA_BANCOSColumn),String)
            End Get
            Set
                Me(Me.tableCUENTAS_BANCOS.NUMERO_CUENTA_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MONTO_CUENTA_BANCOS() As Decimal
            Get
                Return CType(Me(Me.tableCUENTAS_BANCOS.MONTO_CUENTA_BANCOSColumn),Decimal)
            End Get
            Set
                Me(Me.tableCUENTAS_BANCOS.MONTO_CUENTA_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_CUENTA_BANCOS() As String
            Get
                Return CType(Me(Me.tableCUENTAS_BANCOS.TIPO_CUENTA_BANCOSColumn),String)
            End Get
            Set
                Me(Me.tableCUENTAS_BANCOS.TIPO_CUENTA_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_CUENTA_BANCOS() As Integer
            Get
                Return CType(Me(Me.tableCUENTAS_BANCOS.ESTADO_CUENTA_BANCOSColumn),Integer)
            End Get
            Set
                Me(Me.tableCUENTAS_BANCOS.ESTADO_CUENTA_BANCOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_BANCO() As Integer
            Get
                Return CType(Me(Me.tableCUENTAS_BANCOS.ID_BANCOColumn),Integer)
            End Get
            Set
                Me(Me.tableCUENTAS_BANCOS.ID_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_PLAN_CUENTAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUENTAS_BANCOS.CODIGO_PLAN_CUENTASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODIGO_PLAN_CUENTAS' de la tabla 'CUENTAS_BANCOS' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUENTAS_BANCOS.CODIGO_PLAN_CUENTASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCODIGO_PLAN_CUENTASNull() As Boolean
            Return Me.IsNull(Me.tableCUENTAS_BANCOS.CODIGO_PLAN_CUENTASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCODIGO_PLAN_CUENTASNull()
            Me(Me.tableCUENTAS_BANCOS.CODIGO_PLAN_CUENTASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetCOMPROBANTE_EGRESO_BANCOSRows() As COMPROBANTE_EGRESO_BANCOSRow()
            If (Me.Table.ChildRelations("CUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS") Is Nothing) Then
                Return New COMPROBANTE_EGRESO_BANCOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CUENTAS_BANCOS_COMPROBANTE_EGRESO_BANCOS")),COMPROBANTE_EGRESO_BANCOSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ASIENTOS_LIBRO_DIARIORow
        Inherits Global.System.Data.DataRow
        
        Private tableASIENTOS_LIBRO_DIARIO As ASIENTOS_LIBRO_DIARIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableASIENTOS_LIBRO_DIARIO = CType(Me.Table,ASIENTOS_LIBRO_DIARIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ASIENTO() As Long
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.ID_ASIENTOColumn),Long)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.ID_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_ASIENTO() As Date
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.FECHA_ASIENTOColumn),Date)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.FECHA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_CUENTA_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CODIGO_CUENTA_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CODIGO_CUENTA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_CUENTA_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.NOMBRE_CUENTA_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.NOMBRE_CUENTA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONCEPTO_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCEPTO_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCEPTO_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DETALLE_TRANSACCION_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.DETALLE_TRANSACCION_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.DETALLE_TRANSACCION_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PROVINCIA_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.PROVINCIA_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.PROVINCIA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CIUDAD_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CIUDAD_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CIUDAD_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PARROQUIA_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.PARROQUIA_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.PARROQUIA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CENTRO_COSTO_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CENTRO_COSTO_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CENTRO_COSTO_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_DEBE_ASIENTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_DEBE_ASIENTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VALOR_DEBE_ASIENTO' de la tabla 'ASIENTOS_LIBRO_DIARIO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_DEBE_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_HABER_ASIENTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_HABER_ASIENTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VALOR_HABER_ASIENTO' de la tabla 'ASIENTOS_LIBRO_DIARIO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_HABER_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUMERO_REGISTRO_ASIENTO() As Long
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.NUMERO_REGISTRO_ASIENTOColumn),Long)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.NUMERO_REGISTRO_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DEBE_HABER() As Integer
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.DEBE_HABERColumn),Integer)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.DEBE_HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONCILIAR_ASIENTO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCILIAR_ASIENTOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CONCILIAR_ASIENTO' de la tabla 'ASIENTOS_LIBRO_DIARIO' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCILIAR_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ASIENTO() As Integer
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.ESTADO_ASIENTOColumn),Integer)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.ESTADO_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_LIBRO_DIARIO() As Long
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.ID_LIBRO_DIARIOColumn),Long)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.ID_LIBRO_DIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_MAYOR() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.ESTADO_MAYORColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESTADO_MAYOR' de la tabla 'ASIENTOS_LIBRO_DIARIO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.ESTADO_MAYORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsVALOR_DEBE_ASIENTONull() As Boolean
            Return Me.IsNull(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_DEBE_ASIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetVALOR_DEBE_ASIENTONull()
            Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_DEBE_ASIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsVALOR_HABER_ASIENTONull() As Boolean
            Return Me.IsNull(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_HABER_ASIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetVALOR_HABER_ASIENTONull()
            Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_HABER_ASIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCONCILIAR_ASIENTONull() As Boolean
            Return Me.IsNull(Me.tableASIENTOS_LIBRO_DIARIO.CONCILIAR_ASIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCONCILIAR_ASIENTONull()
            Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCILIAR_ASIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsESTADO_MAYORNull() As Boolean
            Return Me.IsNull(Me.tableASIENTOS_LIBRO_DIARIO.ESTADO_MAYORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetESTADO_MAYORNull()
            Me(Me.tableASIENTOS_LIBRO_DIARIO.ESTADO_MAYORColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class COMPROBANTE_EGRESO_BANCOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COMPROBANTE_EGRESO_BANCOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As COMPROBANTE_EGRESO_BANCOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As COMPROBANTE_EGRESO_BANCOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CHEQUES_EMITIDOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CHEQUES_EMITIDOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CHEQUES_EMITIDOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CHEQUES_EMITIDOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CUENTAS_BANCOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CUENTAS_BANCOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CUENTAS_BANCOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CUENTAS_BANCOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class ASIENTOS_LIBRO_DIARIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ASIENTOS_LIBRO_DIARIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As ASIENTOS_LIBRO_DIARIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As ASIENTOS_LIBRO_DIARIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetComprobanteEgresoBancoMachalaTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class COMPROBANTE_EGRESO_BANCOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COMPROBANTE_EGRESO_BANCOS"
            tableMapping.ColumnMappings.Add("ID_COMPROBANTE_EGRESO_BANCOS", "ID_COMPROBANTE_EGRESO_BANCOS")
            tableMapping.ColumnMappings.Add("NUMERO_COMPROBANTE_EGRESOBANCOS", "NUMERO_COMPROBANTE_EGRESOBANCOS")
            tableMapping.ColumnMappings.Add("FECHA_COMPROBANTE_EGRESO_BANCOS", "FECHA_COMPROBANTE_EGRESO_BANCOS")
            tableMapping.ColumnMappings.Add("NUMERO_FACTURA_RECEPTOR", "NUMERO_FACTURA_RECEPTOR")
            tableMapping.ColumnMappings.Add("RUC_CI_RECEPTOR", "RUC_CI_RECEPTOR")
            tableMapping.ColumnMappings.Add("NOMBRE_RECEPTOR", "NOMBRE_RECEPTOR")
            tableMapping.ColumnMappings.Add("ACTIVIDAD", "ACTIVIDAD")
            tableMapping.ColumnMappings.Add("CONCEPTO", "CONCEPTO")
            tableMapping.ColumnMappings.Add("TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS", "TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS")
            tableMapping.ColumnMappings.Add("RAZON_COMPROBANTE_EGRESO_BANCOS", "RAZON_COMPROBANTE_EGRESO_BANCOS")
            tableMapping.ColumnMappings.Add("VALOR_COMPROBANTE_EGRESO_BANCOS", "VALOR_COMPROBANTE_EGRESO_BANCOS")
            tableMapping.ColumnMappings.Add("NUMERO_CHEQUE", "NUMERO_CHEQUE")
            tableMapping.ColumnMappings.Add("ESTADO_COMPROBANTE_EGRESO_BANCO", "ESTADO_COMPROBANTE_EGRESO_BANCO")
            tableMapping.ColumnMappings.Add("ID_PROVINCIAS", "ID_PROVINCIAS")
            tableMapping.ColumnMappings.Add("ID_CIUDAD", "ID_CIUDAD")
            tableMapping.ColumnMappings.Add("ID_PARROQUIAS", "ID_PARROQUIAS")
            tableMapping.ColumnMappings.Add("ID_CENTRO_COSTO", "ID_CENTRO_COSTO")
            tableMapping.ColumnMappings.Add("ID_BANCO", "ID_BANCO")
            tableMapping.ColumnMappings.Add("ID_CUENTA_BANCOS", "ID_CUENTA_BANCOS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[COMPROBANTE_EGRESO_BANCOS] WHERE (([ID_COMPROBANTE_EGRESO_BANC"& _ 
                "OS] = @Original_ID_COMPROBANTE_EGRESO_BANCOS) AND ([NUMERO_COMPROBANTE_EGRESOBAN"& _ 
                "COS] = @Original_NUMERO_COMPROBANTE_EGRESOBANCOS) AND ([FECHA_COMPROBANTE_EGRESO"& _ 
                "_BANCOS] = @Original_FECHA_COMPROBANTE_EGRESO_BANCOS) AND ([VALOR_COMPROBANTE_EG"& _ 
                "RESO_BANCOS] = @Original_VALOR_COMPROBANTE_EGRESO_BANCOS) AND ([NUMERO_CHEQUE] ="& _ 
                " @Original_NUMERO_CHEQUE) AND ([ESTADO_COMPROBANTE_EGRESO_BANCO] = @Original_EST"& _ 
                "ADO_COMPROBANTE_EGRESO_BANCO) AND ([ID_PROVINCIAS] = @Original_ID_PROVINCIAS) AN"& _ 
                "D ([ID_CIUDAD] = @Original_ID_CIUDAD) AND ([ID_PARROQUIAS] = @Original_ID_PARROQ"& _ 
                "UIAS) AND ([ID_CENTRO_COSTO] = @Original_ID_CENTRO_COSTO) AND ([ID_BANCO] = @Ori"& _ 
                "ginal_ID_BANCO) AND ([ID_CUENTA_BANCOS] = @Original_ID_CUENTA_BANCOS))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_COMPROBANTE_EGRESOBANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_COMPROBANTE_EGRESOBANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_CHEQUE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CHEQUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_COMPROBANTE_EGRESO_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_COMPROBANTE_EGRESO_BANCO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PROVINCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CIUDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CIUDAD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PARROQUIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PARROQUIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CENTRO_COSTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CENTRO_COSTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BANCO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[COMPROBANTE_EGRESO_BANCOS] ([ID_COMPROBANTE_EGRESO_BANCOS], [N"& _ 
                "UMERO_COMPROBANTE_EGRESOBANCOS], [FECHA_COMPROBANTE_EGRESO_BANCOS], [NUMERO_FACT"& _ 
                "URA_RECEPTOR], [RUC_CI_RECEPTOR], [NOMBRE_RECEPTOR], [ACTIVIDAD], [CONCEPTO], [T"& _ 
                "IPO_PAGO_COMPROBANTE_EGRESO_BANCOS], [RAZON_COMPROBANTE_EGRESO_BANCOS], [VALOR_C"& _ 
                "OMPROBANTE_EGRESO_BANCOS], [NUMERO_CHEQUE], [ESTADO_COMPROBANTE_EGRESO_BANCO], ["& _ 
                "ID_PROVINCIAS], [ID_CIUDAD], [ID_PARROQUIAS], [ID_CENTRO_COSTO], [ID_BANCO], [ID"& _ 
                "_CUENTA_BANCOS]) VALUES (@ID_COMPROBANTE_EGRESO_BANCOS, @NUMERO_COMPROBANTE_EGRE"& _ 
                "SOBANCOS, @FECHA_COMPROBANTE_EGRESO_BANCOS, @NUMERO_FACTURA_RECEPTOR, @RUC_CI_RE"& _ 
                "CEPTOR, @NOMBRE_RECEPTOR, @ACTIVIDAD, @CONCEPTO, @TIPO_PAGO_COMPROBANTE_EGRESO_B"& _ 
                "ANCOS, @RAZON_COMPROBANTE_EGRESO_BANCOS, @VALOR_COMPROBANTE_EGRESO_BANCOS, @NUME"& _ 
                "RO_CHEQUE, @ESTADO_COMPROBANTE_EGRESO_BANCO, @ID_PROVINCIAS, @ID_CIUDAD, @ID_PAR"& _ 
                "ROQUIAS, @ID_CENTRO_COSTO, @ID_BANCO, @ID_CUENTA_BANCOS);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_COMPROBANTE"& _ 
                "_EGRESO_BANCOS, NUMERO_COMPROBANTE_EGRESOBANCOS, FECHA_COMPROBANTE_EGRESO_BANCOS"& _ 
                ", NUMERO_FACTURA_RECEPTOR, RUC_CI_RECEPTOR, NOMBRE_RECEPTOR, ACTIVIDAD, CONCEPTO"& _ 
                ", TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS, RAZON_COMPROBANTE_EGRESO_BANCOS, VALOR_CO"& _ 
                "MPROBANTE_EGRESO_BANCOS, NUMERO_CHEQUE, ESTADO_COMPROBANTE_EGRESO_BANCO, ID_PROV"& _ 
                "INCIAS, ID_CIUDAD, ID_PARROQUIAS, ID_CENTRO_COSTO, ID_BANCO, ID_CUENTA_BANCOS FR"& _ 
                "OM COMPROBANTE_EGRESO_BANCOS WHERE (ID_COMPROBANTE_EGRESO_BANCOS = @ID_COMPROBAN"& _ 
                "TE_EGRESO_BANCOS)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_COMPROBANTE_EGRESOBANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_COMPROBANTE_EGRESOBANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_FACTURA_RECEPTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_FACTURA_RECEPTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUC_CI_RECEPTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_CI_RECEPTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_RECEPTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_RECEPTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACTIVIDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACTIVIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCEPTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCEPTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RAZON_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RAZON_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_CHEQUE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CHEQUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_COMPROBANTE_EGRESO_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_COMPROBANTE_EGRESO_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PROVINCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CIUDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CIUDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PARROQUIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PARROQUIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CENTRO_COSTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CENTRO_COSTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[COMPROBANTE_EGRESO_BANCOS] SET [ID_COMPROBANTE_EGRESO_BANCOS] = @ID"& _ 
                "_COMPROBANTE_EGRESO_BANCOS, [NUMERO_COMPROBANTE_EGRESOBANCOS] = @NUMERO_COMPROBA"& _ 
                "NTE_EGRESOBANCOS, [FECHA_COMPROBANTE_EGRESO_BANCOS] = @FECHA_COMPROBANTE_EGRESO_"& _ 
                "BANCOS, [NUMERO_FACTURA_RECEPTOR] = @NUMERO_FACTURA_RECEPTOR, [RUC_CI_RECEPTOR] "& _ 
                "= @RUC_CI_RECEPTOR, [NOMBRE_RECEPTOR] = @NOMBRE_RECEPTOR, [ACTIVIDAD] = @ACTIVID"& _ 
                "AD, [CONCEPTO] = @CONCEPTO, [TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS] = @TIPO_PAGO_C"& _ 
                "OMPROBANTE_EGRESO_BANCOS, [RAZON_COMPROBANTE_EGRESO_BANCOS] = @RAZON_COMPROBANTE"& _ 
                "_EGRESO_BANCOS, [VALOR_COMPROBANTE_EGRESO_BANCOS] = @VALOR_COMPROBANTE_EGRESO_BA"& _ 
                "NCOS, [NUMERO_CHEQUE] = @NUMERO_CHEQUE, [ESTADO_COMPROBANTE_EGRESO_BANCO] = @EST"& _ 
                "ADO_COMPROBANTE_EGRESO_BANCO, [ID_PROVINCIAS] = @ID_PROVINCIAS, [ID_CIUDAD] = @I"& _ 
                "D_CIUDAD, [ID_PARROQUIAS] = @ID_PARROQUIAS, [ID_CENTRO_COSTO] = @ID_CENTRO_COSTO"& _ 
                ", [ID_BANCO] = @ID_BANCO, [ID_CUENTA_BANCOS] = @ID_CUENTA_BANCOS WHERE (([ID_COM"& _ 
                "PROBANTE_EGRESO_BANCOS] = @Original_ID_COMPROBANTE_EGRESO_BANCOS) AND ([NUMERO_C"& _ 
                "OMPROBANTE_EGRESOBANCOS] = @Original_NUMERO_COMPROBANTE_EGRESOBANCOS) AND ([FECH"& _ 
                "A_COMPROBANTE_EGRESO_BANCOS] = @Original_FECHA_COMPROBANTE_EGRESO_BANCOS) AND (["& _ 
                "VALOR_COMPROBANTE_EGRESO_BANCOS] = @Original_VALOR_COMPROBANTE_EGRESO_BANCOS) AN"& _ 
                "D ([NUMERO_CHEQUE] = @Original_NUMERO_CHEQUE) AND ([ESTADO_COMPROBANTE_EGRESO_BA"& _ 
                "NCO] = @Original_ESTADO_COMPROBANTE_EGRESO_BANCO) AND ([ID_PROVINCIAS] = @Origin"& _ 
                "al_ID_PROVINCIAS) AND ([ID_CIUDAD] = @Original_ID_CIUDAD) AND ([ID_PARROQUIAS] ="& _ 
                " @Original_ID_PARROQUIAS) AND ([ID_CENTRO_COSTO] = @Original_ID_CENTRO_COSTO) AN"& _ 
                "D ([ID_BANCO] = @Original_ID_BANCO) AND ([ID_CUENTA_BANCOS] = @Original_ID_CUENT"& _ 
                "A_BANCOS));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_COMPROBANTE_EGRESO_BANCOS, NUMERO_COMPROBANTE_EGRESOBANCO"& _ 
                "S, FECHA_COMPROBANTE_EGRESO_BANCOS, NUMERO_FACTURA_RECEPTOR, RUC_CI_RECEPTOR, NO"& _ 
                "MBRE_RECEPTOR, ACTIVIDAD, CONCEPTO, TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS, RAZON_C"& _ 
                "OMPROBANTE_EGRESO_BANCOS, VALOR_COMPROBANTE_EGRESO_BANCOS, NUMERO_CHEQUE, ESTADO"& _ 
                "_COMPROBANTE_EGRESO_BANCO, ID_PROVINCIAS, ID_CIUDAD, ID_PARROQUIAS, ID_CENTRO_CO"& _ 
                "STO, ID_BANCO, ID_CUENTA_BANCOS FROM COMPROBANTE_EGRESO_BANCOS WHERE (ID_COMPROB"& _ 
                "ANTE_EGRESO_BANCOS = @ID_COMPROBANTE_EGRESO_BANCOS)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_COMPROBANTE_EGRESOBANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_COMPROBANTE_EGRESOBANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_FACTURA_RECEPTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_FACTURA_RECEPTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUC_CI_RECEPTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_CI_RECEPTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_RECEPTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_RECEPTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACTIVIDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACTIVIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCEPTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCEPTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RAZON_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RAZON_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_CHEQUE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CHEQUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_COMPROBANTE_EGRESO_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_COMPROBANTE_EGRESO_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PROVINCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CIUDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CIUDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PARROQUIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PARROQUIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CENTRO_COSTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CENTRO_COSTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_COMPROBANTE_EGRESOBANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_COMPROBANTE_EGRESOBANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_CHEQUE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CHEQUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_COMPROBANTE_EGRESO_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_COMPROBANTE_EGRESO_BANCO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PROVINCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CIUDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CIUDAD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PARROQUIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PARROQUIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CENTRO_COSTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CENTRO_COSTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BANCO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_COMPROBANTE_EGRESO_BANCOS, NUMERO_COMPROBANTE_EGRESOBANCOS, FECHA_COMPR"& _ 
                "OBANTE_EGRESO_BANCOS, NUMERO_FACTURA_RECEPTOR, RUC_CI_RECEPTOR, NOMBRE_RECEPTOR,"& _ 
                " ACTIVIDAD, CONCEPTO, TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS, RAZON_COMPROBANTE_EGR"& _ 
                "ESO_BANCOS, VALOR_COMPROBANTE_EGRESO_BANCOS, NUMERO_CHEQUE, ESTADO_COMPROBANTE_E"& _ 
                "GRESO_BANCO, ID_PROVINCIAS, ID_CIUDAD, ID_PARROQUIAS, ID_CENTRO_COSTO, ID_BANCO,"& _ 
                " ID_CUENTA_BANCOS FROM dbo.COMPROBANTE_EGRESO_BANCOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetComprobanteEgresoBancoMachala.COMPROBANTE_EGRESO_BANCOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetComprobanteEgresoBancoMachala.COMPROBANTE_EGRESO_BANCOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetComprobanteEgresoBancoMachala.COMPROBANTE_EGRESO_BANCOSDataTable = New DataSetComprobanteEgresoBancoMachala.COMPROBANTE_EGRESO_BANCOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetComprobanteEgresoBancoMachala.COMPROBANTE_EGRESO_BANCOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetComprobanteEgresoBancoMachala) As Integer
            Return Me.Adapter.Update(dataSet, "COMPROBANTE_EGRESO_BANCOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_COMPROBANTE_EGRESO_BANCOS As Long, ByVal Original_NUMERO_COMPROBANTE_EGRESOBANCOS As Long, ByVal Original_FECHA_COMPROBANTE_EGRESO_BANCOS As Date, ByVal Original_VALOR_COMPROBANTE_EGRESO_BANCOS As Decimal, ByVal Original_NUMERO_CHEQUE As String, ByVal Original_ESTADO_COMPROBANTE_EGRESO_BANCO As Integer, ByVal Original_ID_PROVINCIAS As Integer, ByVal Original_ID_CIUDAD As Integer, ByVal Original_ID_PARROQUIAS As Integer, ByVal Original_ID_CENTRO_COSTO As Integer, ByVal Original_ID_BANCO As Integer, ByVal Original_ID_CUENTA_BANCOS As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_COMPROBANTE_EGRESO_BANCOS,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NUMERO_COMPROBANTE_EGRESOBANCOS,Long)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FECHA_COMPROBANTE_EGRESO_BANCOS,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_VALOR_COMPROBANTE_EGRESO_BANCOS,Decimal)
            If (Original_NUMERO_CHEQUE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NUMERO_CHEQUE")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_NUMERO_CHEQUE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ESTADO_COMPROBANTE_EGRESO_BANCO,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ID_PROVINCIAS,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ID_CIUDAD,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ID_PARROQUIAS,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ID_CENTRO_COSTO,Integer)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ID_BANCO,Integer)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ID_CUENTA_BANCOS,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID_COMPROBANTE_EGRESO_BANCOS As Long,  _
                    ByVal NUMERO_COMPROBANTE_EGRESOBANCOS As Long,  _
                    ByVal FECHA_COMPROBANTE_EGRESO_BANCOS As Date,  _
                    ByVal NUMERO_FACTURA_RECEPTOR As String,  _
                    ByVal RUC_CI_RECEPTOR As String,  _
                    ByVal NOMBRE_RECEPTOR As String,  _
                    ByVal ACTIVIDAD As String,  _
                    ByVal CONCEPTO As String,  _
                    ByVal TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS As String,  _
                    ByVal RAZON_COMPROBANTE_EGRESO_BANCOS As String,  _
                    ByVal VALOR_COMPROBANTE_EGRESO_BANCOS As Decimal,  _
                    ByVal NUMERO_CHEQUE As String,  _
                    ByVal ESTADO_COMPROBANTE_EGRESO_BANCO As Integer,  _
                    ByVal ID_PROVINCIAS As Integer,  _
                    ByVal ID_CIUDAD As Integer,  _
                    ByVal ID_PARROQUIAS As Integer,  _
                    ByVal ID_CENTRO_COSTO As Integer,  _
                    ByVal ID_BANCO As Integer,  _
                    ByVal ID_CUENTA_BANCOS As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_COMPROBANTE_EGRESO_BANCOS,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(NUMERO_COMPROBANTE_EGRESOBANCOS,Long)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FECHA_COMPROBANTE_EGRESO_BANCOS,Date)
            If (NUMERO_FACTURA_RECEPTOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUMERO_FACTURA_RECEPTOR")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NUMERO_FACTURA_RECEPTOR,String)
            End If
            If (RUC_CI_RECEPTOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RUC_CI_RECEPTOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RUC_CI_RECEPTOR,String)
            End If
            If (NOMBRE_RECEPTOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_RECEPTOR")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(NOMBRE_RECEPTOR,String)
            End If
            If (ACTIVIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACTIVIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ACTIVIDAD,String)
            End If
            If (CONCEPTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONCEPTO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CONCEPTO,String)
            End If
            If (TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS,String)
            End If
            If (RAZON_COMPROBANTE_EGRESO_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RAZON_COMPROBANTE_EGRESO_BANCOS")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(RAZON_COMPROBANTE_EGRESO_BANCOS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(VALOR_COMPROBANTE_EGRESO_BANCOS,Decimal)
            If (NUMERO_CHEQUE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUMERO_CHEQUE")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(NUMERO_CHEQUE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ESTADO_COMPROBANTE_EGRESO_BANCO,Integer)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(ID_PROVINCIAS,Integer)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(ID_CIUDAD,Integer)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(ID_PARROQUIAS,Integer)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(ID_CENTRO_COSTO,Integer)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(ID_BANCO,Integer)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(ID_CUENTA_BANCOS,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_COMPROBANTE_EGRESO_BANCOS As Long,  _
                    ByVal NUMERO_COMPROBANTE_EGRESOBANCOS As Long,  _
                    ByVal FECHA_COMPROBANTE_EGRESO_BANCOS As Date,  _
                    ByVal NUMERO_FACTURA_RECEPTOR As String,  _
                    ByVal RUC_CI_RECEPTOR As String,  _
                    ByVal NOMBRE_RECEPTOR As String,  _
                    ByVal ACTIVIDAD As String,  _
                    ByVal CONCEPTO As String,  _
                    ByVal TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS As String,  _
                    ByVal RAZON_COMPROBANTE_EGRESO_BANCOS As String,  _
                    ByVal VALOR_COMPROBANTE_EGRESO_BANCOS As Decimal,  _
                    ByVal NUMERO_CHEQUE As String,  _
                    ByVal ESTADO_COMPROBANTE_EGRESO_BANCO As Integer,  _
                    ByVal ID_PROVINCIAS As Integer,  _
                    ByVal ID_CIUDAD As Integer,  _
                    ByVal ID_PARROQUIAS As Integer,  _
                    ByVal ID_CENTRO_COSTO As Integer,  _
                    ByVal ID_BANCO As Integer,  _
                    ByVal ID_CUENTA_BANCOS As Integer,  _
                    ByVal Original_ID_COMPROBANTE_EGRESO_BANCOS As Long,  _
                    ByVal Original_NUMERO_COMPROBANTE_EGRESOBANCOS As Long,  _
                    ByVal Original_FECHA_COMPROBANTE_EGRESO_BANCOS As Date,  _
                    ByVal Original_VALOR_COMPROBANTE_EGRESO_BANCOS As Decimal,  _
                    ByVal Original_NUMERO_CHEQUE As String,  _
                    ByVal Original_ESTADO_COMPROBANTE_EGRESO_BANCO As Integer,  _
                    ByVal Original_ID_PROVINCIAS As Integer,  _
                    ByVal Original_ID_CIUDAD As Integer,  _
                    ByVal Original_ID_PARROQUIAS As Integer,  _
                    ByVal Original_ID_CENTRO_COSTO As Integer,  _
                    ByVal Original_ID_BANCO As Integer,  _
                    ByVal Original_ID_CUENTA_BANCOS As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_COMPROBANTE_EGRESO_BANCOS,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NUMERO_COMPROBANTE_EGRESOBANCOS,Long)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FECHA_COMPROBANTE_EGRESO_BANCOS,Date)
            If (NUMERO_FACTURA_RECEPTOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUMERO_FACTURA_RECEPTOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NUMERO_FACTURA_RECEPTOR,String)
            End If
            If (RUC_CI_RECEPTOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RUC_CI_RECEPTOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RUC_CI_RECEPTOR,String)
            End If
            If (NOMBRE_RECEPTOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_RECEPTOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(NOMBRE_RECEPTOR,String)
            End If
            If (ACTIVIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACTIVIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ACTIVIDAD,String)
            End If
            If (CONCEPTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONCEPTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CONCEPTO,String)
            End If
            If (TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS,String)
            End If
            If (RAZON_COMPROBANTE_EGRESO_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RAZON_COMPROBANTE_EGRESO_BANCOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RAZON_COMPROBANTE_EGRESO_BANCOS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(VALOR_COMPROBANTE_EGRESO_BANCOS,Decimal)
            If (NUMERO_CHEQUE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUMERO_CHEQUE")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(NUMERO_CHEQUE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ESTADO_COMPROBANTE_EGRESO_BANCO,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ID_PROVINCIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ID_CIUDAD,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ID_PARROQUIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ID_CENTRO_COSTO,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ID_BANCO,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ID_CUENTA_BANCOS,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ID_COMPROBANTE_EGRESO_BANCOS,Long)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_NUMERO_COMPROBANTE_EGRESOBANCOS,Long)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_FECHA_COMPROBANTE_EGRESO_BANCOS,Date)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_VALOR_COMPROBANTE_EGRESO_BANCOS,Decimal)
            If (Original_NUMERO_CHEQUE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NUMERO_CHEQUE")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_NUMERO_CHEQUE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ESTADO_COMPROBANTE_EGRESO_BANCO,Integer)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ID_PROVINCIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ID_CIUDAD,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ID_PARROQUIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ID_CENTRO_COSTO,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ID_BANCO,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_ID_CUENTA_BANCOS,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal NUMERO_COMPROBANTE_EGRESOBANCOS As Long,  _
                    ByVal FECHA_COMPROBANTE_EGRESO_BANCOS As Date,  _
                    ByVal NUMERO_FACTURA_RECEPTOR As String,  _
                    ByVal RUC_CI_RECEPTOR As String,  _
                    ByVal NOMBRE_RECEPTOR As String,  _
                    ByVal ACTIVIDAD As String,  _
                    ByVal CONCEPTO As String,  _
                    ByVal TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS As String,  _
                    ByVal RAZON_COMPROBANTE_EGRESO_BANCOS As String,  _
                    ByVal VALOR_COMPROBANTE_EGRESO_BANCOS As Decimal,  _
                    ByVal NUMERO_CHEQUE As String,  _
                    ByVal ESTADO_COMPROBANTE_EGRESO_BANCO As Integer,  _
                    ByVal ID_PROVINCIAS As Integer,  _
                    ByVal ID_CIUDAD As Integer,  _
                    ByVal ID_PARROQUIAS As Integer,  _
                    ByVal ID_CENTRO_COSTO As Integer,  _
                    ByVal ID_BANCO As Integer,  _
                    ByVal ID_CUENTA_BANCOS As Integer,  _
                    ByVal Original_ID_COMPROBANTE_EGRESO_BANCOS As Long,  _
                    ByVal Original_NUMERO_COMPROBANTE_EGRESOBANCOS As Long,  _
                    ByVal Original_FECHA_COMPROBANTE_EGRESO_BANCOS As Date,  _
                    ByVal Original_VALOR_COMPROBANTE_EGRESO_BANCOS As Decimal,  _
                    ByVal Original_NUMERO_CHEQUE As String,  _
                    ByVal Original_ESTADO_COMPROBANTE_EGRESO_BANCO As Integer,  _
                    ByVal Original_ID_PROVINCIAS As Integer,  _
                    ByVal Original_ID_CIUDAD As Integer,  _
                    ByVal Original_ID_PARROQUIAS As Integer,  _
                    ByVal Original_ID_CENTRO_COSTO As Integer,  _
                    ByVal Original_ID_BANCO As Integer,  _
                    ByVal Original_ID_CUENTA_BANCOS As Integer) As Integer
            Return Me.Update(Original_ID_COMPROBANTE_EGRESO_BANCOS, NUMERO_COMPROBANTE_EGRESOBANCOS, FECHA_COMPROBANTE_EGRESO_BANCOS, NUMERO_FACTURA_RECEPTOR, RUC_CI_RECEPTOR, NOMBRE_RECEPTOR, ACTIVIDAD, CONCEPTO, TIPO_PAGO_COMPROBANTE_EGRESO_BANCOS, RAZON_COMPROBANTE_EGRESO_BANCOS, VALOR_COMPROBANTE_EGRESO_BANCOS, NUMERO_CHEQUE, ESTADO_COMPROBANTE_EGRESO_BANCO, ID_PROVINCIAS, ID_CIUDAD, ID_PARROQUIAS, ID_CENTRO_COSTO, ID_BANCO, ID_CUENTA_BANCOS, Original_ID_COMPROBANTE_EGRESO_BANCOS, Original_NUMERO_COMPROBANTE_EGRESOBANCOS, Original_FECHA_COMPROBANTE_EGRESO_BANCOS, Original_VALOR_COMPROBANTE_EGRESO_BANCOS, Original_NUMERO_CHEQUE, Original_ESTADO_COMPROBANTE_EGRESO_BANCO, Original_ID_PROVINCIAS, Original_ID_CIUDAD, Original_ID_PARROQUIAS, Original_ID_CENTRO_COSTO, Original_ID_BANCO, Original_ID_CUENTA_BANCOS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CHEQUES_EMITIDOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CHEQUES_EMITIDOS"
            tableMapping.ColumnMappings.Add("ID_CHEQUE_EMITIDO", "ID_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("FECHA_EMISION_CHEQUE_EMITIDO", "FECHA_EMISION_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("BANCO_CHEQUE_EMITIDO", "BANCO_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("CTA_CTE_CHEQUE_EMITIDO", "CTA_CTE_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("NUMERO_CHEQUE_EMITIDO", "NUMERO_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("BENEFICIARIO_CHEQUE_EMITIDO", "BENEFICIARIO_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("VALOR_CHEQUE_EMITIDO", "VALOR_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("ESTADO_CHEQUE_EMITIDO", "ESTADO_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("FECHA_COBRO_CHEQUE_EMITIDO", "FECHA_COBRO_CHEQUE_EMITIDO")
            tableMapping.ColumnMappings.Add("ID_COMPROBANTE_EGRESO_BANCOS", "ID_COMPROBANTE_EGRESO_BANCOS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CHEQUES_EMITIDOS] WHERE (([ID_CHEQUE_EMITIDO] = @Original_ID_C"& _ 
                "HEQUE_EMITIDO) AND ([FECHA_EMISION_CHEQUE_EMITIDO] = @Original_FECHA_EMISION_CHE"& _ 
                "QUE_EMITIDO) AND ([CTA_CTE_CHEQUE_EMITIDO] = @Original_CTA_CTE_CHEQUE_EMITIDO) A"& _ 
                "ND ([NUMERO_CHEQUE_EMITIDO] = @Original_NUMERO_CHEQUE_EMITIDO) AND ([VALOR_CHEQU"& _ 
                "E_EMITIDO] = @Original_VALOR_CHEQUE_EMITIDO) AND ([ESTADO_CHEQUE_EMITIDO] = @Ori"& _ 
                "ginal_ESTADO_CHEQUE_EMITIDO) AND ((@IsNull_FECHA_COBRO_CHEQUE_EMITIDO = 1 AND [F"& _ 
                "ECHA_COBRO_CHEQUE_EMITIDO] IS NULL) OR ([FECHA_COBRO_CHEQUE_EMITIDO] = @Original"& _ 
                "_FECHA_COBRO_CHEQUE_EMITIDO)) AND ([ID_COMPROBANTE_EGRESO_BANCOS] = @Original_ID"& _ 
                "_COMPROBANTE_EGRESO_BANCOS))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_EMISION_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_EMISION_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CTA_CTE_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_CTE_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CHEQUES_EMITIDOS] ([ID_CHEQUE_EMITIDO], [FECHA_EMISION_CHEQUE_"& _ 
                "EMITIDO], [BANCO_CHEQUE_EMITIDO], [CTA_CTE_CHEQUE_EMITIDO], [NUMERO_CHEQUE_EMITI"& _ 
                "DO], [BENEFICIARIO_CHEQUE_EMITIDO], [VALOR_CHEQUE_EMITIDO], [ESTADO_CHEQUE_EMITI"& _ 
                "DO], [FECHA_COBRO_CHEQUE_EMITIDO], [ID_COMPROBANTE_EGRESO_BANCOS]) VALUES (@ID_C"& _ 
                "HEQUE_EMITIDO, @FECHA_EMISION_CHEQUE_EMITIDO, @BANCO_CHEQUE_EMITIDO, @CTA_CTE_CH"& _ 
                "EQUE_EMITIDO, @NUMERO_CHEQUE_EMITIDO, @BENEFICIARIO_CHEQUE_EMITIDO, @VALOR_CHEQU"& _ 
                "E_EMITIDO, @ESTADO_CHEQUE_EMITIDO, @FECHA_COBRO_CHEQUE_EMITIDO, @ID_COMPROBANTE_"& _ 
                "EGRESO_BANCOS);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CHEQUE_EMITIDO, FECHA_EMISION_CHEQUE_EMITIDO, BANCO_C"& _ 
                "HEQUE_EMITIDO, CTA_CTE_CHEQUE_EMITIDO, NUMERO_CHEQUE_EMITIDO, BENEFICIARIO_CHEQU"& _ 
                "E_EMITIDO, VALOR_CHEQUE_EMITIDO, ESTADO_CHEQUE_EMITIDO, FECHA_COBRO_CHEQUE_EMITI"& _ 
                "DO, ID_COMPROBANTE_EGRESO_BANCOS FROM CHEQUES_EMITIDOS WHERE (ID_CHEQUE_EMITIDO "& _ 
                "= @ID_CHEQUE_EMITIDO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_EMISION_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_EMISION_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANCO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANCO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_CTE_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_CTE_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BENEFICIARIO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BENEFICIARIO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CHEQUES_EMITIDOS] SET [ID_CHEQUE_EMITIDO] = @ID_CHEQUE_EMITIDO, [FE"& _ 
                "CHA_EMISION_CHEQUE_EMITIDO] = @FECHA_EMISION_CHEQUE_EMITIDO, [BANCO_CHEQUE_EMITI"& _ 
                "DO] = @BANCO_CHEQUE_EMITIDO, [CTA_CTE_CHEQUE_EMITIDO] = @CTA_CTE_CHEQUE_EMITIDO,"& _ 
                " [NUMERO_CHEQUE_EMITIDO] = @NUMERO_CHEQUE_EMITIDO, [BENEFICIARIO_CHEQUE_EMITIDO]"& _ 
                " = @BENEFICIARIO_CHEQUE_EMITIDO, [VALOR_CHEQUE_EMITIDO] = @VALOR_CHEQUE_EMITIDO,"& _ 
                " [ESTADO_CHEQUE_EMITIDO] = @ESTADO_CHEQUE_EMITIDO, [FECHA_COBRO_CHEQUE_EMITIDO] "& _ 
                "= @FECHA_COBRO_CHEQUE_EMITIDO, [ID_COMPROBANTE_EGRESO_BANCOS] = @ID_COMPROBANTE_"& _ 
                "EGRESO_BANCOS WHERE (([ID_CHEQUE_EMITIDO] = @Original_ID_CHEQUE_EMITIDO) AND ([F"& _ 
                "ECHA_EMISION_CHEQUE_EMITIDO] = @Original_FECHA_EMISION_CHEQUE_EMITIDO) AND ([CTA"& _ 
                "_CTE_CHEQUE_EMITIDO] = @Original_CTA_CTE_CHEQUE_EMITIDO) AND ([NUMERO_CHEQUE_EMI"& _ 
                "TIDO] = @Original_NUMERO_CHEQUE_EMITIDO) AND ([VALOR_CHEQUE_EMITIDO] = @Original"& _ 
                "_VALOR_CHEQUE_EMITIDO) AND ([ESTADO_CHEQUE_EMITIDO] = @Original_ESTADO_CHEQUE_EM"& _ 
                "ITIDO) AND ((@IsNull_FECHA_COBRO_CHEQUE_EMITIDO = 1 AND [FECHA_COBRO_CHEQUE_EMIT"& _ 
                "IDO] IS NULL) OR ([FECHA_COBRO_CHEQUE_EMITIDO] = @Original_FECHA_COBRO_CHEQUE_EM"& _ 
                "ITIDO)) AND ([ID_COMPROBANTE_EGRESO_BANCOS] = @Original_ID_COMPROBANTE_EGRESO_BA"& _ 
                "NCOS));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CHEQUE_EMITIDO, FECHA_EMISION_CHEQUE_EMITIDO, BANCO_CHEQUE_EM"& _ 
                "ITIDO, CTA_CTE_CHEQUE_EMITIDO, NUMERO_CHEQUE_EMITIDO, BENEFICIARIO_CHEQUE_EMITID"& _ 
                "O, VALOR_CHEQUE_EMITIDO, ESTADO_CHEQUE_EMITIDO, FECHA_COBRO_CHEQUE_EMITIDO, ID_C"& _ 
                "OMPROBANTE_EGRESO_BANCOS FROM CHEQUES_EMITIDOS WHERE (ID_CHEQUE_EMITIDO = @ID_CH"& _ 
                "EQUE_EMITIDO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_EMISION_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_EMISION_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BANCO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BANCO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_CTE_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_CTE_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BENEFICIARIO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BENEFICIARIO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_EMISION_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_EMISION_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CTA_CTE_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_CTE_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_COBRO_CHEQUE_EMITIDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_COMPROBANTE_EGRESO_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_CHEQUE_EMITIDO, FECHA_EMISION_CHEQUE_EMITIDO, BANCO_CHEQUE_EMITIDO, CTA"& _ 
                "_CTE_CHEQUE_EMITIDO, NUMERO_CHEQUE_EMITIDO, BENEFICIARIO_CHEQUE_EMITIDO, VALOR_C"& _ 
                "HEQUE_EMITIDO, ESTADO_CHEQUE_EMITIDO, FECHA_COBRO_CHEQUE_EMITIDO, ID_COMPROBANTE"& _ 
                "_EGRESO_BANCOS FROM dbo.CHEQUES_EMITIDOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetComprobanteEgresoBancoMachala.CHEQUES_EMITIDOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetComprobanteEgresoBancoMachala.CHEQUES_EMITIDOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetComprobanteEgresoBancoMachala.CHEQUES_EMITIDOSDataTable = New DataSetComprobanteEgresoBancoMachala.CHEQUES_EMITIDOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetComprobanteEgresoBancoMachala.CHEQUES_EMITIDOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetComprobanteEgresoBancoMachala) As Integer
            Return Me.Adapter.Update(dataSet, "CHEQUES_EMITIDOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_CHEQUE_EMITIDO As Long, ByVal Original_FECHA_EMISION_CHEQUE_EMITIDO As Date, ByVal Original_CTA_CTE_CHEQUE_EMITIDO As String, ByVal Original_NUMERO_CHEQUE_EMITIDO As String, ByVal Original_VALOR_CHEQUE_EMITIDO As Decimal, ByVal Original_ESTADO_CHEQUE_EMITIDO As Integer, ByVal Original_FECHA_COBRO_CHEQUE_EMITIDO As Global.System.Nullable(Of Date), ByVal Original_ID_COMPROBANTE_EGRESO_BANCOS As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_CHEQUE_EMITIDO,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA_EMISION_CHEQUE_EMITIDO,Date)
            If (Original_CTA_CTE_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CTA_CTE_CHEQUE_EMITIDO")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CTA_CTE_CHEQUE_EMITIDO,String)
            End If
            If (Original_NUMERO_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NUMERO_CHEQUE_EMITIDO")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_NUMERO_CHEQUE_EMITIDO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_VALOR_CHEQUE_EMITIDO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ESTADO_CHEQUE_EMITIDO,Integer)
            If (Original_FECHA_COBRO_CHEQUE_EMITIDO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FECHA_COBRO_CHEQUE_EMITIDO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ID_COMPROBANTE_EGRESO_BANCOS,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_CHEQUE_EMITIDO As Long, ByVal FECHA_EMISION_CHEQUE_EMITIDO As Date, ByVal BANCO_CHEQUE_EMITIDO As String, ByVal CTA_CTE_CHEQUE_EMITIDO As String, ByVal NUMERO_CHEQUE_EMITIDO As String, ByVal BENEFICIARIO_CHEQUE_EMITIDO As String, ByVal VALOR_CHEQUE_EMITIDO As Decimal, ByVal ESTADO_CHEQUE_EMITIDO As Integer, ByVal FECHA_COBRO_CHEQUE_EMITIDO As Global.System.Nullable(Of Date), ByVal ID_COMPROBANTE_EGRESO_BANCOS As Long) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_CHEQUE_EMITIDO,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA_EMISION_CHEQUE_EMITIDO,Date)
            If (BANCO_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BANCO_CHEQUE_EMITIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BANCO_CHEQUE_EMITIDO,String)
            End If
            If (CTA_CTE_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_CTE_CHEQUE_EMITIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CTA_CTE_CHEQUE_EMITIDO,String)
            End If
            If (NUMERO_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUMERO_CHEQUE_EMITIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NUMERO_CHEQUE_EMITIDO,String)
            End If
            If (BENEFICIARIO_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BENEFICIARIO_CHEQUE_EMITIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(BENEFICIARIO_CHEQUE_EMITIDO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(VALOR_CHEQUE_EMITIDO,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ESTADO_CHEQUE_EMITIDO,Integer)
            If (FECHA_COBRO_CHEQUE_EMITIDO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FECHA_COBRO_CHEQUE_EMITIDO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(ID_COMPROBANTE_EGRESO_BANCOS,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_CHEQUE_EMITIDO As Long,  _
                    ByVal FECHA_EMISION_CHEQUE_EMITIDO As Date,  _
                    ByVal BANCO_CHEQUE_EMITIDO As String,  _
                    ByVal CTA_CTE_CHEQUE_EMITIDO As String,  _
                    ByVal NUMERO_CHEQUE_EMITIDO As String,  _
                    ByVal BENEFICIARIO_CHEQUE_EMITIDO As String,  _
                    ByVal VALOR_CHEQUE_EMITIDO As Decimal,  _
                    ByVal ESTADO_CHEQUE_EMITIDO As Integer,  _
                    ByVal FECHA_COBRO_CHEQUE_EMITIDO As Global.System.Nullable(Of Date),  _
                    ByVal ID_COMPROBANTE_EGRESO_BANCOS As Long,  _
                    ByVal Original_ID_CHEQUE_EMITIDO As Long,  _
                    ByVal Original_FECHA_EMISION_CHEQUE_EMITIDO As Date,  _
                    ByVal Original_CTA_CTE_CHEQUE_EMITIDO As String,  _
                    ByVal Original_NUMERO_CHEQUE_EMITIDO As String,  _
                    ByVal Original_VALOR_CHEQUE_EMITIDO As Decimal,  _
                    ByVal Original_ESTADO_CHEQUE_EMITIDO As Integer,  _
                    ByVal Original_FECHA_COBRO_CHEQUE_EMITIDO As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID_COMPROBANTE_EGRESO_BANCOS As Long) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_CHEQUE_EMITIDO,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA_EMISION_CHEQUE_EMITIDO,Date)
            If (BANCO_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BANCO_CHEQUE_EMITIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BANCO_CHEQUE_EMITIDO,String)
            End If
            If (CTA_CTE_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_CTE_CHEQUE_EMITIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CTA_CTE_CHEQUE_EMITIDO,String)
            End If
            If (NUMERO_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUMERO_CHEQUE_EMITIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(NUMERO_CHEQUE_EMITIDO,String)
            End If
            If (BENEFICIARIO_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BENEFICIARIO_CHEQUE_EMITIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(BENEFICIARIO_CHEQUE_EMITIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(VALOR_CHEQUE_EMITIDO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ESTADO_CHEQUE_EMITIDO,Integer)
            If (FECHA_COBRO_CHEQUE_EMITIDO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(FECHA_COBRO_CHEQUE_EMITIDO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ID_COMPROBANTE_EGRESO_BANCOS,Long)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID_CHEQUE_EMITIDO,Long)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FECHA_EMISION_CHEQUE_EMITIDO,Date)
            If (Original_CTA_CTE_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CTA_CTE_CHEQUE_EMITIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CTA_CTE_CHEQUE_EMITIDO,String)
            End If
            If (Original_NUMERO_CHEQUE_EMITIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NUMERO_CHEQUE_EMITIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_NUMERO_CHEQUE_EMITIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_VALOR_CHEQUE_EMITIDO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ESTADO_CHEQUE_EMITIDO,Integer)
            If (Original_FECHA_COBRO_CHEQUE_EMITIDO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FECHA_COBRO_CHEQUE_EMITIDO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ID_COMPROBANTE_EGRESO_BANCOS,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FECHA_EMISION_CHEQUE_EMITIDO As Date,  _
                    ByVal BANCO_CHEQUE_EMITIDO As String,  _
                    ByVal CTA_CTE_CHEQUE_EMITIDO As String,  _
                    ByVal NUMERO_CHEQUE_EMITIDO As String,  _
                    ByVal BENEFICIARIO_CHEQUE_EMITIDO As String,  _
                    ByVal VALOR_CHEQUE_EMITIDO As Decimal,  _
                    ByVal ESTADO_CHEQUE_EMITIDO As Integer,  _
                    ByVal FECHA_COBRO_CHEQUE_EMITIDO As Global.System.Nullable(Of Date),  _
                    ByVal ID_COMPROBANTE_EGRESO_BANCOS As Long,  _
                    ByVal Original_ID_CHEQUE_EMITIDO As Long,  _
                    ByVal Original_FECHA_EMISION_CHEQUE_EMITIDO As Date,  _
                    ByVal Original_CTA_CTE_CHEQUE_EMITIDO As String,  _
                    ByVal Original_NUMERO_CHEQUE_EMITIDO As String,  _
                    ByVal Original_VALOR_CHEQUE_EMITIDO As Decimal,  _
                    ByVal Original_ESTADO_CHEQUE_EMITIDO As Integer,  _
                    ByVal Original_FECHA_COBRO_CHEQUE_EMITIDO As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID_COMPROBANTE_EGRESO_BANCOS As Long) As Integer
            Return Me.Update(Original_ID_CHEQUE_EMITIDO, FECHA_EMISION_CHEQUE_EMITIDO, BANCO_CHEQUE_EMITIDO, CTA_CTE_CHEQUE_EMITIDO, NUMERO_CHEQUE_EMITIDO, BENEFICIARIO_CHEQUE_EMITIDO, VALOR_CHEQUE_EMITIDO, ESTADO_CHEQUE_EMITIDO, FECHA_COBRO_CHEQUE_EMITIDO, ID_COMPROBANTE_EGRESO_BANCOS, Original_ID_CHEQUE_EMITIDO, Original_FECHA_EMISION_CHEQUE_EMITIDO, Original_CTA_CTE_CHEQUE_EMITIDO, Original_NUMERO_CHEQUE_EMITIDO, Original_VALOR_CHEQUE_EMITIDO, Original_ESTADO_CHEQUE_EMITIDO, Original_FECHA_COBRO_CHEQUE_EMITIDO, Original_ID_COMPROBANTE_EGRESO_BANCOS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CUENTAS_BANCOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CUENTAS_BANCOS"
            tableMapping.ColumnMappings.Add("ID_CUENTA_BANCOS", "ID_CUENTA_BANCOS")
            tableMapping.ColumnMappings.Add("NUMERO_CUENTA_BANCOS", "NUMERO_CUENTA_BANCOS")
            tableMapping.ColumnMappings.Add("MONTO_CUENTA_BANCOS", "MONTO_CUENTA_BANCOS")
            tableMapping.ColumnMappings.Add("TIPO_CUENTA_BANCOS", "TIPO_CUENTA_BANCOS")
            tableMapping.ColumnMappings.Add("ESTADO_CUENTA_BANCOS", "ESTADO_CUENTA_BANCOS")
            tableMapping.ColumnMappings.Add("ID_BANCO", "ID_BANCO")
            tableMapping.ColumnMappings.Add("CODIGO_PLAN_CUENTAS", "CODIGO_PLAN_CUENTAS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CUENTAS_BANCOS] WHERE (([ID_CUENTA_BANCOS] = @Original_ID_CUEN"& _ 
                "TA_BANCOS) AND ([NUMERO_CUENTA_BANCOS] = @Original_NUMERO_CUENTA_BANCOS) AND ([M"& _ 
                "ONTO_CUENTA_BANCOS] = @Original_MONTO_CUENTA_BANCOS) AND ([TIPO_CUENTA_BANCOS] ="& _ 
                " @Original_TIPO_CUENTA_BANCOS) AND ([ESTADO_CUENTA_BANCOS] = @Original_ESTADO_CU"& _ 
                "ENTA_BANCOS) AND ([ID_BANCO] = @Original_ID_BANCO) AND ((@IsNull_CODIGO_PLAN_CUE"& _ 
                "NTAS = 1 AND [CODIGO_PLAN_CUENTAS] IS NULL) OR ([CODIGO_PLAN_CUENTAS] = @Origina"& _ 
                "l_CODIGO_PLAN_CUENTAS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_CUENTA_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MONTO_CUENTA_BANCOS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MONTO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIPO_CUENTA_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BANCO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CODIGO_PLAN_CUENTAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_PLAN_CUENTAS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CODIGO_PLAN_CUENTAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_PLAN_CUENTAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CUENTAS_BANCOS] ([ID_CUENTA_BANCOS], [NUMERO_CUENTA_BANCOS], ["& _ 
                "MONTO_CUENTA_BANCOS], [TIPO_CUENTA_BANCOS], [ESTADO_CUENTA_BANCOS], [ID_BANCO], "& _ 
                "[CODIGO_PLAN_CUENTAS]) VALUES (@ID_CUENTA_BANCOS, @NUMERO_CUENTA_BANCOS, @MONTO_"& _ 
                "CUENTA_BANCOS, @TIPO_CUENTA_BANCOS, @ESTADO_CUENTA_BANCOS, @ID_BANCO, @CODIGO_PL"& _ 
                "AN_CUENTAS);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CUENTA_BANCOS, NUMERO_CUENTA_BANCOS, MONTO_CUENTA_BANCOS"& _ 
                ", TIPO_CUENTA_BANCOS, ESTADO_CUENTA_BANCOS, ID_BANCO, CODIGO_PLAN_CUENTAS FROM C"& _ 
                "UENTAS_BANCOS WHERE (ID_CUENTA_BANCOS = @ID_CUENTA_BANCOS)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_CUENTA_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MONTO_CUENTA_BANCOS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MONTO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_CUENTA_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_PLAN_CUENTAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_PLAN_CUENTAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CUENTAS_BANCOS] SET [ID_CUENTA_BANCOS] = @ID_CUENTA_BANCOS, [NUMERO"& _ 
                "_CUENTA_BANCOS] = @NUMERO_CUENTA_BANCOS, [MONTO_CUENTA_BANCOS] = @MONTO_CUENTA_B"& _ 
                "ANCOS, [TIPO_CUENTA_BANCOS] = @TIPO_CUENTA_BANCOS, [ESTADO_CUENTA_BANCOS] = @EST"& _ 
                "ADO_CUENTA_BANCOS, [ID_BANCO] = @ID_BANCO, [CODIGO_PLAN_CUENTAS] = @CODIGO_PLAN_"& _ 
                "CUENTAS WHERE (([ID_CUENTA_BANCOS] = @Original_ID_CUENTA_BANCOS) AND ([NUMERO_CU"& _ 
                "ENTA_BANCOS] = @Original_NUMERO_CUENTA_BANCOS) AND ([MONTO_CUENTA_BANCOS] = @Ori"& _ 
                "ginal_MONTO_CUENTA_BANCOS) AND ([TIPO_CUENTA_BANCOS] = @Original_TIPO_CUENTA_BAN"& _ 
                "COS) AND ([ESTADO_CUENTA_BANCOS] = @Original_ESTADO_CUENTA_BANCOS) AND ([ID_BANC"& _ 
                "O] = @Original_ID_BANCO) AND ((@IsNull_CODIGO_PLAN_CUENTAS = 1 AND [CODIGO_PLAN_"& _ 
                "CUENTAS] IS NULL) OR ([CODIGO_PLAN_CUENTAS] = @Original_CODIGO_PLAN_CUENTAS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CUENTA_BANCOS, NUMERO_CUENTA_BANCOS, MONTO_CUENTA_BANCOS, TIPO_CUENTA"& _ 
                "_BANCOS, ESTADO_CUENTA_BANCOS, ID_BANCO, CODIGO_PLAN_CUENTAS FROM CUENTAS_BANCOS"& _ 
                " WHERE (ID_CUENTA_BANCOS = @ID_CUENTA_BANCOS)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_CUENTA_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MONTO_CUENTA_BANCOS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MONTO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_CUENTA_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_PLAN_CUENTAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_PLAN_CUENTAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_CUENTA_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MONTO_CUENTA_BANCOS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MONTO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIPO_CUENTA_BANCOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_CUENTA_BANCOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CUENTA_BANCOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_BANCO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_BANCO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CODIGO_PLAN_CUENTAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_PLAN_CUENTAS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CODIGO_PLAN_CUENTAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_PLAN_CUENTAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_CUENTA_BANCOS, NUMERO_CUENTA_BANCOS, MONTO_CUENTA_BANCOS, TIPO_CUENTA_B"& _ 
                "ANCOS, ESTADO_CUENTA_BANCOS, ID_BANCO, CODIGO_PLAN_CUENTAS FROM dbo.CUENTAS_BANC"& _ 
                "OS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetComprobanteEgresoBancoMachala.CUENTAS_BANCOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetComprobanteEgresoBancoMachala.CUENTAS_BANCOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetComprobanteEgresoBancoMachala.CUENTAS_BANCOSDataTable = New DataSetComprobanteEgresoBancoMachala.CUENTAS_BANCOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetComprobanteEgresoBancoMachala.CUENTAS_BANCOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetComprobanteEgresoBancoMachala) As Integer
            Return Me.Adapter.Update(dataSet, "CUENTAS_BANCOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_CUENTA_BANCOS As Integer, ByVal Original_NUMERO_CUENTA_BANCOS As String, ByVal Original_MONTO_CUENTA_BANCOS As Decimal, ByVal Original_TIPO_CUENTA_BANCOS As String, ByVal Original_ESTADO_CUENTA_BANCOS As Integer, ByVal Original_ID_BANCO As Integer, ByVal Original_CODIGO_PLAN_CUENTAS As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_CUENTA_BANCOS,Integer)
            If (Original_NUMERO_CUENTA_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NUMERO_CUENTA_BANCOS")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NUMERO_CUENTA_BANCOS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MONTO_CUENTA_BANCOS,Decimal)
            If (Original_TIPO_CUENTA_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIPO_CUENTA_BANCOS")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TIPO_CUENTA_BANCOS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ESTADO_CUENTA_BANCOS,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_BANCO,Integer)
            If (Original_CODIGO_PLAN_CUENTAS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CODIGO_PLAN_CUENTAS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_CUENTA_BANCOS As Integer, ByVal NUMERO_CUENTA_BANCOS As String, ByVal MONTO_CUENTA_BANCOS As Decimal, ByVal TIPO_CUENTA_BANCOS As String, ByVal ESTADO_CUENTA_BANCOS As Integer, ByVal ID_BANCO As Integer, ByVal CODIGO_PLAN_CUENTAS As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_CUENTA_BANCOS,Integer)
            If (NUMERO_CUENTA_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUMERO_CUENTA_BANCOS")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NUMERO_CUENTA_BANCOS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MONTO_CUENTA_BANCOS,Decimal)
            If (TIPO_CUENTA_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_CUENTA_BANCOS")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TIPO_CUENTA_BANCOS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ESTADO_CUENTA_BANCOS,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_BANCO,Integer)
            If (CODIGO_PLAN_CUENTAS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CODIGO_PLAN_CUENTAS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_CUENTA_BANCOS As Integer, ByVal NUMERO_CUENTA_BANCOS As String, ByVal MONTO_CUENTA_BANCOS As Decimal, ByVal TIPO_CUENTA_BANCOS As String, ByVal ESTADO_CUENTA_BANCOS As Integer, ByVal ID_BANCO As Integer, ByVal CODIGO_PLAN_CUENTAS As String, ByVal Original_ID_CUENTA_BANCOS As Integer, ByVal Original_NUMERO_CUENTA_BANCOS As String, ByVal Original_MONTO_CUENTA_BANCOS As Decimal, ByVal Original_TIPO_CUENTA_BANCOS As String, ByVal Original_ESTADO_CUENTA_BANCOS As Integer, ByVal Original_ID_BANCO As Integer, ByVal Original_CODIGO_PLAN_CUENTAS As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_CUENTA_BANCOS,Integer)
            If (NUMERO_CUENTA_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUMERO_CUENTA_BANCOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NUMERO_CUENTA_BANCOS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MONTO_CUENTA_BANCOS,Decimal)
            If (TIPO_CUENTA_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_CUENTA_BANCOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TIPO_CUENTA_BANCOS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ESTADO_CUENTA_BANCOS,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_BANCO,Integer)
            If (CODIGO_PLAN_CUENTAS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CODIGO_PLAN_CUENTAS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_CUENTA_BANCOS,Integer)
            If (Original_NUMERO_CUENTA_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NUMERO_CUENTA_BANCOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_NUMERO_CUENTA_BANCOS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MONTO_CUENTA_BANCOS,Decimal)
            If (Original_TIPO_CUENTA_BANCOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIPO_CUENTA_BANCOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TIPO_CUENTA_BANCOS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ESTADO_CUENTA_BANCOS,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ID_BANCO,Integer)
            If (Original_CODIGO_PLAN_CUENTAS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CODIGO_PLAN_CUENTAS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NUMERO_CUENTA_BANCOS As String, ByVal MONTO_CUENTA_BANCOS As Decimal, ByVal TIPO_CUENTA_BANCOS As String, ByVal ESTADO_CUENTA_BANCOS As Integer, ByVal ID_BANCO As Integer, ByVal CODIGO_PLAN_CUENTAS As String, ByVal Original_ID_CUENTA_BANCOS As Integer, ByVal Original_NUMERO_CUENTA_BANCOS As String, ByVal Original_MONTO_CUENTA_BANCOS As Decimal, ByVal Original_TIPO_CUENTA_BANCOS As String, ByVal Original_ESTADO_CUENTA_BANCOS As Integer, ByVal Original_ID_BANCO As Integer, ByVal Original_CODIGO_PLAN_CUENTAS As String) As Integer
            Return Me.Update(Original_ID_CUENTA_BANCOS, NUMERO_CUENTA_BANCOS, MONTO_CUENTA_BANCOS, TIPO_CUENTA_BANCOS, ESTADO_CUENTA_BANCOS, ID_BANCO, CODIGO_PLAN_CUENTAS, Original_ID_CUENTA_BANCOS, Original_NUMERO_CUENTA_BANCOS, Original_MONTO_CUENTA_BANCOS, Original_TIPO_CUENTA_BANCOS, Original_ESTADO_CUENTA_BANCOS, Original_ID_BANCO, Original_CODIGO_PLAN_CUENTAS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ASIENTOS_LIBRO_DIARIOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ASIENTOS_LIBRO_DIARIO"
            tableMapping.ColumnMappings.Add("ID_ASIENTO", "ID_ASIENTO")
            tableMapping.ColumnMappings.Add("FECHA_ASIENTO", "FECHA_ASIENTO")
            tableMapping.ColumnMappings.Add("CODIGO_CUENTA_ASIENTO", "CODIGO_CUENTA_ASIENTO")
            tableMapping.ColumnMappings.Add("NOMBRE_CUENTA_ASIENTO", "NOMBRE_CUENTA_ASIENTO")
            tableMapping.ColumnMappings.Add("CONCEPTO_ASIENTO", "CONCEPTO_ASIENTO")
            tableMapping.ColumnMappings.Add("DETALLE_TRANSACCION_ASIENTO", "DETALLE_TRANSACCION_ASIENTO")
            tableMapping.ColumnMappings.Add("PROVINCIA_ASIENTO", "PROVINCIA_ASIENTO")
            tableMapping.ColumnMappings.Add("CIUDAD_ASIENTO", "CIUDAD_ASIENTO")
            tableMapping.ColumnMappings.Add("PARROQUIA_ASIENTO", "PARROQUIA_ASIENTO")
            tableMapping.ColumnMappings.Add("CENTRO_COSTO_ASIENTO", "CENTRO_COSTO_ASIENTO")
            tableMapping.ColumnMappings.Add("VALOR_DEBE_ASIENTO", "VALOR_DEBE_ASIENTO")
            tableMapping.ColumnMappings.Add("VALOR_HABER_ASIENTO", "VALOR_HABER_ASIENTO")
            tableMapping.ColumnMappings.Add("NUMERO_REGISTRO_ASIENTO", "NUMERO_REGISTRO_ASIENTO")
            tableMapping.ColumnMappings.Add("DEBE_HABER", "DEBE_HABER")
            tableMapping.ColumnMappings.Add("CONCILIAR_ASIENTO", "CONCILIAR_ASIENTO")
            tableMapping.ColumnMappings.Add("ESTADO_ASIENTO", "ESTADO_ASIENTO")
            tableMapping.ColumnMappings.Add("ID_LIBRO_DIARIO", "ID_LIBRO_DIARIO")
            tableMapping.ColumnMappings.Add("ESTADO_MAYOR", "ESTADO_MAYOR")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ASIENTOS_LIBRO_DIARIO] WHERE (([ID_ASIENTO] = @Original_ID_ASI"& _ 
                "ENTO) AND ([FECHA_ASIENTO] = @Original_FECHA_ASIENTO) AND ((@IsNull_VALOR_DEBE_A"& _ 
                "SIENTO = 1 AND [VALOR_DEBE_ASIENTO] IS NULL) OR ([VALOR_DEBE_ASIENTO] = @Origina"& _ 
                "l_VALOR_DEBE_ASIENTO)) AND ((@IsNull_VALOR_HABER_ASIENTO = 1 AND [VALOR_HABER_AS"& _ 
                "IENTO] IS NULL) OR ([VALOR_HABER_ASIENTO] = @Original_VALOR_HABER_ASIENTO)) AND "& _ 
                "([NUMERO_REGISTRO_ASIENTO] = @Original_NUMERO_REGISTRO_ASIENTO) AND ([DEBE_HABER"& _ 
                "] = @Original_DEBE_HABER) AND ((@IsNull_CONCILIAR_ASIENTO = 1 AND [CONCILIAR_ASI"& _ 
                "ENTO] IS NULL) OR ([CONCILIAR_ASIENTO] = @Original_CONCILIAR_ASIENTO)) AND ([EST"& _ 
                "ADO_ASIENTO] = @Original_ESTADO_ASIENTO) AND ([ID_LIBRO_DIARIO] = @Original_ID_L"& _ 
                "IBRO_DIARIO) AND ((@IsNull_ESTADO_MAYOR = 1 AND [ESTADO_MAYOR] IS NULL) OR ([EST"& _ 
                "ADO_MAYOR] = @Original_ESTADO_MAYOR)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ASIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_REGISTRO_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_REGISTRO_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEBE_HABER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEBE_HABER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ESTADO_MAYOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_MAYOR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_MAYOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_MAYOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ASIENTOS_LIBRO_DIARIO] ([ID_ASIENTO], [FECHA_ASIENTO], [CODIGO"& _ 
                "_CUENTA_ASIENTO], [NOMBRE_CUENTA_ASIENTO], [CONCEPTO_ASIENTO], [DETALLE_TRANSACC"& _ 
                "ION_ASIENTO], [PROVINCIA_ASIENTO], [CIUDAD_ASIENTO], [PARROQUIA_ASIENTO], [CENTR"& _ 
                "O_COSTO_ASIENTO], [VALOR_DEBE_ASIENTO], [VALOR_HABER_ASIENTO], [NUMERO_REGISTRO_"& _ 
                "ASIENTO], [DEBE_HABER], [CONCILIAR_ASIENTO], [ESTADO_ASIENTO], [ID_LIBRO_DIARIO]"& _ 
                ", [ESTADO_MAYOR]) VALUES (@ID_ASIENTO, @FECHA_ASIENTO, @CODIGO_CUENTA_ASIENTO, @"& _ 
                "NOMBRE_CUENTA_ASIENTO, @CONCEPTO_ASIENTO, @DETALLE_TRANSACCION_ASIENTO, @PROVINC"& _ 
                "IA_ASIENTO, @CIUDAD_ASIENTO, @PARROQUIA_ASIENTO, @CENTRO_COSTO_ASIENTO, @VALOR_D"& _ 
                "EBE_ASIENTO, @VALOR_HABER_ASIENTO, @NUMERO_REGISTRO_ASIENTO, @DEBE_HABER, @CONCI"& _ 
                "LIAR_ASIENTO, @ESTADO_ASIENTO, @ID_LIBRO_DIARIO, @ESTADO_MAYOR);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_ASIE"& _ 
                "NTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CUENTA_ASIENTO, CONCEPTO_ASIEN"& _ 
                "TO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, CIUDAD_ASIENTO, PARROQUIA_AS"& _ 
                "IENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VALOR_HABER_ASIENTO, NUMERO_REG"& _ 
                "ISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO_ASIENTO, ID_LIBRO_DIARIO, E"& _ 
                "STADO_MAYOR FROM ASIENTOS_LIBRO_DIARIO WHERE (ID_ASIENTO = @ID_ASIENTO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ASIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_CUENTA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_CUENTA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_CUENTA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_CUENTA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCEPTO_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCEPTO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETALLE_TRANSACCION_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETALLE_TRANSACCION_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCIA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCIA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CIUDAD_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CIUDAD_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARROQUIA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARROQUIA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CENTRO_COSTO_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENTRO_COSTO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_REGISTRO_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_REGISTRO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEBE_HABER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEBE_HABER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_MAYOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_MAYOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ASIENTOS_LIBRO_DIARIO] SET [ID_ASIENTO] = @ID_ASIENTO, [FECHA_ASIEN"& _ 
                "TO] = @FECHA_ASIENTO, [CODIGO_CUENTA_ASIENTO] = @CODIGO_CUENTA_ASIENTO, [NOMBRE_"& _ 
                "CUENTA_ASIENTO] = @NOMBRE_CUENTA_ASIENTO, [CONCEPTO_ASIENTO] = @CONCEPTO_ASIENTO"& _ 
                ", [DETALLE_TRANSACCION_ASIENTO] = @DETALLE_TRANSACCION_ASIENTO, [PROVINCIA_ASIEN"& _ 
                "TO] = @PROVINCIA_ASIENTO, [CIUDAD_ASIENTO] = @CIUDAD_ASIENTO, [PARROQUIA_ASIENTO"& _ 
                "] = @PARROQUIA_ASIENTO, [CENTRO_COSTO_ASIENTO] = @CENTRO_COSTO_ASIENTO, [VALOR_D"& _ 
                "EBE_ASIENTO] = @VALOR_DEBE_ASIENTO, [VALOR_HABER_ASIENTO] = @VALOR_HABER_ASIENTO"& _ 
                ", [NUMERO_REGISTRO_ASIENTO] = @NUMERO_REGISTRO_ASIENTO, [DEBE_HABER] = @DEBE_HAB"& _ 
                "ER, [CONCILIAR_ASIENTO] = @CONCILIAR_ASIENTO, [ESTADO_ASIENTO] = @ESTADO_ASIENTO"& _ 
                ", [ID_LIBRO_DIARIO] = @ID_LIBRO_DIARIO, [ESTADO_MAYOR] = @ESTADO_MAYOR WHERE ((["& _ 
                "ID_ASIENTO] = @Original_ID_ASIENTO) AND ([FECHA_ASIENTO] = @Original_FECHA_ASIEN"& _ 
                "TO) AND ((@IsNull_VALOR_DEBE_ASIENTO = 1 AND [VALOR_DEBE_ASIENTO] IS NULL) OR (["& _ 
                "VALOR_DEBE_ASIENTO] = @Original_VALOR_DEBE_ASIENTO)) AND ((@IsNull_VALOR_HABER_A"& _ 
                "SIENTO = 1 AND [VALOR_HABER_ASIENTO] IS NULL) OR ([VALOR_HABER_ASIENTO] = @Origi"& _ 
                "nal_VALOR_HABER_ASIENTO)) AND ([NUMERO_REGISTRO_ASIENTO] = @Original_NUMERO_REGI"& _ 
                "STRO_ASIENTO) AND ([DEBE_HABER] = @Original_DEBE_HABER) AND ((@IsNull_CONCILIAR_"& _ 
                "ASIENTO = 1 AND [CONCILIAR_ASIENTO] IS NULL) OR ([CONCILIAR_ASIENTO] = @Original"& _ 
                "_CONCILIAR_ASIENTO)) AND ([ESTADO_ASIENTO] = @Original_ESTADO_ASIENTO) AND ([ID_"& _ 
                "LIBRO_DIARIO] = @Original_ID_LIBRO_DIARIO) AND ((@IsNull_ESTADO_MAYOR = 1 AND [E"& _ 
                "STADO_MAYOR] IS NULL) OR ([ESTADO_MAYOR] = @Original_ESTADO_MAYOR)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID"& _ 
                "_ASIENTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CUENTA_ASIENTO, CONCEPTO_"& _ 
                "ASIENTO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, CIUDAD_ASIENTO, PARROQU"& _ 
                "IA_ASIENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VALOR_HABER_ASIENTO, NUMER"& _ 
                "O_REGISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO_ASIENTO, ID_LIBRO_DIAR"& _ 
                "IO, ESTADO_MAYOR FROM ASIENTOS_LIBRO_DIARIO WHERE (ID_ASIENTO = @ID_ASIENTO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ASIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_CUENTA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_CUENTA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_CUENTA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_CUENTA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCEPTO_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCEPTO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETALLE_TRANSACCION_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETALLE_TRANSACCION_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCIA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCIA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CIUDAD_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CIUDAD_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARROQUIA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARROQUIA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CENTRO_COSTO_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENTRO_COSTO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_REGISTRO_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_REGISTRO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEBE_HABER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEBE_HABER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_MAYOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_MAYOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ASIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_REGISTRO_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_REGISTRO_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEBE_HABER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEBE_HABER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ESTADO_MAYOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_MAYOR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_MAYOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_MAYOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ASIENTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CUENTA_ASIENTO, C"& _ 
                "ONCEPTO_ASIENTO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, CIUDAD_ASIENTO,"& _ 
                " PARROQUIA_ASIENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VALOR_HABER_ASIENT"& _ 
                "O, NUMERO_REGISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO_ASIENTO, ID_LI"& _ 
                "BRO_DIARIO, ESTADO_MAYOR FROM dbo.ASIENTOS_LIBRO_DIARIO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetComprobanteEgresoBancoMachala.ASIENTOS_LIBRO_DIARIODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetComprobanteEgresoBancoMachala.ASIENTOS_LIBRO_DIARIODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetComprobanteEgresoBancoMachala.ASIENTOS_LIBRO_DIARIODataTable = New DataSetComprobanteEgresoBancoMachala.ASIENTOS_LIBRO_DIARIODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetComprobanteEgresoBancoMachala.ASIENTOS_LIBRO_DIARIODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetComprobanteEgresoBancoMachala) As Integer
            Return Me.Adapter.Update(dataSet, "ASIENTOS_LIBRO_DIARIO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_ASIENTO As Long, ByVal Original_FECHA_ASIENTO As Date, ByVal Original_VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal), ByVal Original_VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal), ByVal Original_NUMERO_REGISTRO_ASIENTO As Long, ByVal Original_DEBE_HABER As Integer, ByVal Original_CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer), ByVal Original_ESTADO_ASIENTO As Integer, ByVal Original_ID_LIBRO_DIARIO As Long, ByVal Original_ESTADO_MAYOR As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_ASIENTO,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA_ASIENTO,Date)
            If (Original_VALOR_DEBE_ASIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_VALOR_DEBE_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_VALOR_HABER_ASIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_VALOR_HABER_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NUMERO_REGISTRO_ASIENTO,Long)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_DEBE_HABER,Integer)
            If (Original_CONCILIAR_ASIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CONCILIAR_ASIENTO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ESTADO_ASIENTO,Integer)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ID_LIBRO_DIARIO,Long)
            If (Original_ESTADO_MAYOR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_ESTADO_MAYOR.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID_ASIENTO As Long,  _
                    ByVal FECHA_ASIENTO As Date,  _
                    ByVal CODIGO_CUENTA_ASIENTO As String,  _
                    ByVal NOMBRE_CUENTA_ASIENTO As String,  _
                    ByVal CONCEPTO_ASIENTO As String,  _
                    ByVal DETALLE_TRANSACCION_ASIENTO As String,  _
                    ByVal PROVINCIA_ASIENTO As String,  _
                    ByVal CIUDAD_ASIENTO As String,  _
                    ByVal PARROQUIA_ASIENTO As String,  _
                    ByVal CENTRO_COSTO_ASIENTO As String,  _
                    ByVal VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal DEBE_HABER As Integer,  _
                    ByVal CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal ESTADO_ASIENTO As Integer,  _
                    ByVal ID_LIBRO_DIARIO As Long,  _
                    ByVal ESTADO_MAYOR As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ASIENTO,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA_ASIENTO,Date)
            If (CODIGO_CUENTA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_CUENTA_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CODIGO_CUENTA_ASIENTO,String)
            End If
            If (NOMBRE_CUENTA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_CUENTA_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NOMBRE_CUENTA_ASIENTO,String)
            End If
            If (CONCEPTO_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONCEPTO_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CONCEPTO_ASIENTO,String)
            End If
            If (DETALLE_TRANSACCION_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DETALLE_TRANSACCION_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DETALLE_TRANSACCION_ASIENTO,String)
            End If
            If (PROVINCIA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVINCIA_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PROVINCIA_ASIENTO,String)
            End If
            If (CIUDAD_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIUDAD_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CIUDAD_ASIENTO,String)
            End If
            If (PARROQUIA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARROQUIA_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PARROQUIA_ASIENTO,String)
            End If
            If (CENTRO_COSTO_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CENTRO_COSTO_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CENTRO_COSTO_ASIENTO,String)
            End If
            If (VALOR_DEBE_ASIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(VALOR_DEBE_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (VALOR_HABER_ASIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(VALOR_HABER_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(NUMERO_REGISTRO_ASIENTO,Long)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(DEBE_HABER,Integer)
            If (CONCILIAR_ASIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CONCILIAR_ASIENTO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(ESTADO_ASIENTO,Integer)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(ID_LIBRO_DIARIO,Long)
            If (ESTADO_MAYOR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ESTADO_MAYOR.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_ASIENTO As Long,  _
                    ByVal FECHA_ASIENTO As Date,  _
                    ByVal CODIGO_CUENTA_ASIENTO As String,  _
                    ByVal NOMBRE_CUENTA_ASIENTO As String,  _
                    ByVal CONCEPTO_ASIENTO As String,  _
                    ByVal DETALLE_TRANSACCION_ASIENTO As String,  _
                    ByVal PROVINCIA_ASIENTO As String,  _
                    ByVal CIUDAD_ASIENTO As String,  _
                    ByVal PARROQUIA_ASIENTO As String,  _
                    ByVal CENTRO_COSTO_ASIENTO As String,  _
                    ByVal VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal DEBE_HABER As Integer,  _
                    ByVal CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal ESTADO_ASIENTO As Integer,  _
                    ByVal ID_LIBRO_DIARIO As Long,  _
                    ByVal ESTADO_MAYOR As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ID_ASIENTO As Long,  _
                    ByVal Original_FECHA_ASIENTO As Date,  _
                    ByVal Original_VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal Original_DEBE_HABER As Integer,  _
                    ByVal Original_CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ESTADO_ASIENTO As Integer,  _
                    ByVal Original_ID_LIBRO_DIARIO As Long,  _
                    ByVal Original_ESTADO_MAYOR As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_ASIENTO,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA_ASIENTO,Date)
            If (CODIGO_CUENTA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_CUENTA_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CODIGO_CUENTA_ASIENTO,String)
            End If
            If (NOMBRE_CUENTA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_CUENTA_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NOMBRE_CUENTA_ASIENTO,String)
            End If
            If (CONCEPTO_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONCEPTO_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CONCEPTO_ASIENTO,String)
            End If
            If (DETALLE_TRANSACCION_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DETALLE_TRANSACCION_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DETALLE_TRANSACCION_ASIENTO,String)
            End If
            If (PROVINCIA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVINCIA_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PROVINCIA_ASIENTO,String)
            End If
            If (CIUDAD_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIUDAD_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CIUDAD_ASIENTO,String)
            End If
            If (PARROQUIA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARROQUIA_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PARROQUIA_ASIENTO,String)
            End If
            If (CENTRO_COSTO_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CENTRO_COSTO_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CENTRO_COSTO_ASIENTO,String)
            End If
            If (VALOR_DEBE_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(VALOR_DEBE_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (VALOR_HABER_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(VALOR_HABER_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(NUMERO_REGISTRO_ASIENTO,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DEBE_HABER,Integer)
            If (CONCILIAR_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CONCILIAR_ASIENTO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ESTADO_ASIENTO,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ID_LIBRO_DIARIO,Long)
            If (ESTADO_MAYOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ESTADO_MAYOR.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ID_ASIENTO,Long)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_FECHA_ASIENTO,Date)
            If (Original_VALOR_DEBE_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_VALOR_DEBE_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_VALOR_HABER_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_VALOR_HABER_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_NUMERO_REGISTRO_ASIENTO,Long)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_DEBE_HABER,Integer)
            If (Original_CONCILIAR_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_CONCILIAR_ASIENTO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ESTADO_ASIENTO,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ID_LIBRO_DIARIO,Long)
            If (Original_ESTADO_MAYOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ESTADO_MAYOR.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FECHA_ASIENTO As Date,  _
                    ByVal CODIGO_CUENTA_ASIENTO As String,  _
                    ByVal NOMBRE_CUENTA_ASIENTO As String,  _
                    ByVal CONCEPTO_ASIENTO As String,  _
                    ByVal DETALLE_TRANSACCION_ASIENTO As String,  _
                    ByVal PROVINCIA_ASIENTO As String,  _
                    ByVal CIUDAD_ASIENTO As String,  _
                    ByVal PARROQUIA_ASIENTO As String,  _
                    ByVal CENTRO_COSTO_ASIENTO As String,  _
                    ByVal VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal DEBE_HABER As Integer,  _
                    ByVal CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal ESTADO_ASIENTO As Integer,  _
                    ByVal ID_LIBRO_DIARIO As Long,  _
                    ByVal ESTADO_MAYOR As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ID_ASIENTO As Long,  _
                    ByVal Original_FECHA_ASIENTO As Date,  _
                    ByVal Original_VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal Original_DEBE_HABER As Integer,  _
                    ByVal Original_CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ESTADO_ASIENTO As Integer,  _
                    ByVal Original_ID_LIBRO_DIARIO As Long,  _
                    ByVal Original_ESTADO_MAYOR As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_ID_ASIENTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CUENTA_ASIENTO, CONCEPTO_ASIENTO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, CIUDAD_ASIENTO, PARROQUIA_ASIENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VALOR_HABER_ASIENTO, NUMERO_REGISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO_ASIENTO, ID_LIBRO_DIARIO, ESTADO_MAYOR, Original_ID_ASIENTO, Original_FECHA_ASIENTO, Original_VALOR_DEBE_ASIENTO, Original_VALOR_HABER_ASIENTO, Original_NUMERO_REGISTRO_ASIENTO, Original_DEBE_HABER, Original_CONCILIAR_ASIENTO, Original_ESTADO_ASIENTO, Original_ID_LIBRO_DIARIO, Original_ESTADO_MAYOR)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _cOMPROBANTE_EGRESO_BANCOSTableAdapter As COMPROBANTE_EGRESO_BANCOSTableAdapter
        
        Private _cHEQUES_EMITIDOSTableAdapter As CHEQUES_EMITIDOSTableAdapter
        
        Private _cUENTAS_BANCOSTableAdapter As CUENTAS_BANCOSTableAdapter
        
        Private _aSIENTOS_LIBRO_DIARIOTableAdapter As ASIENTOS_LIBRO_DIARIOTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property COMPROBANTE_EGRESO_BANCOSTableAdapter() As COMPROBANTE_EGRESO_BANCOSTableAdapter
            Get
                Return Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter
            End Get
            Set
                Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CHEQUES_EMITIDOSTableAdapter() As CHEQUES_EMITIDOSTableAdapter
            Get
                Return Me._cHEQUES_EMITIDOSTableAdapter
            End Get
            Set
                Me._cHEQUES_EMITIDOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CUENTAS_BANCOSTableAdapter() As CUENTAS_BANCOSTableAdapter
            Get
                Return Me._cUENTAS_BANCOSTableAdapter
            End Get
            Set
                Me._cUENTAS_BANCOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ASIENTOS_LIBRO_DIARIOTableAdapter() As ASIENTOS_LIBRO_DIARIOTableAdapter
            Get
                Return Me._aSIENTOS_LIBRO_DIARIOTableAdapter
            End Get
            Set
                Me._aSIENTOS_LIBRO_DIARIOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Connection
                End If
                If ((Not (Me._cHEQUES_EMITIDOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cHEQUES_EMITIDOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cHEQUES_EMITIDOSTableAdapter.Connection
                End If
                If ((Not (Me._cUENTAS_BANCOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cUENTAS_BANCOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cUENTAS_BANCOSTableAdapter.Connection
                End If
                If ((Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cHEQUES_EMITIDOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cUENTAS_BANCOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetComprobanteEgresoBancoMachala, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cUENTAS_BANCOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CUENTAS_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cUENTAS_BANCOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.COMPROBANTE_EGRESO_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cHEQUES_EMITIDOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CHEQUES_EMITIDOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cHEQUES_EMITIDOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ASIENTOS_LIBRO_DIARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetComprobanteEgresoBancoMachala, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cUENTAS_BANCOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CUENTAS_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cUENTAS_BANCOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.COMPROBANTE_EGRESO_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cHEQUES_EMITIDOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CHEQUES_EMITIDOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cHEQUES_EMITIDOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ASIENTOS_LIBRO_DIARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetComprobanteEgresoBancoMachala, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ASIENTOS_LIBRO_DIARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cHEQUES_EMITIDOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CHEQUES_EMITIDOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cHEQUES_EMITIDOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.COMPROBANTE_EGRESO_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cUENTAS_BANCOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CUENTAS_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cUENTAS_BANCOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetComprobanteEgresoBancoMachala) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cHEQUES_EMITIDOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cHEQUES_EMITIDOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cUENTAS_BANCOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cUENTAS_BANCOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter, Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Connection)
                    Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cHEQUES_EMITIDOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cHEQUES_EMITIDOSTableAdapter, Me._cHEQUES_EMITIDOSTableAdapter.Connection)
                    Me._cHEQUES_EMITIDOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cHEQUES_EMITIDOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cHEQUES_EMITIDOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cHEQUES_EMITIDOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cHEQUES_EMITIDOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cUENTAS_BANCOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cUENTAS_BANCOSTableAdapter, Me._cUENTAS_BANCOSTableAdapter.Connection)
                    Me._cUENTAS_BANCOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cUENTAS_BANCOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cUENTAS_BANCOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cUENTAS_BANCOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cUENTAS_BANCOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aSIENTOS_LIBRO_DIARIOTableAdapter, Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection)
                    Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter) Is Nothing) Then
                    Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Connection = CType(revertConnections(Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cOMPROBANTE_EGRESO_BANCOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cHEQUES_EMITIDOSTableAdapter) Is Nothing) Then
                    Me._cHEQUES_EMITIDOSTableAdapter.Connection = CType(revertConnections(Me._cHEQUES_EMITIDOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cHEQUES_EMITIDOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cUENTAS_BANCOSTableAdapter) Is Nothing) Then
                    Me._cUENTAS_BANCOSTableAdapter.Connection = CType(revertConnections(Me._cUENTAS_BANCOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cUENTAS_BANCOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                    Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection = CType(revertConnections(Me._aSIENTOS_LIBRO_DIARIOTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
