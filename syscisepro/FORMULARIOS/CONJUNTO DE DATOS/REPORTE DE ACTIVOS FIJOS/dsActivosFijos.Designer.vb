'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsActivosFijos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsActivosFijos
    Inherits Global.System.Data.DataSet
    
    Private tablePERSONAL As PERSONALDataTable
    
    Private tableRADIOS As RADIOSDataTable
    
    Private tableACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALDataTable
    
    Private tableARMAS As ARMASDataTable
    
    Private tableCARGO_OCUPACIONAL As CARGO_OCUPACIONALDataTable
    
    Private tableAREA_GENERAL As AREA_GENERALDataTable
    
    Private relationFK_RADIOS_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_ACTIVO_FIJO_GENERAL_PERSONAL As Global.System.Data.DataRelation
    
    Private relationFK_ARMAS_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_PERSONAL_CARGO_OCUPACIONAL As Global.System.Data.DataRelation
    
    Private relationFK_PERSONAL_AREA_GENERAL As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONALDataTable(ds.Tables("PERSONAL")))
            End If
            If (Not (ds.Tables("RADIOS")) Is Nothing) Then
                MyBase.Tables.Add(New RADIOSDataTable(ds.Tables("RADIOS")))
            End If
            If (Not (ds.Tables("ACTIVO_FIJO_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New ACTIVO_FIJO_GENERALDataTable(ds.Tables("ACTIVO_FIJO_GENERAL")))
            End If
            If (Not (ds.Tables("ARMAS")) Is Nothing) Then
                MyBase.Tables.Add(New ARMASDataTable(ds.Tables("ARMAS")))
            End If
            If (Not (ds.Tables("CARGO_OCUPACIONAL")) Is Nothing) Then
                MyBase.Tables.Add(New CARGO_OCUPACIONALDataTable(ds.Tables("CARGO_OCUPACIONAL")))
            End If
            If (Not (ds.Tables("AREA_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New AREA_GENERALDataTable(ds.Tables("AREA_GENERAL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PERSONAL() As PERSONALDataTable
        Get
            Return Me.tablePERSONAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RADIOS() As RADIOSDataTable
        Get
            Return Me.tableRADIOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACTIVO_FIJO_GENERAL() As ACTIVO_FIJO_GENERALDataTable
        Get
            Return Me.tableACTIVO_FIJO_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ARMAS() As ARMASDataTable
        Get
            Return Me.tableARMAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CARGO_OCUPACIONAL() As CARGO_OCUPACIONALDataTable
        Get
            Return Me.tableCARGO_OCUPACIONAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AREA_GENERAL() As AREA_GENERALDataTable
        Get
            Return Me.tableAREA_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsActivosFijos = CType(MyBase.Clone,dsActivosFijos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONALDataTable(ds.Tables("PERSONAL")))
            End If
            If (Not (ds.Tables("RADIOS")) Is Nothing) Then
                MyBase.Tables.Add(New RADIOSDataTable(ds.Tables("RADIOS")))
            End If
            If (Not (ds.Tables("ACTIVO_FIJO_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New ACTIVO_FIJO_GENERALDataTable(ds.Tables("ACTIVO_FIJO_GENERAL")))
            End If
            If (Not (ds.Tables("ARMAS")) Is Nothing) Then
                MyBase.Tables.Add(New ARMASDataTable(ds.Tables("ARMAS")))
            End If
            If (Not (ds.Tables("CARGO_OCUPACIONAL")) Is Nothing) Then
                MyBase.Tables.Add(New CARGO_OCUPACIONALDataTable(ds.Tables("CARGO_OCUPACIONAL")))
            End If
            If (Not (ds.Tables("AREA_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New AREA_GENERALDataTable(ds.Tables("AREA_GENERAL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePERSONAL = CType(MyBase.Tables("PERSONAL"),PERSONALDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePERSONAL) Is Nothing) Then
                Me.tablePERSONAL.InitVars
            End If
        End If
        Me.tableRADIOS = CType(MyBase.Tables("RADIOS"),RADIOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRADIOS) Is Nothing) Then
                Me.tableRADIOS.InitVars
            End If
        End If
        Me.tableACTIVO_FIJO_GENERAL = CType(MyBase.Tables("ACTIVO_FIJO_GENERAL"),ACTIVO_FIJO_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACTIVO_FIJO_GENERAL) Is Nothing) Then
                Me.tableACTIVO_FIJO_GENERAL.InitVars
            End If
        End If
        Me.tableARMAS = CType(MyBase.Tables("ARMAS"),ARMASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableARMAS) Is Nothing) Then
                Me.tableARMAS.InitVars
            End If
        End If
        Me.tableCARGO_OCUPACIONAL = CType(MyBase.Tables("CARGO_OCUPACIONAL"),CARGO_OCUPACIONALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCARGO_OCUPACIONAL) Is Nothing) Then
                Me.tableCARGO_OCUPACIONAL.InitVars
            End If
        End If
        Me.tableAREA_GENERAL = CType(MyBase.Tables("AREA_GENERAL"),AREA_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAREA_GENERAL) Is Nothing) Then
                Me.tableAREA_GENERAL.InitVars
            End If
        End If
        Me.relationFK_RADIOS_ACTIVO_FIJO_GENERAL = Me.Relations("FK_RADIOS_ACTIVO_FIJO_GENERAL")
        Me.relationFK_ACTIVO_FIJO_GENERAL_PERSONAL = Me.Relations("FK_ACTIVO_FIJO_GENERAL_PERSONAL")
        Me.relationFK_ARMAS_ACTIVO_FIJO_GENERAL = Me.Relations("FK_ARMAS_ACTIVO_FIJO_GENERAL")
        Me.relationFK_PERSONAL_CARGO_OCUPACIONAL = Me.Relations("FK_PERSONAL_CARGO_OCUPACIONAL")
        Me.relationFK_PERSONAL_AREA_GENERAL = Me.Relations("FK_PERSONAL_AREA_GENERAL")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsActivosFijos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsActivosFijos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePERSONAL = New PERSONALDataTable()
        MyBase.Tables.Add(Me.tablePERSONAL)
        Me.tableRADIOS = New RADIOSDataTable()
        MyBase.Tables.Add(Me.tableRADIOS)
        Me.tableACTIVO_FIJO_GENERAL = New ACTIVO_FIJO_GENERALDataTable()
        MyBase.Tables.Add(Me.tableACTIVO_FIJO_GENERAL)
        Me.tableARMAS = New ARMASDataTable()
        MyBase.Tables.Add(Me.tableARMAS)
        Me.tableCARGO_OCUPACIONAL = New CARGO_OCUPACIONALDataTable()
        MyBase.Tables.Add(Me.tableCARGO_OCUPACIONAL)
        Me.tableAREA_GENERAL = New AREA_GENERALDataTable()
        MyBase.Tables.Add(Me.tableAREA_GENERAL)
        Me.relationFK_RADIOS_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_RADIOS_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableRADIOS.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_RADIOS_ACTIVO_FIJO_GENERAL)
        Me.relationFK_ACTIVO_FIJO_GENERAL_PERSONAL = New Global.System.Data.DataRelation("FK_ACTIVO_FIJO_GENERAL_PERSONAL", New Global.System.Data.DataColumn() {Me.tablePERSONAL.ID_PERSONALColumn}, New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_PERSONALColumn}, false)
        Me.Relations.Add(Me.relationFK_ACTIVO_FIJO_GENERAL_PERSONAL)
        Me.relationFK_ARMAS_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_ARMAS_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableARMAS.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_ARMAS_ACTIVO_FIJO_GENERAL)
        Me.relationFK_PERSONAL_CARGO_OCUPACIONAL = New Global.System.Data.DataRelation("FK_PERSONAL_CARGO_OCUPACIONAL", New Global.System.Data.DataColumn() {Me.tableCARGO_OCUPACIONAL.ID_CARGO_OCUPACIONALColumn}, New Global.System.Data.DataColumn() {Me.tablePERSONAL.ID_CARGO_OCUPACIONALColumn}, false)
        Me.Relations.Add(Me.relationFK_PERSONAL_CARGO_OCUPACIONAL)
        Me.relationFK_PERSONAL_AREA_GENERAL = New Global.System.Data.DataRelation("FK_PERSONAL_AREA_GENERAL", New Global.System.Data.DataColumn() {Me.tableAREA_GENERAL.ID_AREA_GENERALColumn}, New Global.System.Data.DataColumn() {Me.tablePERSONAL.ID_AREAColumn}, false)
        Me.Relations.Add(Me.relationFK_PERSONAL_AREA_GENERAL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializePERSONAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRADIOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeACTIVO_FIJO_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeARMAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCARGO_OCUPACIONAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeAREA_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsActivosFijos = New dsActivosFijos()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub PERSONALRowChangeEventHandler(ByVal sender As Object, ByVal e As PERSONALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RADIOSRowChangeEventHandler(ByVal sender As Object, ByVal e As RADIOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub ACTIVO_FIJO_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As ACTIVO_FIJO_GENERALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub ARMASRowChangeEventHandler(ByVal sender As Object, ByVal e As ARMASRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CARGO_OCUPACIONALRowChangeEventHandler(ByVal sender As Object, ByVal e As CARGO_OCUPACIONALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub AREA_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As AREA_GENERALRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PERSONALDataTable
        Inherits Global.System.Data.TypedTableBase(Of PERSONALRow)
        
        Private columnID_PERSONAL As Global.System.Data.DataColumn
        
        Private columnCEDULA As Global.System.Data.DataColumn
        
        Private columnNOMBRES As Global.System.Data.DataColumn
        
        Private columnAPELLIDOS As Global.System.Data.DataColumn
        
        Private columnPROVINCIA As Global.System.Data.DataColumn
        
        Private columnDIRECCION As Global.System.Data.DataColumn
        
        Private columnFECHA_NACIMIENTO As Global.System.Data.DataColumn
        
        Private columnSEXO As Global.System.Data.DataColumn
        
        Private columnCIUDAD As Global.System.Data.DataColumn
        
        Private columnSUELDO As Global.System.Data.DataColumn
        
        Private columnLIBRETA_MILITAR As Global.System.Data.DataColumn
        
        Private columnTIPO_SANGRE As Global.System.Data.DataColumn
        
        Private columnPASAPORTE As Global.System.Data.DataColumn
        
        Private columnPESO As Global.System.Data.DataColumn
        
        Private columnEDAD As Global.System.Data.DataColumn
        
        Private columnPRUEBA_ANTIDROGA As Global.System.Data.DataColumn
        
        Private columnFECHA_ENTRADA As Global.System.Data.DataColumn
        
        Private columnFECHA_SALIDA As Global.System.Data.DataColumn
        
        Private columnESTADO_PERSONAL As Global.System.Data.DataColumn
        
        Private columnID_AREA As Global.System.Data.DataColumn
        
        Private columnID_CARGO_OCUPACIONAL As Global.System.Data.DataColumn
        
        Private columnUBICACION As Global.System.Data.DataColumn
        
        Private columnINSTRUCCION As Global.System.Data.DataColumn
        
        Private columnESTADO_CIVIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PERSONAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_PERSONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PERSONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CEDULAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEDULA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property APELLIDOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPELLIDOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PROVINCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVINCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_NACIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_NACIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SEXOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEXO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SUELDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUELDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LIBRETA_MILITARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIBRETA_MILITAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_SANGREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_SANGRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PASAPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPASAPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property EDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PRUEBA_ANTIDROGAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRUEBA_ANTIDROGA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_ENTRADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ENTRADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_SALIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_SALIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_PERSONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_PERSONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CARGO_OCUPACIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CARGO_OCUPACIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property UBICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUBICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property INSTRUCCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSTRUCCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_CIVILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_CIVIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PERSONALRow
            Get
                Return CType(Me.Rows(index),PERSONALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PERSONALRowChanging As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PERSONALRowChanged As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PERSONALRowDeleting As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PERSONALRowDeleted As PERSONALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddPERSONALRow(ByVal row As PERSONALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddPERSONALRow( _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal CEDULA As String,  _
                    ByVal NOMBRES As String,  _
                    ByVal APELLIDOS As String,  _
                    ByVal PROVINCIA As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal FECHA_NACIMIENTO As Date,  _
                    ByVal SEXO As String,  _
                    ByVal CIUDAD As String,  _
                    ByVal SUELDO As Decimal,  _
                    ByVal LIBRETA_MILITAR As String,  _
                    ByVal TIPO_SANGRE As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal PESO As Integer,  _
                    ByVal EDAD As Integer,  _
                    ByVal PRUEBA_ANTIDROGA As String,  _
                    ByVal FECHA_ENTRADA As Date,  _
                    ByVal FECHA_SALIDA As Date,  _
                    ByVal ESTADO_PERSONAL As Integer,  _
                    ByVal parentAREA_GENERALRowByFK_PERSONAL_AREA_GENERAL As AREA_GENERALRow,  _
                    ByVal parentCARGO_OCUPACIONALRowByFK_PERSONAL_CARGO_OCUPACIONAL As CARGO_OCUPACIONALRow,  _
                    ByVal UBICACION As String,  _
                    ByVal INSTRUCCION As String,  _
                    ByVal ESTADO_CIVIL As String) As PERSONALRow
            Dim rowPERSONALRow As PERSONALRow = CType(Me.NewRow,PERSONALRow)
            Dim columnValuesArray() As Object = New Object() {ID_PERSONAL, CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIMIENTO, SEXO, CIUDAD, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD, PRUEBA_ANTIDROGA, FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, Nothing, Nothing, UBICACION, INSTRUCCION, ESTADO_CIVIL}
            If (Not (parentAREA_GENERALRowByFK_PERSONAL_AREA_GENERAL) Is Nothing) Then
                columnValuesArray(19) = parentAREA_GENERALRowByFK_PERSONAL_AREA_GENERAL(0)
            End If
            If (Not (parentCARGO_OCUPACIONALRowByFK_PERSONAL_CARGO_OCUPACIONAL) Is Nothing) Then
                columnValuesArray(20) = parentCARGO_OCUPACIONALRowByFK_PERSONAL_CARGO_OCUPACIONAL(0)
            End If
            rowPERSONALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPERSONALRow)
            Return rowPERSONALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_PERSONAL(ByVal ID_PERSONAL As Integer) As PERSONALRow
            Return CType(Me.Rows.Find(New Object() {ID_PERSONAL}),PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PERSONALDataTable = CType(MyBase.Clone,PERSONALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PERSONALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_PERSONAL = MyBase.Columns("ID_PERSONAL")
            Me.columnCEDULA = MyBase.Columns("CEDULA")
            Me.columnNOMBRES = MyBase.Columns("NOMBRES")
            Me.columnAPELLIDOS = MyBase.Columns("APELLIDOS")
            Me.columnPROVINCIA = MyBase.Columns("PROVINCIA")
            Me.columnDIRECCION = MyBase.Columns("DIRECCION")
            Me.columnFECHA_NACIMIENTO = MyBase.Columns("FECHA_NACIMIENTO")
            Me.columnSEXO = MyBase.Columns("SEXO")
            Me.columnCIUDAD = MyBase.Columns("CIUDAD")
            Me.columnSUELDO = MyBase.Columns("SUELDO")
            Me.columnLIBRETA_MILITAR = MyBase.Columns("LIBRETA_MILITAR")
            Me.columnTIPO_SANGRE = MyBase.Columns("TIPO_SANGRE")
            Me.columnPASAPORTE = MyBase.Columns("PASAPORTE")
            Me.columnPESO = MyBase.Columns("PESO")
            Me.columnEDAD = MyBase.Columns("EDAD")
            Me.columnPRUEBA_ANTIDROGA = MyBase.Columns("PRUEBA_ANTIDROGA")
            Me.columnFECHA_ENTRADA = MyBase.Columns("FECHA_ENTRADA")
            Me.columnFECHA_SALIDA = MyBase.Columns("FECHA_SALIDA")
            Me.columnESTADO_PERSONAL = MyBase.Columns("ESTADO_PERSONAL")
            Me.columnID_AREA = MyBase.Columns("ID_AREA")
            Me.columnID_CARGO_OCUPACIONAL = MyBase.Columns("ID_CARGO_OCUPACIONAL")
            Me.columnUBICACION = MyBase.Columns("UBICACION")
            Me.columnINSTRUCCION = MyBase.Columns("INSTRUCCION")
            Me.columnESTADO_CIVIL = MyBase.Columns("ESTADO_CIVIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_PERSONAL = New Global.System.Data.DataColumn("ID_PERSONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PERSONAL)
            Me.columnCEDULA = New Global.System.Data.DataColumn("CEDULA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEDULA)
            Me.columnNOMBRES = New Global.System.Data.DataColumn("NOMBRES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRES)
            Me.columnAPELLIDOS = New Global.System.Data.DataColumn("APELLIDOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPELLIDOS)
            Me.columnPROVINCIA = New Global.System.Data.DataColumn("PROVINCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVINCIA)
            Me.columnDIRECCION = New Global.System.Data.DataColumn("DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION)
            Me.columnFECHA_NACIMIENTO = New Global.System.Data.DataColumn("FECHA_NACIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_NACIMIENTO)
            Me.columnSEXO = New Global.System.Data.DataColumn("SEXO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEXO)
            Me.columnCIUDAD = New Global.System.Data.DataColumn("CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIUDAD)
            Me.columnSUELDO = New Global.System.Data.DataColumn("SUELDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUELDO)
            Me.columnLIBRETA_MILITAR = New Global.System.Data.DataColumn("LIBRETA_MILITAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIBRETA_MILITAR)
            Me.columnTIPO_SANGRE = New Global.System.Data.DataColumn("TIPO_SANGRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_SANGRE)
            Me.columnPASAPORTE = New Global.System.Data.DataColumn("PASAPORTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPASAPORTE)
            Me.columnPESO = New Global.System.Data.DataColumn("PESO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPESO)
            Me.columnEDAD = New Global.System.Data.DataColumn("EDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDAD)
            Me.columnPRUEBA_ANTIDROGA = New Global.System.Data.DataColumn("PRUEBA_ANTIDROGA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRUEBA_ANTIDROGA)
            Me.columnFECHA_ENTRADA = New Global.System.Data.DataColumn("FECHA_ENTRADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ENTRADA)
            Me.columnFECHA_SALIDA = New Global.System.Data.DataColumn("FECHA_SALIDA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_SALIDA)
            Me.columnESTADO_PERSONAL = New Global.System.Data.DataColumn("ESTADO_PERSONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_PERSONAL)
            Me.columnID_AREA = New Global.System.Data.DataColumn("ID_AREA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AREA)
            Me.columnID_CARGO_OCUPACIONAL = New Global.System.Data.DataColumn("ID_CARGO_OCUPACIONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CARGO_OCUPACIONAL)
            Me.columnUBICACION = New Global.System.Data.DataColumn("UBICACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUBICACION)
            Me.columnINSTRUCCION = New Global.System.Data.DataColumn("INSTRUCCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSTRUCCION)
            Me.columnESTADO_CIVIL = New Global.System.Data.DataColumn("ESTADO_CIVIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_CIVIL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_PERSONAL}, true))
            Me.columnID_PERSONAL.AllowDBNull = false
            Me.columnID_PERSONAL.Unique = true
            Me.columnCEDULA.AllowDBNull = false
            Me.columnCEDULA.MaxLength = 10
            Me.columnNOMBRES.AllowDBNull = false
            Me.columnNOMBRES.MaxLength = 2147483647
            Me.columnAPELLIDOS.AllowDBNull = false
            Me.columnAPELLIDOS.MaxLength = 2147483647
            Me.columnPROVINCIA.AllowDBNull = false
            Me.columnPROVINCIA.MaxLength = 2147483647
            Me.columnDIRECCION.AllowDBNull = false
            Me.columnDIRECCION.MaxLength = 2147483647
            Me.columnFECHA_NACIMIENTO.AllowDBNull = false
            Me.columnSEXO.AllowDBNull = false
            Me.columnSEXO.MaxLength = 10
            Me.columnCIUDAD.AllowDBNull = false
            Me.columnCIUDAD.MaxLength = 2147483647
            Me.columnSUELDO.AllowDBNull = false
            Me.columnLIBRETA_MILITAR.AllowDBNull = false
            Me.columnLIBRETA_MILITAR.MaxLength = 20
            Me.columnTIPO_SANGRE.AllowDBNull = false
            Me.columnTIPO_SANGRE.MaxLength = 5
            Me.columnPASAPORTE.AllowDBNull = false
            Me.columnPASAPORTE.MaxLength = 20
            Me.columnPESO.AllowDBNull = false
            Me.columnEDAD.AllowDBNull = false
            Me.columnPRUEBA_ANTIDROGA.AllowDBNull = false
            Me.columnPRUEBA_ANTIDROGA.MaxLength = 20
            Me.columnFECHA_ENTRADA.AllowDBNull = false
            Me.columnFECHA_SALIDA.AllowDBNull = false
            Me.columnESTADO_PERSONAL.AllowDBNull = false
            Me.columnID_AREA.AllowDBNull = false
            Me.columnID_CARGO_OCUPACIONAL.AllowDBNull = false
            Me.columnUBICACION.AllowDBNull = false
            Me.columnUBICACION.MaxLength = 2147483647
            Me.columnINSTRUCCION.AllowDBNull = false
            Me.columnINSTRUCCION.MaxLength = 2147483647
            Me.columnESTADO_CIVIL.AllowDBNull = false
            Me.columnESTADO_CIVIL.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewPERSONALRow() As PERSONALRow
            Return CType(Me.NewRow,PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PERSONALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PERSONALRowChangedEvent) Is Nothing) Then
                RaiseEvent PERSONALRowChanged(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PERSONALRowChangingEvent) Is Nothing) Then
                RaiseEvent PERSONALRowChanging(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PERSONALRowDeletedEvent) Is Nothing) Then
                RaiseEvent PERSONALRowDeleted(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PERSONALRowDeletingEvent) Is Nothing) Then
                RaiseEvent PERSONALRowDeleting(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemovePERSONALRow(ByVal row As PERSONALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijos = New dsActivosFijos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PERSONALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RADIOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of RADIOSRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnNUM_PERMISO_USO As Global.System.Data.DataColumn
        
        Private columnFEC_ACEPTACION_PERMISO As Global.System.Data.DataColumn
        
        Private columnFEC_CADUCIDAD_PERMISO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RADIOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_PERMISO_USOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_PERMISO_USO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_ACEPTACION_PERMISOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_ACEPTACION_PERMISO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_CADUCIDAD_PERMISOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_CADUCIDAD_PERMISO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RADIOSRow
            Get
                Return CType(Me.Rows(index),RADIOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RADIOSRowChanging As RADIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RADIOSRowChanged As RADIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RADIOSRowDeleting As RADIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RADIOSRowDeleted As RADIOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRADIOSRow(ByVal row As RADIOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRADIOSRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_RADIOS_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal SERIE As String, ByVal NUM_PERMISO_USO As String, ByVal FEC_ACEPTACION_PERMISO As Date, ByVal FEC_CADUCIDAD_PERMISO As Date, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal ESTADO As Integer) As RADIOSRow
            Dim rowRADIOSRow As RADIOSRow = CType(Me.NewRow,RADIOSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, SERIE, NUM_PERMISO_USO, FEC_ACEPTACION_PERMISO, FEC_CADUCIDAD_PERMISO, ESTADO_ACTIVO, COLOR, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_RADIOS_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_RADIOS_ACTIVO_FIJO_GENERAL(0)
            End If
            rowRADIOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRADIOSRow)
            Return rowRADIOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RADIOSDataTable = CType(MyBase.Clone,RADIOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RADIOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnNUM_PERMISO_USO = MyBase.Columns("NUM_PERMISO_USO")
            Me.columnFEC_ACEPTACION_PERMISO = MyBase.Columns("FEC_ACEPTACION_PERMISO")
            Me.columnFEC_CADUCIDAD_PERMISO = MyBase.Columns("FEC_CADUCIDAD_PERMISO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnNUM_PERMISO_USO = New Global.System.Data.DataColumn("NUM_PERMISO_USO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_PERMISO_USO)
            Me.columnFEC_ACEPTACION_PERMISO = New Global.System.Data.DataColumn("FEC_ACEPTACION_PERMISO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_ACEPTACION_PERMISO)
            Me.columnFEC_CADUCIDAD_PERMISO = New Global.System.Data.DataColumn("FEC_CADUCIDAD_PERMISO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_CADUCIDAD_PERMISO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnNUM_PERMISO_USO.AllowDBNull = false
            Me.columnNUM_PERMISO_USO.MaxLength = 2147483647
            Me.columnFEC_ACEPTACION_PERMISO.AllowDBNull = false
            Me.columnFEC_CADUCIDAD_PERMISO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRADIOSRow() As RADIOSRow
            Return CType(Me.NewRow,RADIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RADIOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RADIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RADIOSRowChangedEvent) Is Nothing) Then
                RaiseEvent RADIOSRowChanged(Me, New RADIOSRowChangeEvent(CType(e.Row,RADIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RADIOSRowChangingEvent) Is Nothing) Then
                RaiseEvent RADIOSRowChanging(Me, New RADIOSRowChangeEvent(CType(e.Row,RADIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RADIOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent RADIOSRowDeleted(Me, New RADIOSRowChangeEvent(CType(e.Row,RADIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RADIOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent RADIOSRowDeleting(Me, New RADIOSRowChangeEvent(CType(e.Row,RADIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRADIOSRow(ByVal row As RADIOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijos = New dsActivosFijos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RADIOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACTIVO_FIJO_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of ACTIVO_FIJO_GENERALRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnID_PERSONAL As Global.System.Data.DataColumn
        
        Private columnID_EMPRESA As Global.System.Data.DataColumn
        
        Private columnID_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnID_GERENCIAS As Global.System.Data.DataColumn
        
        Private columnID_AREA As Global.System.Data.DataColumn
        
        Private columnCARPETA As Global.System.Data.DataColumn
        
        Private columnCONTRATO As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_ACTIVO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_PROVEDOR As Global.System.Data.DataColumn
        
        Private columnNOMBRE_CUSTODIO As Global.System.Data.DataColumn
        
        Private columnRESPONSABLE As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnCODIGO_ARANCEL As Global.System.Data.DataColumn
        
        Private columnNUM_ORDEN_COMPRA As Global.System.Data.DataColumn
        
        Private columnNUM_FACTURA As Global.System.Data.DataColumn
        
        Private columnVALOR_FACTURA As Global.System.Data.DataColumn
        
        Private columnVALOR_ADICIONAL As Global.System.Data.DataColumn
        
        Private columnVALOR_RESIDUAL As Global.System.Data.DataColumn
        
        Private columnFECHA_ADQUISICION As Global.System.Data.DataColumn
        
        Private columnAÑOS_VIDA_UTIL As Global.System.Data.DataColumn
        
        Private columnCTA_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCTA_GASTOS As Global.System.Data.DataColumn
        
        Private columnCTA_DEPRECIACION As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnTIPO_ACTIVO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACTIVO_FIJO_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_PERSONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PERSONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_GERENCIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_GERENCIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CARPETAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARPETA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONTRATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTRATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_PROVEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_PROVEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_CUSTODIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_CUSTODIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RESPONSABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_ARANCELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_ARANCEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_ORDEN_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_ORDEN_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_FACTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_FACTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_FACTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_FACTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_ADICIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_ADICIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_RESIDUALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_RESIDUAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_ADQUISICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADQUISICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property AÑOS_VIDA_UTILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAÑOS_VIDA_UTIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CTA_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CTA_GASTOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_GASTOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CTA_DEPRECIACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DEPRECIACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.Rows(index),ACTIVO_FIJO_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ACTIVO_FIJO_GENERALRowChanging As ACTIVO_FIJO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ACTIVO_FIJO_GENERALRowChanged As ACTIVO_FIJO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ACTIVO_FIJO_GENERALRowDeleting As ACTIVO_FIJO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ACTIVO_FIJO_GENERALRowDeleted As ACTIVO_FIJO_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddACTIVO_FIJO_GENERALRow(ByVal row As ACTIVO_FIJO_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddACTIVO_FIJO_GENERALRow( _
                    ByVal ID_ACTIVO_FIJO As Integer,  _
                    ByVal parentPERSONALRowByFK_ACTIVO_FIJO_GENERAL_PERSONAL As PERSONALRow,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal ID_SUCURSAL As Integer,  _
                    ByVal ID_GERENCIAS As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal CARPETA As String,  _
                    ByVal CONTRATO As String,  _
                    ByVal CODIGO As String,  _
                    ByVal NOMBRE_ACTIVO As String,  _
                    ByVal NOMBRE_PROVEDOR As String,  _
                    ByVal NOMBRE_CUSTODIO As String,  _
                    ByVal RESPONSABLE As String,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO_ARANCEL As String,  _
                    ByVal NUM_ORDEN_COMPRA As String,  _
                    ByVal NUM_FACTURA As String,  _
                    ByVal VALOR_FACTURA As Decimal,  _
                    ByVal VALOR_ADICIONAL As Decimal,  _
                    ByVal VALOR_RESIDUAL As Decimal,  _
                    ByVal FECHA_ADQUISICION As Date,  _
                    ByVal AÑOS_VIDA_UTIL As Integer,  _
                    ByVal CTA_ACTIVO As String,  _
                    ByVal CTA_GASTOS As String,  _
                    ByVal CTA_DEPRECIACION As String,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal TIPO_ACTIVO As String) As ACTIVO_FIJO_GENERALRow
            Dim rowACTIVO_FIJO_GENERALRow As ACTIVO_FIJO_GENERALRow = CType(Me.NewRow,ACTIVO_FIJO_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_ACTIVO_FIJO, Nothing, ID_EMPRESA, ID_SUCURSAL, ID_GERENCIAS, ID_AREA, CARPETA, CONTRATO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, NOMBRE_CUSTODIO, RESPONSABLE, FECHA, CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTURA, VALOR_FACTURA, VALOR_ADICIONAL, VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_UTIL, CTA_ACTIVO, CTA_GASTOS, CTA_DEPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTIVO}
            If (Not (parentPERSONALRowByFK_ACTIVO_FIJO_GENERAL_PERSONAL) Is Nothing) Then
                columnValuesArray(1) = parentPERSONALRowByFK_ACTIVO_FIJO_GENERAL_PERSONAL(0)
            End If
            rowACTIVO_FIJO_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACTIVO_FIJO_GENERALRow)
            Return rowACTIVO_FIJO_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_ACTIVO_FIJO(ByVal ID_ACTIVO_FIJO As Integer) As ACTIVO_FIJO_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_ACTIVO_FIJO}),ACTIVO_FIJO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACTIVO_FIJO_GENERALDataTable = CType(MyBase.Clone,ACTIVO_FIJO_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACTIVO_FIJO_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnID_PERSONAL = MyBase.Columns("ID_PERSONAL")
            Me.columnID_EMPRESA = MyBase.Columns("ID_EMPRESA")
            Me.columnID_SUCURSAL = MyBase.Columns("ID_SUCURSAL")
            Me.columnID_GERENCIAS = MyBase.Columns("ID_GERENCIAS")
            Me.columnID_AREA = MyBase.Columns("ID_AREA")
            Me.columnCARPETA = MyBase.Columns("CARPETA")
            Me.columnCONTRATO = MyBase.Columns("CONTRATO")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnNOMBRE_ACTIVO = MyBase.Columns("NOMBRE_ACTIVO")
            Me.columnNOMBRE_PROVEDOR = MyBase.Columns("NOMBRE_PROVEDOR")
            Me.columnNOMBRE_CUSTODIO = MyBase.Columns("NOMBRE_CUSTODIO")
            Me.columnRESPONSABLE = MyBase.Columns("RESPONSABLE")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnCODIGO_ARANCEL = MyBase.Columns("CODIGO_ARANCEL")
            Me.columnNUM_ORDEN_COMPRA = MyBase.Columns("NUM_ORDEN_COMPRA")
            Me.columnNUM_FACTURA = MyBase.Columns("NUM_FACTURA")
            Me.columnVALOR_FACTURA = MyBase.Columns("VALOR_FACTURA")
            Me.columnVALOR_ADICIONAL = MyBase.Columns("VALOR_ADICIONAL")
            Me.columnVALOR_RESIDUAL = MyBase.Columns("VALOR_RESIDUAL")
            Me.columnFECHA_ADQUISICION = MyBase.Columns("FECHA_ADQUISICION")
            Me.columnAÑOS_VIDA_UTIL = MyBase.Columns("AÑOS_VIDA_UTIL")
            Me.columnCTA_ACTIVO = MyBase.Columns("CTA_ACTIVO")
            Me.columnCTA_GASTOS = MyBase.Columns("CTA_GASTOS")
            Me.columnCTA_DEPRECIACION = MyBase.Columns("CTA_DEPRECIACION")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnTIPO_ACTIVO = MyBase.Columns("TIPO_ACTIVO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnID_PERSONAL = New Global.System.Data.DataColumn("ID_PERSONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PERSONAL)
            Me.columnID_EMPRESA = New Global.System.Data.DataColumn("ID_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPRESA)
            Me.columnID_SUCURSAL = New Global.System.Data.DataColumn("ID_SUCURSAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SUCURSAL)
            Me.columnID_GERENCIAS = New Global.System.Data.DataColumn("ID_GERENCIAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_GERENCIAS)
            Me.columnID_AREA = New Global.System.Data.DataColumn("ID_AREA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AREA)
            Me.columnCARPETA = New Global.System.Data.DataColumn("CARPETA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARPETA)
            Me.columnCONTRATO = New Global.System.Data.DataColumn("CONTRATO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTRATO)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnNOMBRE_ACTIVO = New Global.System.Data.DataColumn("NOMBRE_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_ACTIVO)
            Me.columnNOMBRE_PROVEDOR = New Global.System.Data.DataColumn("NOMBRE_PROVEDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_PROVEDOR)
            Me.columnNOMBRE_CUSTODIO = New Global.System.Data.DataColumn("NOMBRE_CUSTODIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_CUSTODIO)
            Me.columnRESPONSABLE = New Global.System.Data.DataColumn("RESPONSABLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSABLE)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnCODIGO_ARANCEL = New Global.System.Data.DataColumn("CODIGO_ARANCEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_ARANCEL)
            Me.columnNUM_ORDEN_COMPRA = New Global.System.Data.DataColumn("NUM_ORDEN_COMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_ORDEN_COMPRA)
            Me.columnNUM_FACTURA = New Global.System.Data.DataColumn("NUM_FACTURA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_FACTURA)
            Me.columnVALOR_FACTURA = New Global.System.Data.DataColumn("VALOR_FACTURA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_FACTURA)
            Me.columnVALOR_ADICIONAL = New Global.System.Data.DataColumn("VALOR_ADICIONAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_ADICIONAL)
            Me.columnVALOR_RESIDUAL = New Global.System.Data.DataColumn("VALOR_RESIDUAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_RESIDUAL)
            Me.columnFECHA_ADQUISICION = New Global.System.Data.DataColumn("FECHA_ADQUISICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADQUISICION)
            Me.columnAÑOS_VIDA_UTIL = New Global.System.Data.DataColumn("AÑOS_VIDA_UTIL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAÑOS_VIDA_UTIL)
            Me.columnCTA_ACTIVO = New Global.System.Data.DataColumn("CTA_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_ACTIVO)
            Me.columnCTA_GASTOS = New Global.System.Data.DataColumn("CTA_GASTOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_GASTOS)
            Me.columnCTA_DEPRECIACION = New Global.System.Data.DataColumn("CTA_DEPRECIACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DEPRECIACION)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnTIPO_ACTIVO = New Global.System.Data.DataColumn("TIPO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_ACTIVO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_ACTIVO_FIJO}, true))
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnID_ACTIVO_FIJO.Unique = true
            Me.columnID_PERSONAL.AllowDBNull = false
            Me.columnID_EMPRESA.AllowDBNull = false
            Me.columnID_SUCURSAL.AllowDBNull = false
            Me.columnID_GERENCIAS.AllowDBNull = false
            Me.columnID_AREA.AllowDBNull = false
            Me.columnCARPETA.AllowDBNull = false
            Me.columnCARPETA.MaxLength = 2147483647
            Me.columnCONTRATO.AllowDBNull = false
            Me.columnCONTRATO.MaxLength = 2147483647
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnNOMBRE_ACTIVO.AllowDBNull = false
            Me.columnNOMBRE_ACTIVO.MaxLength = 2147483647
            Me.columnNOMBRE_PROVEDOR.AllowDBNull = false
            Me.columnNOMBRE_PROVEDOR.MaxLength = 2147483647
            Me.columnNOMBRE_CUSTODIO.AllowDBNull = false
            Me.columnNOMBRE_CUSTODIO.MaxLength = 2147483647
            Me.columnRESPONSABLE.AllowDBNull = false
            Me.columnRESPONSABLE.MaxLength = 2147483647
            Me.columnFECHA.AllowDBNull = false
            Me.columnCODIGO_ARANCEL.AllowDBNull = false
            Me.columnCODIGO_ARANCEL.MaxLength = 2147483647
            Me.columnNUM_ORDEN_COMPRA.AllowDBNull = false
            Me.columnNUM_ORDEN_COMPRA.MaxLength = 2147483647
            Me.columnNUM_FACTURA.AllowDBNull = false
            Me.columnNUM_FACTURA.MaxLength = 2147483647
            Me.columnVALOR_FACTURA.AllowDBNull = false
            Me.columnVALOR_ADICIONAL.AllowDBNull = false
            Me.columnVALOR_RESIDUAL.AllowDBNull = false
            Me.columnFECHA_ADQUISICION.AllowDBNull = false
            Me.columnAÑOS_VIDA_UTIL.AllowDBNull = false
            Me.columnCTA_ACTIVO.AllowDBNull = false
            Me.columnCTA_ACTIVO.MaxLength = 2147483647
            Me.columnCTA_GASTOS.AllowDBNull = false
            Me.columnCTA_GASTOS.MaxLength = 2147483647
            Me.columnCTA_DEPRECIACION.AllowDBNull = false
            Me.columnCTA_DEPRECIACION.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnTIPO_ACTIVO.AllowDBNull = false
            Me.columnTIPO_ACTIVO.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Return CType(Me.NewRow,ACTIVO_FIJO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACTIVO_FIJO_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACTIVO_FIJO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACTIVO_FIJO_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent ACTIVO_FIJO_GENERALRowChanged(Me, New ACTIVO_FIJO_GENERALRowChangeEvent(CType(e.Row,ACTIVO_FIJO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACTIVO_FIJO_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent ACTIVO_FIJO_GENERALRowChanging(Me, New ACTIVO_FIJO_GENERALRowChangeEvent(CType(e.Row,ACTIVO_FIJO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACTIVO_FIJO_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent ACTIVO_FIJO_GENERALRowDeleted(Me, New ACTIVO_FIJO_GENERALRowChangeEvent(CType(e.Row,ACTIVO_FIJO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACTIVO_FIJO_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent ACTIVO_FIJO_GENERALRowDeleting(Me, New ACTIVO_FIJO_GENERALRowChangeEvent(CType(e.Row,ACTIVO_FIJO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveACTIVO_FIJO_GENERALRow(ByVal row As ACTIVO_FIJO_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijos = New dsActivosFijos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACTIVO_FIJO_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ARMASDataTable
        Inherits Global.System.Data.TypedTableBase(Of ARMASRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnNUM_PERMISO_GOBIERNO As Global.System.Data.DataColumn
        
        Private columnNUM_PERMISO_COMANDO As Global.System.Data.DataColumn
        
        Private columnNUM_TENENCIA_ARMAS As Global.System.Data.DataColumn
        
        Private columnFEC_ACEPTACION_TENENCIA As Global.System.Data.DataColumn
        
        Private columnFEC_CADUCIDAD_TENENCIA As Global.System.Data.DataColumn
        
        Private columnNUM_MATRICULA_ARMA As Global.System.Data.DataColumn
        
        Private columnFEC_ACEPTACION_MATRICULA As Global.System.Data.DataColumn
        
        Private columnFEC_CADUCIDAD_MATRICULA As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ARMAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_PERMISO_GOBIERNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_PERMISO_GOBIERNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_PERMISO_COMANDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_PERMISO_COMANDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_TENENCIA_ARMASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_TENENCIA_ARMAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_ACEPTACION_TENENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_ACEPTACION_TENENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_CADUCIDAD_TENENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_CADUCIDAD_TENENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_MATRICULA_ARMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_MATRICULA_ARMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_ACEPTACION_MATRICULAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_ACEPTACION_MATRICULA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_CADUCIDAD_MATRICULAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_CADUCIDAD_MATRICULA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ARMASRow
            Get
                Return CType(Me.Rows(index),ARMASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ARMASRowChanging As ARMASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ARMASRowChanged As ARMASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ARMASRowDeleting As ARMASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ARMASRowDeleted As ARMASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddARMASRow(ByVal row As ARMASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddARMASRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_ARMAS_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal NUM_PERMISO_GOBIERNO As String, ByVal NUM_PERMISO_COMANDO As String, ByVal NUM_TENENCIA_ARMAS As String, ByVal FEC_ACEPTACION_TENENCIA As Date, ByVal FEC_CADUCIDAD_TENENCIA As Date, ByVal NUM_MATRICULA_ARMA As String, ByVal FEC_ACEPTACION_MATRICULA As Date, ByVal FEC_CADUCIDAD_MATRICULA As Date, ByVal SERIE As String, ByVal ESTADO As Integer) As ARMASRow
            Dim rowARMASRow As ARMASRow = CType(Me.NewRow,ARMASRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, NUM_PERMISO_GOBIERNO, NUM_PERMISO_COMANDO, NUM_TENENCIA_ARMAS, FEC_ACEPTACION_TENENCIA, FEC_CADUCIDAD_TENENCIA, NUM_MATRICULA_ARMA, FEC_ACEPTACION_MATRICULA, FEC_CADUCIDAD_MATRICULA, SERIE, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_ARMAS_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_ARMAS_ACTIVO_FIJO_GENERAL(0)
            End If
            rowARMASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowARMASRow)
            Return rowARMASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ARMASDataTable = CType(MyBase.Clone,ARMASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ARMASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnNUM_PERMISO_GOBIERNO = MyBase.Columns("NUM_PERMISO_GOBIERNO")
            Me.columnNUM_PERMISO_COMANDO = MyBase.Columns("NUM_PERMISO_COMANDO")
            Me.columnNUM_TENENCIA_ARMAS = MyBase.Columns("NUM_TENENCIA_ARMAS")
            Me.columnFEC_ACEPTACION_TENENCIA = MyBase.Columns("FEC_ACEPTACION_TENENCIA")
            Me.columnFEC_CADUCIDAD_TENENCIA = MyBase.Columns("FEC_CADUCIDAD_TENENCIA")
            Me.columnNUM_MATRICULA_ARMA = MyBase.Columns("NUM_MATRICULA_ARMA")
            Me.columnFEC_ACEPTACION_MATRICULA = MyBase.Columns("FEC_ACEPTACION_MATRICULA")
            Me.columnFEC_CADUCIDAD_MATRICULA = MyBase.Columns("FEC_CADUCIDAD_MATRICULA")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnNUM_PERMISO_GOBIERNO = New Global.System.Data.DataColumn("NUM_PERMISO_GOBIERNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_PERMISO_GOBIERNO)
            Me.columnNUM_PERMISO_COMANDO = New Global.System.Data.DataColumn("NUM_PERMISO_COMANDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_PERMISO_COMANDO)
            Me.columnNUM_TENENCIA_ARMAS = New Global.System.Data.DataColumn("NUM_TENENCIA_ARMAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_TENENCIA_ARMAS)
            Me.columnFEC_ACEPTACION_TENENCIA = New Global.System.Data.DataColumn("FEC_ACEPTACION_TENENCIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_ACEPTACION_TENENCIA)
            Me.columnFEC_CADUCIDAD_TENENCIA = New Global.System.Data.DataColumn("FEC_CADUCIDAD_TENENCIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_CADUCIDAD_TENENCIA)
            Me.columnNUM_MATRICULA_ARMA = New Global.System.Data.DataColumn("NUM_MATRICULA_ARMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_MATRICULA_ARMA)
            Me.columnFEC_ACEPTACION_MATRICULA = New Global.System.Data.DataColumn("FEC_ACEPTACION_MATRICULA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_ACEPTACION_MATRICULA)
            Me.columnFEC_CADUCIDAD_MATRICULA = New Global.System.Data.DataColumn("FEC_CADUCIDAD_MATRICULA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_CADUCIDAD_MATRICULA)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnNUM_PERMISO_GOBIERNO.AllowDBNull = false
            Me.columnNUM_PERMISO_GOBIERNO.MaxLength = 2147483647
            Me.columnNUM_PERMISO_COMANDO.AllowDBNull = false
            Me.columnNUM_PERMISO_COMANDO.MaxLength = 2147483647
            Me.columnNUM_TENENCIA_ARMAS.AllowDBNull = false
            Me.columnNUM_TENENCIA_ARMAS.MaxLength = 2147483647
            Me.columnFEC_ACEPTACION_TENENCIA.AllowDBNull = false
            Me.columnFEC_CADUCIDAD_TENENCIA.AllowDBNull = false
            Me.columnNUM_MATRICULA_ARMA.AllowDBNull = false
            Me.columnNUM_MATRICULA_ARMA.MaxLength = 2147483647
            Me.columnFEC_ACEPTACION_MATRICULA.AllowDBNull = false
            Me.columnFEC_CADUCIDAD_MATRICULA.AllowDBNull = false
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewARMASRow() As ARMASRow
            Return CType(Me.NewRow,ARMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ARMASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ARMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ARMASRowChangedEvent) Is Nothing) Then
                RaiseEvent ARMASRowChanged(Me, New ARMASRowChangeEvent(CType(e.Row,ARMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ARMASRowChangingEvent) Is Nothing) Then
                RaiseEvent ARMASRowChanging(Me, New ARMASRowChangeEvent(CType(e.Row,ARMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ARMASRowDeletedEvent) Is Nothing) Then
                RaiseEvent ARMASRowDeleted(Me, New ARMASRowChangeEvent(CType(e.Row,ARMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ARMASRowDeletingEvent) Is Nothing) Then
                RaiseEvent ARMASRowDeleting(Me, New ARMASRowChangeEvent(CType(e.Row,ARMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveARMASRow(ByVal row As ARMASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijos = New dsActivosFijos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ARMASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CARGO_OCUPACIONALDataTable
        Inherits Global.System.Data.TypedTableBase(Of CARGO_OCUPACIONALRow)
        
        Private columnID_CARGO_OCUPACIONAL As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnID_SERIE_OCUPACIONAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CARGO_OCUPACIONAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CARGO_OCUPACIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CARGO_OCUPACIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_SERIE_OCUPACIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SERIE_OCUPACIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CARGO_OCUPACIONALRow
            Get
                Return CType(Me.Rows(index),CARGO_OCUPACIONALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARGO_OCUPACIONALRowChanging As CARGO_OCUPACIONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARGO_OCUPACIONALRowChanged As CARGO_OCUPACIONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARGO_OCUPACIONALRowDeleting As CARGO_OCUPACIONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARGO_OCUPACIONALRowDeleted As CARGO_OCUPACIONALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCARGO_OCUPACIONALRow(ByVal row As CARGO_OCUPACIONALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCARGO_OCUPACIONALRow(ByVal ID_CARGO_OCUPACIONAL As Integer, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal ESTADO As Integer, ByVal ID_SERIE_OCUPACIONAL As Integer) As CARGO_OCUPACIONALRow
            Dim rowCARGO_OCUPACIONALRow As CARGO_OCUPACIONALRow = CType(Me.NewRow,CARGO_OCUPACIONALRow)
            Dim columnValuesArray() As Object = New Object() {ID_CARGO_OCUPACIONAL, CODIGO, DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL}
            rowCARGO_OCUPACIONALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCARGO_OCUPACIONALRow)
            Return rowCARGO_OCUPACIONALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_CARGO_OCUPACIONAL(ByVal ID_CARGO_OCUPACIONAL As Integer) As CARGO_OCUPACIONALRow
            Return CType(Me.Rows.Find(New Object() {ID_CARGO_OCUPACIONAL}),CARGO_OCUPACIONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CARGO_OCUPACIONALDataTable = CType(MyBase.Clone,CARGO_OCUPACIONALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CARGO_OCUPACIONALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_CARGO_OCUPACIONAL = MyBase.Columns("ID_CARGO_OCUPACIONAL")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnID_SERIE_OCUPACIONAL = MyBase.Columns("ID_SERIE_OCUPACIONAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_CARGO_OCUPACIONAL = New Global.System.Data.DataColumn("ID_CARGO_OCUPACIONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CARGO_OCUPACIONAL)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_SERIE_OCUPACIONAL = New Global.System.Data.DataColumn("ID_SERIE_OCUPACIONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SERIE_OCUPACIONAL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_CARGO_OCUPACIONAL}, true))
            Me.columnID_CARGO_OCUPACIONAL.AllowDBNull = false
            Me.columnID_CARGO_OCUPACIONAL.Unique = true
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
            Me.columnID_SERIE_OCUPACIONAL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCARGO_OCUPACIONALRow() As CARGO_OCUPACIONALRow
            Return CType(Me.NewRow,CARGO_OCUPACIONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CARGO_OCUPACIONALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CARGO_OCUPACIONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CARGO_OCUPACIONALRowChangedEvent) Is Nothing) Then
                RaiseEvent CARGO_OCUPACIONALRowChanged(Me, New CARGO_OCUPACIONALRowChangeEvent(CType(e.Row,CARGO_OCUPACIONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CARGO_OCUPACIONALRowChangingEvent) Is Nothing) Then
                RaiseEvent CARGO_OCUPACIONALRowChanging(Me, New CARGO_OCUPACIONALRowChangeEvent(CType(e.Row,CARGO_OCUPACIONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CARGO_OCUPACIONALRowDeletedEvent) Is Nothing) Then
                RaiseEvent CARGO_OCUPACIONALRowDeleted(Me, New CARGO_OCUPACIONALRowChangeEvent(CType(e.Row,CARGO_OCUPACIONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CARGO_OCUPACIONALRowDeletingEvent) Is Nothing) Then
                RaiseEvent CARGO_OCUPACIONALRowDeleting(Me, New CARGO_OCUPACIONALRowChangeEvent(CType(e.Row,CARGO_OCUPACIONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCARGO_OCUPACIONALRow(ByVal row As CARGO_OCUPACIONALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijos = New dsActivosFijos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CARGO_OCUPACIONALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AREA_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of AREA_GENERALRow)
        
        Private columnID_AREA_GENERAL As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_AREA As Global.System.Data.DataColumn
        
        Private columnESTADO_AREA As Global.System.Data.DataColumn
        
        Private columnID_GERENCIAS_GENERAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AREA_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_AREA_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AREA_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_GERENCIAS_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_GERENCIAS_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AREA_GENERALRow
            Get
                Return CType(Me.Rows(index),AREA_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event AREA_GENERALRowChanging As AREA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event AREA_GENERALRowChanged As AREA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event AREA_GENERALRowDeleting As AREA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event AREA_GENERALRowDeleted As AREA_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddAREA_GENERALRow(ByVal row As AREA_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddAREA_GENERALRow(ByVal ID_AREA_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_AREA As String, ByVal ESTADO_AREA As Integer, ByVal ID_GERENCIAS_GENERAL As Integer) As AREA_GENERALRow
            Dim rowAREA_GENERALRow As AREA_GENERALRow = CType(Me.NewRow,AREA_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_AREA_GENERAL, CODIGO, NOMBRE_AREA, ESTADO_AREA, ID_GERENCIAS_GENERAL}
            rowAREA_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAREA_GENERALRow)
            Return rowAREA_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_AREA_GENERAL(ByVal ID_AREA_GENERAL As Integer) As AREA_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_AREA_GENERAL}),AREA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AREA_GENERALDataTable = CType(MyBase.Clone,AREA_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AREA_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_AREA_GENERAL = MyBase.Columns("ID_AREA_GENERAL")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnNOMBRE_AREA = MyBase.Columns("NOMBRE_AREA")
            Me.columnESTADO_AREA = MyBase.Columns("ESTADO_AREA")
            Me.columnID_GERENCIAS_GENERAL = MyBase.Columns("ID_GERENCIAS_GENERAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_AREA_GENERAL = New Global.System.Data.DataColumn("ID_AREA_GENERAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AREA_GENERAL)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnNOMBRE_AREA = New Global.System.Data.DataColumn("NOMBRE_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_AREA)
            Me.columnESTADO_AREA = New Global.System.Data.DataColumn("ESTADO_AREA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_AREA)
            Me.columnID_GERENCIAS_GENERAL = New Global.System.Data.DataColumn("ID_GERENCIAS_GENERAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_GERENCIAS_GENERAL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_AREA_GENERAL}, true))
            Me.columnID_AREA_GENERAL.AllowDBNull = false
            Me.columnID_AREA_GENERAL.Unique = true
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnNOMBRE_AREA.AllowDBNull = false
            Me.columnNOMBRE_AREA.MaxLength = 2147483647
            Me.columnESTADO_AREA.AllowDBNull = false
            Me.columnID_GERENCIAS_GENERAL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewAREA_GENERALRow() As AREA_GENERALRow
            Return CType(Me.NewRow,AREA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AREA_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AREA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AREA_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent AREA_GENERALRowChanged(Me, New AREA_GENERALRowChangeEvent(CType(e.Row,AREA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AREA_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent AREA_GENERALRowChanging(Me, New AREA_GENERALRowChangeEvent(CType(e.Row,AREA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AREA_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent AREA_GENERALRowDeleted(Me, New AREA_GENERALRowChangeEvent(CType(e.Row,AREA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AREA_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent AREA_GENERALRowDeleting(Me, New AREA_GENERALRowChangeEvent(CType(e.Row,AREA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveAREA_GENERALRow(ByVal row As AREA_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijos = New dsActivosFijos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AREA_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PERSONALRow
        Inherits Global.System.Data.DataRow
        
        Private tablePERSONAL As PERSONALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePERSONAL = CType(Me.Table,PERSONALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_PERSONAL() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.ID_PERSONALColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.ID_PERSONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CEDULA() As String
            Get
                Return CType(Me(Me.tablePERSONAL.CEDULAColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.CEDULAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRES() As String
            Get
                Return CType(Me(Me.tablePERSONAL.NOMBRESColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.NOMBRESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property APELLIDOS() As String
            Get
                Return CType(Me(Me.tablePERSONAL.APELLIDOSColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.APELLIDOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PROVINCIA() As String
            Get
                Return CType(Me(Me.tablePERSONAL.PROVINCIAColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.PROVINCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DIRECCION() As String
            Get
                Return CType(Me(Me.tablePERSONAL.DIRECCIONColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_NACIMIENTO() As Date
            Get
                Return CType(Me(Me.tablePERSONAL.FECHA_NACIMIENTOColumn),Date)
            End Get
            Set
                Me(Me.tablePERSONAL.FECHA_NACIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SEXO() As String
            Get
                Return CType(Me(Me.tablePERSONAL.SEXOColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.SEXOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CIUDAD() As String
            Get
                Return CType(Me(Me.tablePERSONAL.CIUDADColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SUELDO() As Decimal
            Get
                Return CType(Me(Me.tablePERSONAL.SUELDOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERSONAL.SUELDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LIBRETA_MILITAR() As String
            Get
                Return CType(Me(Me.tablePERSONAL.LIBRETA_MILITARColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.LIBRETA_MILITARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_SANGRE() As String
            Get
                Return CType(Me(Me.tablePERSONAL.TIPO_SANGREColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.TIPO_SANGREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PASAPORTE() As String
            Get
                Return CType(Me(Me.tablePERSONAL.PASAPORTEColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.PASAPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PESO() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.PESOColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.PESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property EDAD() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.EDADColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.EDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PRUEBA_ANTIDROGA() As String
            Get
                Return CType(Me(Me.tablePERSONAL.PRUEBA_ANTIDROGAColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.PRUEBA_ANTIDROGAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_ENTRADA() As Date
            Get
                Return CType(Me(Me.tablePERSONAL.FECHA_ENTRADAColumn),Date)
            End Get
            Set
                Me(Me.tablePERSONAL.FECHA_ENTRADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_SALIDA() As Date
            Get
                Return CType(Me(Me.tablePERSONAL.FECHA_SALIDAColumn),Date)
            End Get
            Set
                Me(Me.tablePERSONAL.FECHA_SALIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_PERSONAL() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.ESTADO_PERSONALColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.ESTADO_PERSONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_AREA() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.ID_AREAColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.ID_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CARGO_OCUPACIONAL() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.ID_CARGO_OCUPACIONALColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.ID_CARGO_OCUPACIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UBICACION() As String
            Get
                Return CType(Me(Me.tablePERSONAL.UBICACIONColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.UBICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property INSTRUCCION() As String
            Get
                Return CType(Me(Me.tablePERSONAL.INSTRUCCIONColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.INSTRUCCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_CIVIL() As String
            Get
                Return CType(Me(Me.tablePERSONAL.ESTADO_CIVILColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.ESTADO_CIVILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CARGO_OCUPACIONALRow() As CARGO_OCUPACIONALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PERSONAL_CARGO_OCUPACIONAL")),CARGO_OCUPACIONALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PERSONAL_CARGO_OCUPACIONAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property AREA_GENERALRow() As AREA_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PERSONAL_AREA_GENERAL")),AREA_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PERSONAL_AREA_GENERAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetACTIVO_FIJO_GENERALRows() As ACTIVO_FIJO_GENERALRow()
            If (Me.Table.ChildRelations("FK_ACTIVO_FIJO_GENERAL_PERSONAL") Is Nothing) Then
                Return New ACTIVO_FIJO_GENERALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ACTIVO_FIJO_GENERAL_PERSONAL")),ACTIVO_FIJO_GENERALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RADIOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableRADIOS As RADIOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRADIOS = CType(Me.Table,RADIOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableRADIOS.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableRADIOS.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableRADIOS.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableRADIOS.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableRADIOS.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_PERMISO_USO() As String
            Get
                Return CType(Me(Me.tableRADIOS.NUM_PERMISO_USOColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.NUM_PERMISO_USOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_ACEPTACION_PERMISO() As Date
            Get
                Return CType(Me(Me.tableRADIOS.FEC_ACEPTACION_PERMISOColumn),Date)
            End Get
            Set
                Me(Me.tableRADIOS.FEC_ACEPTACION_PERMISOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_CADUCIDAD_PERMISO() As Date
            Get
                Return CType(Me(Me.tableRADIOS.FEC_CADUCIDAD_PERMISOColumn),Date)
            End Get
            Set
                Me(Me.tableRADIOS.FEC_CADUCIDAD_PERMISOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableRADIOS.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableRADIOS.COLORColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableRADIOS.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableRADIOS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RADIOS_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RADIOS_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ACTIVO_FIJO_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACTIVO_FIJO_GENERAL = CType(Me.Table,ACTIVO_FIJO_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_PERSONAL() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_PERSONALColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_PERSONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_SUCURSAL() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_SUCURSALColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_GERENCIAS() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_GERENCIASColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_GERENCIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_AREA() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_AREAColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CARPETA() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CARPETAColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CARPETAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONTRATO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CONTRATOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CONTRATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_ACTIVO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_PROVEDOR() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_PROVEDORColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_PROVEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_CUSTODIO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_CUSTODIOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_CUSTODIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RESPONSABLE() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.RESPONSABLEColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.RESPONSABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA() As Date
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_ARANCEL() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CODIGO_ARANCELColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CODIGO_ARANCELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_ORDEN_COMPRA() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NUM_ORDEN_COMPRAColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NUM_ORDEN_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_FACTURA() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NUM_FACTURAColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NUM_FACTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_FACTURA() As Decimal
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_FACTURAColumn),Decimal)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_FACTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_ADICIONAL() As Decimal
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_ADICIONALColumn),Decimal)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_ADICIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_RESIDUAL() As Decimal
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_RESIDUALColumn),Decimal)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_RESIDUALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_ADQUISICION() As Date
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.FECHA_ADQUISICIONColumn),Date)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.FECHA_ADQUISICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property AÑOS_VIDA_UTIL() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.AÑOS_VIDA_UTILColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.AÑOS_VIDA_UTILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CTA_ACTIVO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CTA_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CTA_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CTA_GASTOS() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CTA_GASTOSColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CTA_GASTOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CTA_DEPRECIACION() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CTA_DEPRECIACIONColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CTA_DEPRECIACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.TIPO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.TIPO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PERSONALRow() As PERSONALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ACTIVO_FIJO_GENERAL_PERSONAL")),PERSONALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ACTIVO_FIJO_GENERAL_PERSONAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRADIOSRows() As RADIOSRow()
            If (Me.Table.ChildRelations("FK_RADIOS_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New RADIOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RADIOS_ACTIVO_FIJO_GENERAL")),RADIOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetARMASRows() As ARMASRow()
            If (Me.Table.ChildRelations("FK_ARMAS_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New ARMASRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ARMAS_ACTIVO_FIJO_GENERAL")),ARMASRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ARMASRow
        Inherits Global.System.Data.DataRow
        
        Private tableARMAS As ARMASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableARMAS = CType(Me.Table,ARMASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableARMAS.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableARMAS.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_PERMISO_GOBIERNO() As String
            Get
                Return CType(Me(Me.tableARMAS.NUM_PERMISO_GOBIERNOColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.NUM_PERMISO_GOBIERNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_PERMISO_COMANDO() As String
            Get
                Return CType(Me(Me.tableARMAS.NUM_PERMISO_COMANDOColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.NUM_PERMISO_COMANDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_TENENCIA_ARMAS() As String
            Get
                Return CType(Me(Me.tableARMAS.NUM_TENENCIA_ARMASColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.NUM_TENENCIA_ARMASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_ACEPTACION_TENENCIA() As Date
            Get
                Return CType(Me(Me.tableARMAS.FEC_ACEPTACION_TENENCIAColumn),Date)
            End Get
            Set
                Me(Me.tableARMAS.FEC_ACEPTACION_TENENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_CADUCIDAD_TENENCIA() As Date
            Get
                Return CType(Me(Me.tableARMAS.FEC_CADUCIDAD_TENENCIAColumn),Date)
            End Get
            Set
                Me(Me.tableARMAS.FEC_CADUCIDAD_TENENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_MATRICULA_ARMA() As String
            Get
                Return CType(Me(Me.tableARMAS.NUM_MATRICULA_ARMAColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.NUM_MATRICULA_ARMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_ACEPTACION_MATRICULA() As Date
            Get
                Return CType(Me(Me.tableARMAS.FEC_ACEPTACION_MATRICULAColumn),Date)
            End Get
            Set
                Me(Me.tableARMAS.FEC_ACEPTACION_MATRICULAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_CADUCIDAD_MATRICULA() As Date
            Get
                Return CType(Me(Me.tableARMAS.FEC_CADUCIDAD_MATRICULAColumn),Date)
            End Get
            Set
                Me(Me.tableARMAS.FEC_CADUCIDAD_MATRICULAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableARMAS.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableARMAS.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableARMAS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ARMAS_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ARMAS_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CARGO_OCUPACIONALRow
        Inherits Global.System.Data.DataRow
        
        Private tableCARGO_OCUPACIONAL As CARGO_OCUPACIONALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCARGO_OCUPACIONAL = CType(Me.Table,CARGO_OCUPACIONALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CARGO_OCUPACIONAL() As Integer
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.ID_CARGO_OCUPACIONALColumn),Integer)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.ID_CARGO_OCUPACIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_SERIE_OCUPACIONAL() As Integer
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.ID_SERIE_OCUPACIONALColumn),Integer)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.ID_SERIE_OCUPACIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPERSONALRows() As PERSONALRow()
            If (Me.Table.ChildRelations("FK_PERSONAL_CARGO_OCUPACIONAL") Is Nothing) Then
                Return New PERSONALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PERSONAL_CARGO_OCUPACIONAL")),PERSONALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AREA_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableAREA_GENERAL As AREA_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAREA_GENERAL = CType(Me.Table,AREA_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_AREA_GENERAL() As Integer
            Get
                Return CType(Me(Me.tableAREA_GENERAL.ID_AREA_GENERALColumn),Integer)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.ID_AREA_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tableAREA_GENERAL.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_AREA() As String
            Get
                Return CType(Me(Me.tableAREA_GENERAL.NOMBRE_AREAColumn),String)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.NOMBRE_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_AREA() As Integer
            Get
                Return CType(Me(Me.tableAREA_GENERAL.ESTADO_AREAColumn),Integer)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.ESTADO_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_GERENCIAS_GENERAL() As Integer
            Get
                Return CType(Me(Me.tableAREA_GENERAL.ID_GERENCIAS_GENERALColumn),Integer)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.ID_GERENCIAS_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPERSONALRows() As PERSONALRow()
            If (Me.Table.ChildRelations("FK_PERSONAL_AREA_GENERAL") Is Nothing) Then
                Return New PERSONALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PERSONAL_AREA_GENERAL")),PERSONALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class PERSONALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PERSONALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As PERSONALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As PERSONALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RADIOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RADIOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RADIOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RADIOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class ACTIVO_FIJO_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACTIVO_FIJO_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As ACTIVO_FIJO_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As ACTIVO_FIJO_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class ARMASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ARMASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As ARMASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As ARMASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CARGO_OCUPACIONALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CARGO_OCUPACIONALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CARGO_OCUPACIONALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CARGO_OCUPACIONALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class AREA_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AREA_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As AREA_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As AREA_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsActivosFijosTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PERSONALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PERSONAL"
            tableMapping.ColumnMappings.Add("ID_PERSONAL", "ID_PERSONAL")
            tableMapping.ColumnMappings.Add("CEDULA", "CEDULA")
            tableMapping.ColumnMappings.Add("NOMBRES", "NOMBRES")
            tableMapping.ColumnMappings.Add("APELLIDOS", "APELLIDOS")
            tableMapping.ColumnMappings.Add("PROVINCIA", "PROVINCIA")
            tableMapping.ColumnMappings.Add("DIRECCION", "DIRECCION")
            tableMapping.ColumnMappings.Add("FECHA_NACIMIENTO", "FECHA_NACIMIENTO")
            tableMapping.ColumnMappings.Add("SEXO", "SEXO")
            tableMapping.ColumnMappings.Add("CIUDAD", "CIUDAD")
            tableMapping.ColumnMappings.Add("SUELDO", "SUELDO")
            tableMapping.ColumnMappings.Add("LIBRETA_MILITAR", "LIBRETA_MILITAR")
            tableMapping.ColumnMappings.Add("TIPO_SANGRE", "TIPO_SANGRE")
            tableMapping.ColumnMappings.Add("PASAPORTE", "PASAPORTE")
            tableMapping.ColumnMappings.Add("PESO", "PESO")
            tableMapping.ColumnMappings.Add("EDAD", "EDAD")
            tableMapping.ColumnMappings.Add("PRUEBA_ANTIDROGA", "PRUEBA_ANTIDROGA")
            tableMapping.ColumnMappings.Add("FECHA_ENTRADA", "FECHA_ENTRADA")
            tableMapping.ColumnMappings.Add("FECHA_SALIDA", "FECHA_SALIDA")
            tableMapping.ColumnMappings.Add("ESTADO_PERSONAL", "ESTADO_PERSONAL")
            tableMapping.ColumnMappings.Add("ID_AREA", "ID_AREA")
            tableMapping.ColumnMappings.Add("ID_CARGO_OCUPACIONAL", "ID_CARGO_OCUPACIONAL")
            tableMapping.ColumnMappings.Add("UBICACION", "UBICACION")
            tableMapping.ColumnMappings.Add("INSTRUCCION", "INSTRUCCION")
            tableMapping.ColumnMappings.Add("ESTADO_CIVIL", "ESTADO_CIVIL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PERSONAL] WHERE (([ID_PERSONAL] = @Original_ID_PERSONAL) AND ("& _ 
                "[CEDULA] = @Original_CEDULA) AND ([FECHA_NACIMIENTO] = @Original_FECHA_NACIMIENT"& _ 
                "O) AND ([SEXO] = @Original_SEXO) AND ([SUELDO] = @Original_SUELDO) AND ([LIBRETA"& _ 
                "_MILITAR] = @Original_LIBRETA_MILITAR) AND ([TIPO_SANGRE] = @Original_TIPO_SANGR"& _ 
                "E) AND ([PASAPORTE] = @Original_PASAPORTE) AND ([PESO] = @Original_PESO) AND ([E"& _ 
                "DAD] = @Original_EDAD) AND ([PRUEBA_ANTIDROGA] = @Original_PRUEBA_ANTIDROGA) AND"& _ 
                " ([FECHA_ENTRADA] = @Original_FECHA_ENTRADA) AND ([FECHA_SALIDA] = @Original_FEC"& _ 
                "HA_SALIDA) AND ([ESTADO_PERSONAL] = @Original_ESTADO_PERSONAL) AND ([ID_AREA] = "& _ 
                "@Original_ID_AREA) AND ([ID_CARGO_OCUPACIONAL] = @Original_ID_CARGO_OCUPACIONAL)"& _ 
                " AND ([ESTADO_CIVIL] = @Original_ESTADO_CIVIL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEDULA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEDULA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_NACIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUELDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUELDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIBRETA_MILITAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIBRETA_MILITAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIPO_SANGRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_SANGRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PASAPORTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PASAPORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PESO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PESO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDAD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRUEBA_ANTIDROGA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRUEBA_ANTIDROGA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ENTRADA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_SALIDA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_CIVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CIVIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PERSONAL] ([ID_PERSONAL], [CEDULA], [NOMBRES], [APELLIDOS], [P"& _ 
                "ROVINCIA], [DIRECCION], [FECHA_NACIMIENTO], [SEXO], [CIUDAD], [SUELDO], [LIBRETA"& _ 
                "_MILITAR], [TIPO_SANGRE], [PASAPORTE], [PESO], [EDAD], [PRUEBA_ANTIDROGA], [FECH"& _ 
                "A_ENTRADA], [FECHA_SALIDA], [ESTADO_PERSONAL], [ID_AREA], [ID_CARGO_OCUPACIONAL]"& _ 
                ", [UBICACION], [INSTRUCCION], [ESTADO_CIVIL]) VALUES (@ID_PERSONAL, @CEDULA, @NO"& _ 
                "MBRES, @APELLIDOS, @PROVINCIA, @DIRECCION, @FECHA_NACIMIENTO, @SEXO, @CIUDAD, @S"& _ 
                "UELDO, @LIBRETA_MILITAR, @TIPO_SANGRE, @PASAPORTE, @PESO, @EDAD, @PRUEBA_ANTIDRO"& _ 
                "GA, @FECHA_ENTRADA, @FECHA_SALIDA, @ESTADO_PERSONAL, @ID_AREA, @ID_CARGO_OCUPACI"& _ 
                "ONAL, @UBICACION, @INSTRUCCION, @ESTADO_CIVIL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PERSONAL, CEDULA, NOM"& _ 
                "BRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIMIENTO, SEXO, CIUDAD, SUELDO, L"& _ 
                "IBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD, PRUEBA_ANTIDROGA, FECHA_ENTR"& _ 
                "ADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, ID_CARGO_OCUPACIONAL, UBICACION, IN"& _ 
                "STRUCCION, ESTADO_CIVIL FROM PERSONAL WHERE (ID_PERSONAL = @ID_PERSONAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEDULA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEDULA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@APELLIDOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "APELLIDOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCIA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_NACIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CIUDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CIUDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUELDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUELDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIBRETA_MILITAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIBRETA_MILITAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_SANGRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_SANGRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PASAPORTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PASAPORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PESO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PESO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRUEBA_ANTIDROGA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRUEBA_ANTIDROGA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ENTRADA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_SALIDA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UBICACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UBICACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUCCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUCCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_CIVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CIVIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PERSONAL] SET [ID_PERSONAL] = @ID_PERSONAL, [CEDULA] = @CEDULA, [NO"& _ 
                "MBRES] = @NOMBRES, [APELLIDOS] = @APELLIDOS, [PROVINCIA] = @PROVINCIA, [DIRECCIO"& _ 
                "N] = @DIRECCION, [FECHA_NACIMIENTO] = @FECHA_NACIMIENTO, [SEXO] = @SEXO, [CIUDAD"& _ 
                "] = @CIUDAD, [SUELDO] = @SUELDO, [LIBRETA_MILITAR] = @LIBRETA_MILITAR, [TIPO_SAN"& _ 
                "GRE] = @TIPO_SANGRE, [PASAPORTE] = @PASAPORTE, [PESO] = @PESO, [EDAD] = @EDAD, ["& _ 
                "PRUEBA_ANTIDROGA] = @PRUEBA_ANTIDROGA, [FECHA_ENTRADA] = @FECHA_ENTRADA, [FECHA_"& _ 
                "SALIDA] = @FECHA_SALIDA, [ESTADO_PERSONAL] = @ESTADO_PERSONAL, [ID_AREA] = @ID_A"& _ 
                "REA, [ID_CARGO_OCUPACIONAL] = @ID_CARGO_OCUPACIONAL, [UBICACION] = @UBICACION, ["& _ 
                "INSTRUCCION] = @INSTRUCCION, [ESTADO_CIVIL] = @ESTADO_CIVIL WHERE (([ID_PERSONAL"& _ 
                "] = @Original_ID_PERSONAL) AND ([CEDULA] = @Original_CEDULA) AND ([FECHA_NACIMIE"& _ 
                "NTO] = @Original_FECHA_NACIMIENTO) AND ([SEXO] = @Original_SEXO) AND ([SUELDO] ="& _ 
                " @Original_SUELDO) AND ([LIBRETA_MILITAR] = @Original_LIBRETA_MILITAR) AND ([TIP"& _ 
                "O_SANGRE] = @Original_TIPO_SANGRE) AND ([PASAPORTE] = @Original_PASAPORTE) AND ("& _ 
                "[PESO] = @Original_PESO) AND ([EDAD] = @Original_EDAD) AND ([PRUEBA_ANTIDROGA] ="& _ 
                " @Original_PRUEBA_ANTIDROGA) AND ([FECHA_ENTRADA] = @Original_FECHA_ENTRADA) AND"& _ 
                " ([FECHA_SALIDA] = @Original_FECHA_SALIDA) AND ([ESTADO_PERSONAL] = @Original_ES"& _ 
                "TADO_PERSONAL) AND ([ID_AREA] = @Original_ID_AREA) AND ([ID_CARGO_OCUPACIONAL] ="& _ 
                " @Original_ID_CARGO_OCUPACIONAL) AND ([ESTADO_CIVIL] = @Original_ESTADO_CIVIL));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PERSONAL, CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NA"& _ 
                "CIMIENTO, SEXO, CIUDAD, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, E"& _ 
                "DAD, PRUEBA_ANTIDROGA, FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, ID"& _ 
                "_CARGO_OCUPACIONAL, UBICACION, INSTRUCCION, ESTADO_CIVIL FROM PERSONAL WHERE (ID"& _ 
                "_PERSONAL = @ID_PERSONAL)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEDULA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEDULA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@APELLIDOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "APELLIDOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCIA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_NACIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CIUDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CIUDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUELDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUELDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIBRETA_MILITAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIBRETA_MILITAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_SANGRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_SANGRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PASAPORTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PASAPORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PESO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PESO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRUEBA_ANTIDROGA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRUEBA_ANTIDROGA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ENTRADA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_SALIDA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UBICACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UBICACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUCCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUCCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_CIVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CIVIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEDULA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEDULA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_NACIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUELDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUELDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIBRETA_MILITAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIBRETA_MILITAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIPO_SANGRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_SANGRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PASAPORTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PASAPORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PESO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PESO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDAD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRUEBA_ANTIDROGA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRUEBA_ANTIDROGA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ENTRADA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_SALIDA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_CIVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CIVIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_PERSONAL, CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIM"& _ 
                "IENTO, SEXO, CIUDAD, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD"& _ 
                ", PRUEBA_ANTIDROGA, FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, ID_CA"& _ 
                "RGO_OCUPACIONAL, UBICACION, INSTRUCCION, ESTADO_CIVIL FROM dbo.PERSONAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijos.PERSONALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijos.PERSONALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijos.PERSONALDataTable = New dsActivosFijos.PERSONALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijos.PERSONALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijos) As Integer
            Return Me.Adapter.Update(dataSet, "PERSONAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_CEDULA As String,  _
                    ByVal Original_FECHA_NACIMIENTO As Date,  _
                    ByVal Original_SEXO As String,  _
                    ByVal Original_SUELDO As Decimal,  _
                    ByVal Original_LIBRETA_MILITAR As String,  _
                    ByVal Original_TIPO_SANGRE As String,  _
                    ByVal Original_PASAPORTE As String,  _
                    ByVal Original_PESO As Integer,  _
                    ByVal Original_EDAD As Integer,  _
                    ByVal Original_PRUEBA_ANTIDROGA As String,  _
                    ByVal Original_FECHA_ENTRADA As Date,  _
                    ByVal Original_FECHA_SALIDA As Date,  _
                    ByVal Original_ESTADO_PERSONAL As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal Original_ESTADO_CIVIL As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_PERSONAL,Integer)
            If (Original_CEDULA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CEDULA")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CEDULA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FECHA_NACIMIENTO,Date)
            If (Original_SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SEXO")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SEXO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SUELDO,Decimal)
            If (Original_LIBRETA_MILITAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LIBRETA_MILITAR")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_LIBRETA_MILITAR,String)
            End If
            If (Original_TIPO_SANGRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIPO_SANGRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_TIPO_SANGRE,String)
            End If
            If (Original_PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASAPORTE")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PASAPORTE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PESO,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_EDAD,Integer)
            If (Original_PRUEBA_ANTIDROGA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRUEBA_ANTIDROGA")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PRUEBA_ANTIDROGA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_FECHA_ENTRADA,Date)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_FECHA_SALIDA,Date)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_ESTADO_PERSONAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ID_AREA,Integer)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_ID_CARGO_OCUPACIONAL,Integer)
            If (Original_ESTADO_CIVIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESTADO_CIVIL")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ESTADO_CIVIL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal CEDULA As String,  _
                    ByVal NOMBRES As String,  _
                    ByVal APELLIDOS As String,  _
                    ByVal PROVINCIA As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal FECHA_NACIMIENTO As Date,  _
                    ByVal SEXO As String,  _
                    ByVal CIUDAD As String,  _
                    ByVal SUELDO As Decimal,  _
                    ByVal LIBRETA_MILITAR As String,  _
                    ByVal TIPO_SANGRE As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal PESO As Integer,  _
                    ByVal EDAD As Integer,  _
                    ByVal PRUEBA_ANTIDROGA As String,  _
                    ByVal FECHA_ENTRADA As Date,  _
                    ByVal FECHA_SALIDA As Date,  _
                    ByVal ESTADO_PERSONAL As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal UBICACION As String,  _
                    ByVal INSTRUCCION As String,  _
                    ByVal ESTADO_CIVIL As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_PERSONAL,Integer)
            If (CEDULA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CEDULA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CEDULA,String)
            End If
            If (NOMBRES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRES")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NOMBRES,String)
            End If
            If (APELLIDOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDOS")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(APELLIDOS,String)
            End If
            If (PROVINCIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVINCIA")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PROVINCIA,String)
            End If
            If (DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DIRECCION")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DIRECCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(FECHA_NACIMIENTO,Date)
            If (SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SEXO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SEXO,String)
            End If
            If (CIUDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIUDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CIUDAD,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(SUELDO,Decimal)
            If (LIBRETA_MILITAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LIBRETA_MILITAR")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LIBRETA_MILITAR,String)
            End If
            If (TIPO_SANGRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_SANGRE")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(TIPO_SANGRE,String)
            End If
            If (PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASAPORTE")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PASAPORTE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(PESO,Integer)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(EDAD,Integer)
            If (PRUEBA_ANTIDROGA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRUEBA_ANTIDROGA")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PRUEBA_ANTIDROGA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(FECHA_ENTRADA,Date)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(FECHA_SALIDA,Date)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(ESTADO_PERSONAL,Integer)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(ID_AREA,Integer)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(ID_CARGO_OCUPACIONAL,Integer)
            If (UBICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UBICACION")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(UBICACION,String)
            End If
            If (INSTRUCCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSTRUCCION")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(INSTRUCCION,String)
            End If
            If (ESTADO_CIVIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_CIVIL")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(ESTADO_CIVIL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal CEDULA As String,  _
                    ByVal NOMBRES As String,  _
                    ByVal APELLIDOS As String,  _
                    ByVal PROVINCIA As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal FECHA_NACIMIENTO As Date,  _
                    ByVal SEXO As String,  _
                    ByVal CIUDAD As String,  _
                    ByVal SUELDO As Decimal,  _
                    ByVal LIBRETA_MILITAR As String,  _
                    ByVal TIPO_SANGRE As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal PESO As Integer,  _
                    ByVal EDAD As Integer,  _
                    ByVal PRUEBA_ANTIDROGA As String,  _
                    ByVal FECHA_ENTRADA As Date,  _
                    ByVal FECHA_SALIDA As Date,  _
                    ByVal ESTADO_PERSONAL As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal UBICACION As String,  _
                    ByVal INSTRUCCION As String,  _
                    ByVal ESTADO_CIVIL As String,  _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_CEDULA As String,  _
                    ByVal Original_FECHA_NACIMIENTO As Date,  _
                    ByVal Original_SEXO As String,  _
                    ByVal Original_SUELDO As Decimal,  _
                    ByVal Original_LIBRETA_MILITAR As String,  _
                    ByVal Original_TIPO_SANGRE As String,  _
                    ByVal Original_PASAPORTE As String,  _
                    ByVal Original_PESO As Integer,  _
                    ByVal Original_EDAD As Integer,  _
                    ByVal Original_PRUEBA_ANTIDROGA As String,  _
                    ByVal Original_FECHA_ENTRADA As Date,  _
                    ByVal Original_FECHA_SALIDA As Date,  _
                    ByVal Original_ESTADO_PERSONAL As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal Original_ESTADO_CIVIL As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_PERSONAL,Integer)
            If (CEDULA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CEDULA")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CEDULA,String)
            End If
            If (NOMBRES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRES")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NOMBRES,String)
            End If
            If (APELLIDOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(APELLIDOS,String)
            End If
            If (PROVINCIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVINCIA")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PROVINCIA,String)
            End If
            If (DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DIRECCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FECHA_NACIMIENTO,Date)
            If (SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SEXO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SEXO,String)
            End If
            If (CIUDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIUDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CIUDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SUELDO,Decimal)
            If (LIBRETA_MILITAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LIBRETA_MILITAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LIBRETA_MILITAR,String)
            End If
            If (TIPO_SANGRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_SANGRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(TIPO_SANGRE,String)
            End If
            If (PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASAPORTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PASAPORTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PESO,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(EDAD,Integer)
            If (PRUEBA_ANTIDROGA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRUEBA_ANTIDROGA")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PRUEBA_ANTIDROGA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(FECHA_ENTRADA,Date)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(FECHA_SALIDA,Date)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ESTADO_PERSONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ID_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(ID_CARGO_OCUPACIONAL,Integer)
            If (UBICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UBICACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(UBICACION,String)
            End If
            If (INSTRUCCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSTRUCCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(INSTRUCCION,String)
            End If
            If (ESTADO_CIVIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_CIVIL")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ESTADO_CIVIL,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ID_PERSONAL,Integer)
            If (Original_CEDULA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CEDULA")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_CEDULA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_FECHA_NACIMIENTO,Date)
            If (Original_SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SEXO")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_SEXO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SUELDO,Decimal)
            If (Original_LIBRETA_MILITAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LIBRETA_MILITAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_LIBRETA_MILITAR,String)
            End If
            If (Original_TIPO_SANGRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIPO_SANGRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_TIPO_SANGRE,String)
            End If
            If (Original_PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASAPORTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_PASAPORTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_PESO,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_EDAD,Integer)
            If (Original_PRUEBA_ANTIDROGA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRUEBA_ANTIDROGA")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_PRUEBA_ANTIDROGA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_FECHA_ENTRADA,Date)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_FECHA_SALIDA,Date)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ESTADO_PERSONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ID_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ID_CARGO_OCUPACIONAL,Integer)
            If (Original_ESTADO_CIVIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESTADO_CIVIL")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_ESTADO_CIVIL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CEDULA As String,  _
                    ByVal NOMBRES As String,  _
                    ByVal APELLIDOS As String,  _
                    ByVal PROVINCIA As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal FECHA_NACIMIENTO As Date,  _
                    ByVal SEXO As String,  _
                    ByVal CIUDAD As String,  _
                    ByVal SUELDO As Decimal,  _
                    ByVal LIBRETA_MILITAR As String,  _
                    ByVal TIPO_SANGRE As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal PESO As Integer,  _
                    ByVal EDAD As Integer,  _
                    ByVal PRUEBA_ANTIDROGA As String,  _
                    ByVal FECHA_ENTRADA As Date,  _
                    ByVal FECHA_SALIDA As Date,  _
                    ByVal ESTADO_PERSONAL As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal UBICACION As String,  _
                    ByVal INSTRUCCION As String,  _
                    ByVal ESTADO_CIVIL As String,  _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_CEDULA As String,  _
                    ByVal Original_FECHA_NACIMIENTO As Date,  _
                    ByVal Original_SEXO As String,  _
                    ByVal Original_SUELDO As Decimal,  _
                    ByVal Original_LIBRETA_MILITAR As String,  _
                    ByVal Original_TIPO_SANGRE As String,  _
                    ByVal Original_PASAPORTE As String,  _
                    ByVal Original_PESO As Integer,  _
                    ByVal Original_EDAD As Integer,  _
                    ByVal Original_PRUEBA_ANTIDROGA As String,  _
                    ByVal Original_FECHA_ENTRADA As Date,  _
                    ByVal Original_FECHA_SALIDA As Date,  _
                    ByVal Original_ESTADO_PERSONAL As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal Original_ESTADO_CIVIL As String) As Integer
            Return Me.Update(Original_ID_PERSONAL, CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIMIENTO, SEXO, CIUDAD, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD, PRUEBA_ANTIDROGA, FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, ID_CARGO_OCUPACIONAL, UBICACION, INSTRUCCION, ESTADO_CIVIL, Original_ID_PERSONAL, Original_CEDULA, Original_FECHA_NACIMIENTO, Original_SEXO, Original_SUELDO, Original_LIBRETA_MILITAR, Original_TIPO_SANGRE, Original_PASAPORTE, Original_PESO, Original_EDAD, Original_PRUEBA_ANTIDROGA, Original_FECHA_ENTRADA, Original_FECHA_SALIDA, Original_ESTADO_PERSONAL, Original_ID_AREA, Original_ID_CARGO_OCUPACIONAL, Original_ESTADO_CIVIL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RADIOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RADIOS"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("NUM_PERMISO_USO", "NUM_PERMISO_USO")
            tableMapping.ColumnMappings.Add("FEC_ACEPTACION_PERMISO", "FEC_ACEPTACION_PERMISO")
            tableMapping.ColumnMappings.Add("FEC_CADUCIDAD_PERMISO", "FEC_CADUCIDAD_PERMISO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RADIOS] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [SERIE], [NUM_PE"& _ 
                "RMISO_USO], [FEC_ACEPTACION_PERMISO], [FEC_CADUCIDAD_PERMISO], [ESTADO_ACTIVO], "& _ 
                "[COLOR], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @MARCA, @MODELO, @SERIE, @NUM_PERMIS"& _ 
                "O_USO, @FEC_ACEPTACION_PERMISO, @FEC_CADUCIDAD_PERMISO, @ESTADO_ACTIVO, @COLOR, "& _ 
                "@ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_PERMISO_USO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_PERMISO_USO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_ACEPTACION_PERMISO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_ACEPTACION_PERMISO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_CADUCIDAD_PERMISO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_CADUCIDAD_PERMISO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, SERIE, NUM_PERMISO_USO, FEC_ACEPTACION_PERM"& _ 
                "ISO, FEC_CADUCIDAD_PERMISO, ESTADO_ACTIVO, COLOR, ESTADO FROM dbo.RADIOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijos.RADIOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijos.RADIOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijos.RADIOSDataTable = New dsActivosFijos.RADIOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijos.RADIOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijos) As Integer
            Return Me.Adapter.Update(dataSet, "RADIOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal SERIE As String, ByVal NUM_PERMISO_USO As String, ByVal FEC_ACEPTACION_PERMISO As Date, ByVal FEC_CADUCIDAD_PERMISO As Date, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SERIE,String)
            End If
            If (NUM_PERMISO_USO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_PERMISO_USO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NUM_PERMISO_USO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(FEC_ACEPTACION_PERMISO,Date)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(FEC_CADUCIDAD_PERMISO,Date)
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COLOR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACTIVO_FIJO_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACTIVO_FIJO_GENERAL"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("ID_PERSONAL", "ID_PERSONAL")
            tableMapping.ColumnMappings.Add("ID_EMPRESA", "ID_EMPRESA")
            tableMapping.ColumnMappings.Add("ID_SUCURSAL", "ID_SUCURSAL")
            tableMapping.ColumnMappings.Add("ID_GERENCIAS", "ID_GERENCIAS")
            tableMapping.ColumnMappings.Add("ID_AREA", "ID_AREA")
            tableMapping.ColumnMappings.Add("CARPETA", "CARPETA")
            tableMapping.ColumnMappings.Add("CONTRATO", "CONTRATO")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("NOMBRE_ACTIVO", "NOMBRE_ACTIVO")
            tableMapping.ColumnMappings.Add("NOMBRE_PROVEDOR", "NOMBRE_PROVEDOR")
            tableMapping.ColumnMappings.Add("NOMBRE_CUSTODIO", "NOMBRE_CUSTODIO")
            tableMapping.ColumnMappings.Add("RESPONSABLE", "RESPONSABLE")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("CODIGO_ARANCEL", "CODIGO_ARANCEL")
            tableMapping.ColumnMappings.Add("NUM_ORDEN_COMPRA", "NUM_ORDEN_COMPRA")
            tableMapping.ColumnMappings.Add("NUM_FACTURA", "NUM_FACTURA")
            tableMapping.ColumnMappings.Add("VALOR_FACTURA", "VALOR_FACTURA")
            tableMapping.ColumnMappings.Add("VALOR_ADICIONAL", "VALOR_ADICIONAL")
            tableMapping.ColumnMappings.Add("VALOR_RESIDUAL", "VALOR_RESIDUAL")
            tableMapping.ColumnMappings.Add("FECHA_ADQUISICION", "FECHA_ADQUISICION")
            tableMapping.ColumnMappings.Add("AÑOS_VIDA_UTIL", "AÑOS_VIDA_UTIL")
            tableMapping.ColumnMappings.Add("CTA_ACTIVO", "CTA_ACTIVO")
            tableMapping.ColumnMappings.Add("CTA_GASTOS", "CTA_GASTOS")
            tableMapping.ColumnMappings.Add("CTA_DEPRECIACION", "CTA_DEPRECIACION")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("TIPO_ACTIVO", "TIPO_ACTIVO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ACTIVO_FIJO_GENERAL] WHERE (([ID_ACTIVO_FIJO] = @Original_ID_A"& _ 
                "CTIVO_FIJO) AND ([ID_PERSONAL] = @Original_ID_PERSONAL) AND ([ID_EMPRESA] = @Ori"& _ 
                "ginal_ID_EMPRESA) AND ([ID_SUCURSAL] = @Original_ID_SUCURSAL) AND ([ID_GERENCIAS"& _ 
                "] = @Original_ID_GERENCIAS) AND ([ID_AREA] = @Original_ID_AREA) AND ([FECHA] = @"& _ 
                "Original_FECHA) AND ([VALOR_FACTURA] = @Original_VALOR_FACTURA) AND ([VALOR_ADIC"& _ 
                "IONAL] = @Original_VALOR_ADICIONAL) AND ([VALOR_RESIDUAL] = @Original_VALOR_RESI"& _ 
                "DUAL) AND ([FECHA_ADQUISICION] = @Original_FECHA_ADQUISICION) AND ([AÑOS_VIDA_UT"& _ 
                "IL] = @Original_AÑOS_VIDA_UTIL) AND ([ESTADO] = @Original_ESTADO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_FACTURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_FACTURA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_ADICIONAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_ADICIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_RESIDUAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_RESIDUAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ADQUISICION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ADQUISICION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AÑOS_VIDA_UTIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AÑOS_VIDA_UTIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ACTIVO_FIJO_GENERAL] ([ID_ACTIVO_FIJO], [ID_PERSONAL], [ID_EMP"& _ 
                "RESA], [ID_SUCURSAL], [ID_GERENCIAS], [ID_AREA], [CARPETA], [CONTRATO], [CODIGO]"& _ 
                ", [NOMBRE_ACTIVO], [NOMBRE_PROVEDOR], [NOMBRE_CUSTODIO], [RESPONSABLE], [FECHA],"& _ 
                " [CODIGO_ARANCEL], [NUM_ORDEN_COMPRA], [NUM_FACTURA], [VALOR_FACTURA], [VALOR_AD"& _ 
                "ICIONAL], [VALOR_RESIDUAL], [FECHA_ADQUISICION], [AÑOS_VIDA_UTIL], [CTA_ACTIVO],"& _ 
                " [CTA_GASTOS], [CTA_DEPRECIACION], [ESTADO], [ESTADO_ACTIVO], [TIPO_ACTIVO]) VAL"& _ 
                "UES (@ID_ACTIVO_FIJO, @ID_PERSONAL, @ID_EMPRESA, @ID_SUCURSAL, @ID_GERENCIAS, @I"& _ 
                "D_AREA, @CARPETA, @CONTRATO, @CODIGO, @NOMBRE_ACTIVO, @NOMBRE_PROVEDOR, @NOMBRE_"& _ 
                "CUSTODIO, @RESPONSABLE, @FECHA, @CODIGO_ARANCEL, @NUM_ORDEN_COMPRA, @NUM_FACTURA"& _ 
                ", @VALOR_FACTURA, @VALOR_ADICIONAL, @VALOR_RESIDUAL, @FECHA_ADQUISICION, @AÑOS_V"& _ 
                "IDA_UTIL, @CTA_ACTIVO, @CTA_GASTOS, @CTA_DEPRECIACION, @ESTADO, @ESTADO_ACTIVO, "& _ 
                "@TIPO_ACTIVO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_ACTIVO_FIJO, ID_PERSONAL, ID_EMPRESA, ID_SUCURSAL, ID_"& _ 
                "GERENCIAS, ID_AREA, CARPETA, CONTRATO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, N"& _ 
                "OMBRE_CUSTODIO, RESPONSABLE, FECHA, CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTUR"& _ 
                "A, VALOR_FACTURA, VALOR_ADICIONAL, VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_"& _ 
                "UTIL, CTA_ACTIVO, CTA_GASTOS, CTA_DEPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTI"& _ 
                "VO FROM ACTIVO_FIJO_GENERAL WHERE (ID_ACTIVO_FIJO = @ID_ACTIVO_FIJO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARPETA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARPETA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTRATO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTRATO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_PROVEDOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_PROVEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_CUSTODIO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_CUSTODIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESPONSABLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESPONSABLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_ARANCEL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_ARANCEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_ORDEN_COMPRA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_ORDEN_COMPRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_FACTURA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_FACTURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_ADICIONAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_ADICIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_RESIDUAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_RESIDUAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ADQUISICION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ADQUISICION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AÑOS_VIDA_UTIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AÑOS_VIDA_UTIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_GASTOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_GASTOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_DEPRECIACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_DEPRECIACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ACTIVO_FIJO_GENERAL] SET [ID_ACTIVO_FIJO] = @ID_ACTIVO_FIJO, [ID_PE"& _ 
                "RSONAL] = @ID_PERSONAL, [ID_EMPRESA] = @ID_EMPRESA, [ID_SUCURSAL] = @ID_SUCURSAL"& _ 
                ", [ID_GERENCIAS] = @ID_GERENCIAS, [ID_AREA] = @ID_AREA, [CARPETA] = @CARPETA, [C"& _ 
                "ONTRATO] = @CONTRATO, [CODIGO] = @CODIGO, [NOMBRE_ACTIVO] = @NOMBRE_ACTIVO, [NOM"& _ 
                "BRE_PROVEDOR] = @NOMBRE_PROVEDOR, [NOMBRE_CUSTODIO] = @NOMBRE_CUSTODIO, [RESPONS"& _ 
                "ABLE] = @RESPONSABLE, [FECHA] = @FECHA, [CODIGO_ARANCEL] = @CODIGO_ARANCEL, [NUM"& _ 
                "_ORDEN_COMPRA] = @NUM_ORDEN_COMPRA, [NUM_FACTURA] = @NUM_FACTURA, [VALOR_FACTURA"& _ 
                "] = @VALOR_FACTURA, [VALOR_ADICIONAL] = @VALOR_ADICIONAL, [VALOR_RESIDUAL] = @VA"& _ 
                "LOR_RESIDUAL, [FECHA_ADQUISICION] = @FECHA_ADQUISICION, [AÑOS_VIDA_UTIL] = @AÑOS"& _ 
                "_VIDA_UTIL, [CTA_ACTIVO] = @CTA_ACTIVO, [CTA_GASTOS] = @CTA_GASTOS, [CTA_DEPRECI"& _ 
                "ACION] = @CTA_DEPRECIACION, [ESTADO] = @ESTADO, [ESTADO_ACTIVO] = @ESTADO_ACTIVO"& _ 
                ", [TIPO_ACTIVO] = @TIPO_ACTIVO WHERE (([ID_ACTIVO_FIJO] = @Original_ID_ACTIVO_FI"& _ 
                "JO) AND ([ID_PERSONAL] = @Original_ID_PERSONAL) AND ([ID_EMPRESA] = @Original_ID"& _ 
                "_EMPRESA) AND ([ID_SUCURSAL] = @Original_ID_SUCURSAL) AND ([ID_GERENCIAS] = @Ori"& _ 
                "ginal_ID_GERENCIAS) AND ([ID_AREA] = @Original_ID_AREA) AND ([FECHA] = @Original"& _ 
                "_FECHA) AND ([VALOR_FACTURA] = @Original_VALOR_FACTURA) AND ([VALOR_ADICIONAL] ="& _ 
                " @Original_VALOR_ADICIONAL) AND ([VALOR_RESIDUAL] = @Original_VALOR_RESIDUAL) AN"& _ 
                "D ([FECHA_ADQUISICION] = @Original_FECHA_ADQUISICION) AND ([AÑOS_VIDA_UTIL] = @O"& _ 
                "riginal_AÑOS_VIDA_UTIL) AND ([ESTADO] = @Original_ESTADO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_ACTIVO_FI"& _ 
                "JO, ID_PERSONAL, ID_EMPRESA, ID_SUCURSAL, ID_GERENCIAS, ID_AREA, CARPETA, CONTRA"& _ 
                "TO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, NOMBRE_CUSTODIO, RESPONSABLE, FECHA,"& _ 
                " CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTURA, VALOR_FACTURA, VALOR_ADICIONAL, "& _ 
                "VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_UTIL, CTA_ACTIVO, CTA_GASTOS, CTA_D"& _ 
                "EPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTIVO FROM ACTIVO_FIJO_GENERAL WHERE ("& _ 
                "ID_ACTIVO_FIJO = @ID_ACTIVO_FIJO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARPETA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARPETA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTRATO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTRATO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_PROVEDOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_PROVEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_CUSTODIO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_CUSTODIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESPONSABLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESPONSABLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_ARANCEL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_ARANCEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_ORDEN_COMPRA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_ORDEN_COMPRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_FACTURA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_FACTURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_ADICIONAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_ADICIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_RESIDUAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_RESIDUAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ADQUISICION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ADQUISICION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AÑOS_VIDA_UTIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AÑOS_VIDA_UTIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_GASTOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_GASTOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_DEPRECIACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_DEPRECIACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_FACTURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_FACTURA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_ADICIONAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_ADICIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_RESIDUAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_RESIDUAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ADQUISICION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ADQUISICION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AÑOS_VIDA_UTIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AÑOS_VIDA_UTIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, ID_PERSONAL, ID_EMPRESA, ID_SUCURSAL, ID_GERENCIAS, ID_ARE"& _ 
                "A, CARPETA, CONTRATO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, NOMBRE_CUSTODIO, R"& _ 
                "ESPONSABLE, FECHA, CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTURA, VALOR_FACTURA,"& _ 
                " VALOR_ADICIONAL, VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_UTIL, CTA_ACTIVO,"& _ 
                " CTA_GASTOS, CTA_DEPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTIVO FROM dbo.ACTIV"& _ 
                "O_FIJO_GENERAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijos.ACTIVO_FIJO_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijos.ACTIVO_FIJO_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijos.ACTIVO_FIJO_GENERALDataTable = New dsActivosFijos.ACTIVO_FIJO_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijos.ACTIVO_FIJO_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijos) As Integer
            Return Me.Adapter.Update(dataSet, "ACTIVO_FIJO_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_ACTIVO_FIJO As Integer, ByVal Original_ID_PERSONAL As Integer, ByVal Original_ID_EMPRESA As Integer, ByVal Original_ID_SUCURSAL As Integer, ByVal Original_ID_GERENCIAS As Integer, ByVal Original_ID_AREA As Integer, ByVal Original_FECHA As Date, ByVal Original_VALOR_FACTURA As Decimal, ByVal Original_VALOR_ADICIONAL As Decimal, ByVal Original_VALOR_RESIDUAL As Decimal, ByVal Original_FECHA_ADQUISICION As Date, ByVal Original_AÑOS_VIDA_UTIL As Integer, ByVal Original_ESTADO As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_ACTIVO_FIJO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_PERSONAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ID_EMPRESA,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ID_SUCURSAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ID_GERENCIAS,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_AREA,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FECHA,Date)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_VALOR_FACTURA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_VALOR_ADICIONAL,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_VALOR_RESIDUAL,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FECHA_ADQUISICION,Date)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_AÑOS_VIDA_UTIL,Integer)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID_ACTIVO_FIJO As Integer,  _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal ID_SUCURSAL As Integer,  _
                    ByVal ID_GERENCIAS As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal CARPETA As String,  _
                    ByVal CONTRATO As String,  _
                    ByVal CODIGO As String,  _
                    ByVal NOMBRE_ACTIVO As String,  _
                    ByVal NOMBRE_PROVEDOR As String,  _
                    ByVal NOMBRE_CUSTODIO As String,  _
                    ByVal RESPONSABLE As String,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO_ARANCEL As String,  _
                    ByVal NUM_ORDEN_COMPRA As String,  _
                    ByVal NUM_FACTURA As String,  _
                    ByVal VALOR_FACTURA As Decimal,  _
                    ByVal VALOR_ADICIONAL As Decimal,  _
                    ByVal VALOR_RESIDUAL As Decimal,  _
                    ByVal FECHA_ADQUISICION As Date,  _
                    ByVal AÑOS_VIDA_UTIL As Integer,  _
                    ByVal CTA_ACTIVO As String,  _
                    ByVal CTA_GASTOS As String,  _
                    ByVal CTA_DEPRECIACION As String,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal TIPO_ACTIVO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_PERSONAL,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ID_SUCURSAL,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_GERENCIAS,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_AREA,Integer)
            If (CARPETA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CARPETA")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CARPETA,String)
            End If
            If (CONTRATO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONTRATO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CONTRATO,String)
            End If
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(NOMBRE_ACTIVO,String)
            End If
            If (NOMBRE_PROVEDOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_PROVEDOR")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(NOMBRE_PROVEDOR,String)
            End If
            If (NOMBRE_CUSTODIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_CUSTODIO")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(NOMBRE_CUSTODIO,String)
            End If
            If (RESPONSABLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RESPONSABLE")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RESPONSABLE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(FECHA,Date)
            If (CODIGO_ARANCEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_ARANCEL")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CODIGO_ARANCEL,String)
            End If
            If (NUM_ORDEN_COMPRA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_ORDEN_COMPRA")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NUM_ORDEN_COMPRA,String)
            End If
            If (NUM_FACTURA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_FACTURA")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NUM_FACTURA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(VALOR_FACTURA,Decimal)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(VALOR_ADICIONAL,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(VALOR_RESIDUAL,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(FECHA_ADQUISICION,Date)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(AÑOS_VIDA_UTIL,Integer)
            If (CTA_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(CTA_ACTIVO,String)
            End If
            If (CTA_GASTOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_GASTOS")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CTA_GASTOS,String)
            End If
            If (CTA_DEPRECIACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_DEPRECIACION")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(CTA_DEPRECIACION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(ESTADO,Integer)
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (TIPO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(TIPO_ACTIVO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_ACTIVO_FIJO As Integer,  _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal ID_SUCURSAL As Integer,  _
                    ByVal ID_GERENCIAS As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal CARPETA As String,  _
                    ByVal CONTRATO As String,  _
                    ByVal CODIGO As String,  _
                    ByVal NOMBRE_ACTIVO As String,  _
                    ByVal NOMBRE_PROVEDOR As String,  _
                    ByVal NOMBRE_CUSTODIO As String,  _
                    ByVal RESPONSABLE As String,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO_ARANCEL As String,  _
                    ByVal NUM_ORDEN_COMPRA As String,  _
                    ByVal NUM_FACTURA As String,  _
                    ByVal VALOR_FACTURA As Decimal,  _
                    ByVal VALOR_ADICIONAL As Decimal,  _
                    ByVal VALOR_RESIDUAL As Decimal,  _
                    ByVal FECHA_ADQUISICION As Date,  _
                    ByVal AÑOS_VIDA_UTIL As Integer,  _
                    ByVal CTA_ACTIVO As String,  _
                    ByVal CTA_GASTOS As String,  _
                    ByVal CTA_DEPRECIACION As String,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal TIPO_ACTIVO As String,  _
                    ByVal Original_ID_ACTIVO_FIJO As Integer,  _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_ID_EMPRESA As Integer,  _
                    ByVal Original_ID_SUCURSAL As Integer,  _
                    ByVal Original_ID_GERENCIAS As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_FECHA As Date,  _
                    ByVal Original_VALOR_FACTURA As Decimal,  _
                    ByVal Original_VALOR_ADICIONAL As Decimal,  _
                    ByVal Original_VALOR_RESIDUAL As Decimal,  _
                    ByVal Original_FECHA_ADQUISICION As Date,  _
                    ByVal Original_AÑOS_VIDA_UTIL As Integer,  _
                    ByVal Original_ESTADO As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_PERSONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ID_SUCURSAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_GERENCIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_AREA,Integer)
            If (CARPETA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CARPETA")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CARPETA,String)
            End If
            If (CONTRATO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONTRATO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CONTRATO,String)
            End If
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_ACTIVO")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(NOMBRE_ACTIVO,String)
            End If
            If (NOMBRE_PROVEDOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_PROVEDOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(NOMBRE_PROVEDOR,String)
            End If
            If (NOMBRE_CUSTODIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_CUSTODIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(NOMBRE_CUSTODIO,String)
            End If
            If (RESPONSABLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RESPONSABLE")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RESPONSABLE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(FECHA,Date)
            If (CODIGO_ARANCEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_ARANCEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CODIGO_ARANCEL,String)
            End If
            If (NUM_ORDEN_COMPRA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_ORDEN_COMPRA")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(NUM_ORDEN_COMPRA,String)
            End If
            If (NUM_FACTURA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_FACTURA")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NUM_FACTURA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(VALOR_FACTURA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(VALOR_ADICIONAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(VALOR_RESIDUAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(FECHA_ADQUISICION,Date)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(AÑOS_VIDA_UTIL,Integer)
            If (CTA_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_ACTIVO")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(CTA_ACTIVO,String)
            End If
            If (CTA_GASTOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_GASTOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CTA_GASTOS,String)
            End If
            If (CTA_DEPRECIACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_DEPRECIACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(CTA_DEPRECIACION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(ESTADO,Integer)
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (TIPO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_ACTIVO")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(TIPO_ACTIVO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ID_ACTIVO_FIJO,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ID_PERSONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ID_SUCURSAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_ID_GERENCIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_ID_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_VALOR_FACTURA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_VALOR_ADICIONAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_VALOR_RESIDUAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_FECHA_ADQUISICION,Date)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_AÑOS_VIDA_UTIL,Integer)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal ID_SUCURSAL As Integer,  _
                    ByVal ID_GERENCIAS As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal CARPETA As String,  _
                    ByVal CONTRATO As String,  _
                    ByVal CODIGO As String,  _
                    ByVal NOMBRE_ACTIVO As String,  _
                    ByVal NOMBRE_PROVEDOR As String,  _
                    ByVal NOMBRE_CUSTODIO As String,  _
                    ByVal RESPONSABLE As String,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO_ARANCEL As String,  _
                    ByVal NUM_ORDEN_COMPRA As String,  _
                    ByVal NUM_FACTURA As String,  _
                    ByVal VALOR_FACTURA As Decimal,  _
                    ByVal VALOR_ADICIONAL As Decimal,  _
                    ByVal VALOR_RESIDUAL As Decimal,  _
                    ByVal FECHA_ADQUISICION As Date,  _
                    ByVal AÑOS_VIDA_UTIL As Integer,  _
                    ByVal CTA_ACTIVO As String,  _
                    ByVal CTA_GASTOS As String,  _
                    ByVal CTA_DEPRECIACION As String,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal TIPO_ACTIVO As String,  _
                    ByVal Original_ID_ACTIVO_FIJO As Integer,  _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_ID_EMPRESA As Integer,  _
                    ByVal Original_ID_SUCURSAL As Integer,  _
                    ByVal Original_ID_GERENCIAS As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_FECHA As Date,  _
                    ByVal Original_VALOR_FACTURA As Decimal,  _
                    ByVal Original_VALOR_ADICIONAL As Decimal,  _
                    ByVal Original_VALOR_RESIDUAL As Decimal,  _
                    ByVal Original_FECHA_ADQUISICION As Date,  _
                    ByVal Original_AÑOS_VIDA_UTIL As Integer,  _
                    ByVal Original_ESTADO As Integer) As Integer
            Return Me.Update(Original_ID_ACTIVO_FIJO, ID_PERSONAL, ID_EMPRESA, ID_SUCURSAL, ID_GERENCIAS, ID_AREA, CARPETA, CONTRATO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, NOMBRE_CUSTODIO, RESPONSABLE, FECHA, CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTURA, VALOR_FACTURA, VALOR_ADICIONAL, VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_UTIL, CTA_ACTIVO, CTA_GASTOS, CTA_DEPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTIVO, Original_ID_ACTIVO_FIJO, Original_ID_PERSONAL, Original_ID_EMPRESA, Original_ID_SUCURSAL, Original_ID_GERENCIAS, Original_ID_AREA, Original_FECHA, Original_VALOR_FACTURA, Original_VALOR_ADICIONAL, Original_VALOR_RESIDUAL, Original_FECHA_ADQUISICION, Original_AÑOS_VIDA_UTIL, Original_ESTADO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ARMASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ARMAS"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("NUM_PERMISO_GOBIERNO", "NUM_PERMISO_GOBIERNO")
            tableMapping.ColumnMappings.Add("NUM_PERMISO_COMANDO", "NUM_PERMISO_COMANDO")
            tableMapping.ColumnMappings.Add("NUM_TENENCIA_ARMAS", "NUM_TENENCIA_ARMAS")
            tableMapping.ColumnMappings.Add("FEC_ACEPTACION_TENENCIA", "FEC_ACEPTACION_TENENCIA")
            tableMapping.ColumnMappings.Add("FEC_CADUCIDAD_TENENCIA", "FEC_CADUCIDAD_TENENCIA")
            tableMapping.ColumnMappings.Add("NUM_MATRICULA_ARMA", "NUM_MATRICULA_ARMA")
            tableMapping.ColumnMappings.Add("FEC_ACEPTACION_MATRICULA", "FEC_ACEPTACION_MATRICULA")
            tableMapping.ColumnMappings.Add("FEC_CADUCIDAD_MATRICULA", "FEC_CADUCIDAD_MATRICULA")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ARMAS] ([ID_ACTIVO_FIJO], [NUM_PERMISO_GOBIERNO], [NUM_PERMISO"& _ 
                "_COMANDO], [NUM_TENENCIA_ARMAS], [FEC_ACEPTACION_TENENCIA], [FEC_CADUCIDAD_TENEN"& _ 
                "CIA], [NUM_MATRICULA_ARMA], [FEC_ACEPTACION_MATRICULA], [FEC_CADUCIDAD_MATRICULA"& _ 
                "], [SERIE], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @NUM_PERMISO_GOBIERNO, @NUM_PERMI"& _ 
                "SO_COMANDO, @NUM_TENENCIA_ARMAS, @FEC_ACEPTACION_TENENCIA, @FEC_CADUCIDAD_TENENC"& _ 
                "IA, @NUM_MATRICULA_ARMA, @FEC_ACEPTACION_MATRICULA, @FEC_CADUCIDAD_MATRICULA, @S"& _ 
                "ERIE, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_PERMISO_GOBIERNO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_PERMISO_GOBIERNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_PERMISO_COMANDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_PERMISO_COMANDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_TENENCIA_ARMAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_TENENCIA_ARMAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_ACEPTACION_TENENCIA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_ACEPTACION_TENENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_CADUCIDAD_TENENCIA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_CADUCIDAD_TENENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_MATRICULA_ARMA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_MATRICULA_ARMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_ACEPTACION_MATRICULA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_ACEPTACION_MATRICULA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_CADUCIDAD_MATRICULA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_CADUCIDAD_MATRICULA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, NUM_PERMISO_GOBIERNO, NUM_PERMISO_COMANDO, NUM_TENENCIA_AR"& _ 
                "MAS, FEC_ACEPTACION_TENENCIA, FEC_CADUCIDAD_TENENCIA, NUM_MATRICULA_ARMA, FEC_AC"& _ 
                "EPTACION_MATRICULA, FEC_CADUCIDAD_MATRICULA, SERIE, ESTADO FROM dbo.ARMAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijos.ARMASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijos.ARMASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijos.ARMASDataTable = New dsActivosFijos.ARMASDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijos.ARMASDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijos) As Integer
            Return Me.Adapter.Update(dataSet, "ARMAS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal NUM_PERMISO_GOBIERNO As String, ByVal NUM_PERMISO_COMANDO As String, ByVal NUM_TENENCIA_ARMAS As String, ByVal FEC_ACEPTACION_TENENCIA As Date, ByVal FEC_CADUCIDAD_TENENCIA As Date, ByVal NUM_MATRICULA_ARMA As String, ByVal FEC_ACEPTACION_MATRICULA As Date, ByVal FEC_CADUCIDAD_MATRICULA As Date, ByVal SERIE As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (NUM_PERMISO_GOBIERNO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_PERMISO_GOBIERNO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NUM_PERMISO_GOBIERNO,String)
            End If
            If (NUM_PERMISO_COMANDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_PERMISO_COMANDO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NUM_PERMISO_COMANDO,String)
            End If
            If (NUM_TENENCIA_ARMAS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_TENENCIA_ARMAS")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NUM_TENENCIA_ARMAS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FEC_ACEPTACION_TENENCIA,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(FEC_CADUCIDAD_TENENCIA,Date)
            If (NUM_MATRICULA_ARMA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_MATRICULA_ARMA")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NUM_MATRICULA_ARMA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(FEC_ACEPTACION_MATRICULA,Date)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(FEC_CADUCIDAD_MATRICULA,Date)
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SERIE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CARGO_OCUPACIONALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CARGO_OCUPACIONAL"
            tableMapping.ColumnMappings.Add("ID_CARGO_OCUPACIONAL", "ID_CARGO_OCUPACIONAL")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            tableMapping.ColumnMappings.Add("ID_SERIE_OCUPACIONAL", "ID_SERIE_OCUPACIONAL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CARGO_OCUPACIONAL] WHERE (([ID_CARGO_OCUPACIONAL] = @Original_"& _ 
                "ID_CARGO_OCUPACIONAL) AND ([ESTADO] = @Original_ESTADO) AND ([ID_SERIE_OCUPACION"& _ 
                "AL] = @Original_ID_SERIE_OCUPACIONAL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SERIE_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SERIE_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CARGO_OCUPACIONAL] ([ID_CARGO_OCUPACIONAL], [CODIGO], [DESCRIP"& _ 
                "CION], [ESTADO], [ID_SERIE_OCUPACIONAL]) VALUES (@ID_CARGO_OCUPACIONAL, @CODIGO,"& _ 
                " @DESCRIPCION, @ESTADO, @ID_SERIE_OCUPACIONAL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CARGO_OCUPACIONAL, CO"& _ 
                "DIGO, DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL FROM CARGO_OCUPACIONAL WHERE (ID"& _ 
                "_CARGO_OCUPACIONAL = @ID_CARGO_OCUPACIONAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SERIE_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SERIE_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CARGO_OCUPACIONAL] SET [ID_CARGO_OCUPACIONAL] = @ID_CARGO_OCUPACION"& _ 
                "AL, [CODIGO] = @CODIGO, [DESCRIPCION] = @DESCRIPCION, [ESTADO] = @ESTADO, [ID_SE"& _ 
                "RIE_OCUPACIONAL] = @ID_SERIE_OCUPACIONAL WHERE (([ID_CARGO_OCUPACIONAL] = @Origi"& _ 
                "nal_ID_CARGO_OCUPACIONAL) AND ([ESTADO] = @Original_ESTADO) AND ([ID_SERIE_OCUPA"& _ 
                "CIONAL] = @Original_ID_SERIE_OCUPACIONAL));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CARGO_OCUPACIONAL, CODIGO"& _ 
                ", DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL FROM CARGO_OCUPACIONAL WHERE (ID_CAR"& _ 
                "GO_OCUPACIONAL = @ID_CARGO_OCUPACIONAL)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SERIE_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SERIE_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SERIE_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SERIE_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_CARGO_OCUPACIONAL, CODIGO, DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL FR"& _ 
                "OM dbo.CARGO_OCUPACIONAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijos.CARGO_OCUPACIONALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijos.CARGO_OCUPACIONALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijos.CARGO_OCUPACIONALDataTable = New dsActivosFijos.CARGO_OCUPACIONALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijos.CARGO_OCUPACIONALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijos) As Integer
            Return Me.Adapter.Update(dataSet, "CARGO_OCUPACIONAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_CARGO_OCUPACIONAL As Integer, ByVal Original_ESTADO As Integer, ByVal Original_ID_SERIE_OCUPACIONAL As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_CARGO_OCUPACIONAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ID_SERIE_OCUPACIONAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_CARGO_OCUPACIONAL As Integer, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal ESTADO As Integer, ByVal ID_SERIE_OCUPACIONAL As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_CARGO_OCUPACIONAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_SERIE_OCUPACIONAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_CARGO_OCUPACIONAL As Integer, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal ESTADO As Integer, ByVal ID_SERIE_OCUPACIONAL As Integer, ByVal Original_ID_CARGO_OCUPACIONAL As Integer, ByVal Original_ESTADO As Integer, ByVal Original_ID_SERIE_OCUPACIONAL As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_CARGO_OCUPACIONAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_SERIE_OCUPACIONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_CARGO_OCUPACIONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_SERIE_OCUPACIONAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal ESTADO As Integer, ByVal ID_SERIE_OCUPACIONAL As Integer, ByVal Original_ID_CARGO_OCUPACIONAL As Integer, ByVal Original_ESTADO As Integer, ByVal Original_ID_SERIE_OCUPACIONAL As Integer) As Integer
            Return Me.Update(Original_ID_CARGO_OCUPACIONAL, CODIGO, DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL, Original_ID_CARGO_OCUPACIONAL, Original_ESTADO, Original_ID_SERIE_OCUPACIONAL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AREA_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AREA_GENERAL"
            tableMapping.ColumnMappings.Add("ID_AREA_GENERAL", "ID_AREA_GENERAL")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("NOMBRE_AREA", "NOMBRE_AREA")
            tableMapping.ColumnMappings.Add("ESTADO_AREA", "ESTADO_AREA")
            tableMapping.ColumnMappings.Add("ID_GERENCIAS_GENERAL", "ID_GERENCIAS_GENERAL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AREA_GENERAL] WHERE (([ID_AREA_GENERAL] = @Original_ID_AREA_GE"& _ 
                "NERAL) AND ([ESTADO_AREA] = @Original_ESTADO_AREA) AND ([ID_GERENCIAS_GENERAL] ="& _ 
                " @Original_ID_GERENCIAS_GENERAL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AREA_GENERAL] ([ID_AREA_GENERAL], [CODIGO], [NOMBRE_AREA], [ES"& _ 
                "TADO_AREA], [ID_GERENCIAS_GENERAL]) VALUES (@ID_AREA_GENERAL, @CODIGO, @NOMBRE_A"& _ 
                "REA, @ESTADO_AREA, @ID_GERENCIAS_GENERAL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_AREA_GENERAL, CODIGO, NOMB"& _ 
                "RE_AREA, ESTADO_AREA, ID_GERENCIAS_GENERAL FROM AREA_GENERAL WHERE (ID_AREA_GENE"& _ 
                "RAL = @ID_AREA_GENERAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_AREA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AREA_GENERAL] SET [ID_AREA_GENERAL] = @ID_AREA_GENERAL, [CODIGO] = "& _ 
                "@CODIGO, [NOMBRE_AREA] = @NOMBRE_AREA, [ESTADO_AREA] = @ESTADO_AREA, [ID_GERENCI"& _ 
                "AS_GENERAL] = @ID_GERENCIAS_GENERAL WHERE (([ID_AREA_GENERAL] = @Original_ID_ARE"& _ 
                "A_GENERAL) AND ([ESTADO_AREA] = @Original_ESTADO_AREA) AND ([ID_GERENCIAS_GENERA"& _ 
                "L] = @Original_ID_GERENCIAS_GENERAL));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_AREA_GENERAL, CODIGO, NOMBRE_A"& _ 
                "REA, ESTADO_AREA, ID_GERENCIAS_GENERAL FROM AREA_GENERAL WHERE (ID_AREA_GENERAL "& _ 
                "= @ID_AREA_GENERAL)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_AREA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_AREA_GENERAL, CODIGO, NOMBRE_AREA, ESTADO_AREA, ID_GERENCIAS_GENERAL FR"& _ 
                "OM dbo.AREA_GENERAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijos.AREA_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijos.AREA_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijos.AREA_GENERALDataTable = New dsActivosFijos.AREA_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijos.AREA_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijos) As Integer
            Return Me.Adapter.Update(dataSet, "AREA_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_AREA_GENERAL As Integer, ByVal Original_ESTADO_AREA As Integer, ByVal Original_ID_GERENCIAS_GENERAL As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_AREA_GENERAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ESTADO_AREA,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ID_GERENCIAS_GENERAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_AREA_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_AREA As String, ByVal ESTADO_AREA As Integer, ByVal ID_GERENCIAS_GENERAL As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_AREA_GENERAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_AREA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_AREA")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NOMBRE_AREA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_AREA,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_GERENCIAS_GENERAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_AREA_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_AREA As String, ByVal ESTADO_AREA As Integer, ByVal ID_GERENCIAS_GENERAL As Integer, ByVal Original_ID_AREA_GENERAL As Integer, ByVal Original_ESTADO_AREA As Integer, ByVal Original_ID_GERENCIAS_GENERAL As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_AREA_GENERAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_AREA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_AREA")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NOMBRE_AREA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ESTADO_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_GERENCIAS_GENERAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_AREA_GENERAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ESTADO_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_GERENCIAS_GENERAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO As String, ByVal NOMBRE_AREA As String, ByVal ESTADO_AREA As Integer, ByVal ID_GERENCIAS_GENERAL As Integer, ByVal Original_ID_AREA_GENERAL As Integer, ByVal Original_ESTADO_AREA As Integer, ByVal Original_ID_GERENCIAS_GENERAL As Integer) As Integer
            Return Me.Update(Original_ID_AREA_GENERAL, CODIGO, NOMBRE_AREA, ESTADO_AREA, ID_GERENCIAS_GENERAL, Original_ID_AREA_GENERAL, Original_ESTADO_AREA, Original_ID_GERENCIAS_GENERAL)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _pERSONALTableAdapter As PERSONALTableAdapter
        
        Private _rADIOSTableAdapter As RADIOSTableAdapter
        
        Private _aCTIVO_FIJO_GENERALTableAdapter As ACTIVO_FIJO_GENERALTableAdapter
        
        Private _aRMASTableAdapter As ARMASTableAdapter
        
        Private _cARGO_OCUPACIONALTableAdapter As CARGO_OCUPACIONALTableAdapter
        
        Private _aREA_GENERALTableAdapter As AREA_GENERALTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PERSONALTableAdapter() As PERSONALTableAdapter
            Get
                Return Me._pERSONALTableAdapter
            End Get
            Set
                Me._pERSONALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RADIOSTableAdapter() As RADIOSTableAdapter
            Get
                Return Me._rADIOSTableAdapter
            End Get
            Set
                Me._rADIOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ACTIVO_FIJO_GENERALTableAdapter() As ACTIVO_FIJO_GENERALTableAdapter
            Get
                Return Me._aCTIVO_FIJO_GENERALTableAdapter
            End Get
            Set
                Me._aCTIVO_FIJO_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ARMASTableAdapter() As ARMASTableAdapter
            Get
                Return Me._aRMASTableAdapter
            End Get
            Set
                Me._aRMASTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CARGO_OCUPACIONALTableAdapter() As CARGO_OCUPACIONALTableAdapter
            Get
                Return Me._cARGO_OCUPACIONALTableAdapter
            End Get
            Set
                Me._cARGO_OCUPACIONALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AREA_GENERALTableAdapter() As AREA_GENERALTableAdapter
            Get
                Return Me._aREA_GENERALTableAdapter
            End Get
            Set
                Me._aREA_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._pERSONALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pERSONALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pERSONALTableAdapter.Connection
                End If
                If ((Not (Me._rADIOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rADIOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rADIOSTableAdapter.Connection
                End If
                If ((Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aCTIVO_FIJO_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aCTIVO_FIJO_GENERALTableAdapter.Connection
                End If
                If ((Not (Me._aRMASTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aRMASTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aRMASTableAdapter.Connection
                End If
                If ((Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cARGO_OCUPACIONALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cARGO_OCUPACIONALTableAdapter.Connection
                End If
                If ((Not (Me._aREA_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aREA_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aREA_GENERALTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsActivosFijos, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CARGO_OCUPACIONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cARGO_OCUPACIONALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AREA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aREA_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ACTIVO_FIJO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aCTIVO_FIJO_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RADIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rADIOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ARMAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aRMASTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsActivosFijos, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CARGO_OCUPACIONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cARGO_OCUPACIONALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AREA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aREA_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ACTIVO_FIJO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aCTIVO_FIJO_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RADIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rADIOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ARMAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aRMASTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsActivosFijos, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ARMAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aRMASTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RADIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rADIOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ACTIVO_FIJO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aCTIVO_FIJO_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AREA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aREA_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CARGO_OCUPACIONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cARGO_OCUPACIONALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsActivosFijos) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._pERSONALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pERSONALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._rADIOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rADIOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aCTIVO_FIJO_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aRMASTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aRMASTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cARGO_OCUPACIONALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aREA_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aREA_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pERSONALTableAdapter, Me._pERSONALTableAdapter.Connection)
                    Me._pERSONALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pERSONALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pERSONALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pERSONALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pERSONALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rADIOSTableAdapter, Me._rADIOSTableAdapter.Connection)
                    Me._rADIOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rADIOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rADIOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rADIOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rADIOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aCTIVO_FIJO_GENERALTableAdapter, Me._aCTIVO_FIJO_GENERALTableAdapter.Connection)
                    Me._aCTIVO_FIJO_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aCTIVO_FIJO_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aCTIVO_FIJO_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aCTIVO_FIJO_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aCTIVO_FIJO_GENERALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aRMASTableAdapter, Me._aRMASTableAdapter.Connection)
                    Me._aRMASTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aRMASTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aRMASTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aRMASTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aRMASTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cARGO_OCUPACIONALTableAdapter, Me._cARGO_OCUPACIONALTableAdapter.Connection)
                    Me._cARGO_OCUPACIONALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cARGO_OCUPACIONALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cARGO_OCUPACIONALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cARGO_OCUPACIONALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cARGO_OCUPACIONALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aREA_GENERALTableAdapter, Me._aREA_GENERALTableAdapter.Connection)
                    Me._aREA_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aREA_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aREA_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aREA_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aREA_GENERALTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    Me._pERSONALTableAdapter.Connection = CType(revertConnections(Me._pERSONALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pERSONALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                    Me._rADIOSTableAdapter.Connection = CType(revertConnections(Me._rADIOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rADIOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                    Me._aCTIVO_FIJO_GENERALTableAdapter.Connection = CType(revertConnections(Me._aCTIVO_FIJO_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aCTIVO_FIJO_GENERALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                    Me._aRMASTableAdapter.Connection = CType(revertConnections(Me._aRMASTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aRMASTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                    Me._cARGO_OCUPACIONALTableAdapter.Connection = CType(revertConnections(Me._cARGO_OCUPACIONALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cARGO_OCUPACIONALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                    Me._aREA_GENERALTableAdapter.Connection = CType(revertConnections(Me._aREA_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aREA_GENERALTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
