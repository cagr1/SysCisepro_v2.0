'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsActivosFijosGeneral"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsActivosFijosGeneral
    Inherits Global.System.Data.DataSet
    
    Private tableACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALDataTable
    
    Private tableARMAS As ARMASDataTable
    
    Private tableCAMARAS_SEGURIDAD As CAMARAS_SEGURIDADDataTable
    
    Private tableEQUIPOS_AMBIENTACION As EQUIPOS_AMBIENTACIONDataTable
    
    Private tableEQUIPOS_COCINA As EQUIPOS_COCINADataTable
    
    Private tableEQUIPOS_COMPUTO As EQUIPOS_COMPUTODataTable
    
    Private tableEQUIPOS_COMUNICACION_TELEFONIA As EQUIPOS_COMUNICACION_TELEFONIADataTable
    
    Private tableEQUIPOS_OFICINA As EQUIPOS_OFICINADataTable
    
    Private tableEQUIPOS_SEGURIDAD_INDUSTRIAL As EQUIPOS_SEGURIDAD_INDUSTRIALDataTable
    
    Private tableGENERADORES As GENERADORESDataTable
    
    Private tableLIBRO_COLECCIONES As LIBRO_COLECCIONESDataTable
    
    Private tableMUEBLES_OFICINA As MUEBLES_OFICINADataTable
    
    Private tableSOFTWARE As SOFTWAREDataTable
    
    Private tableVEHICULOS As VEHICULOSDataTable
    
    Private tableTERRENOS As TERRENOSDataTable
    
    Private tablePERSONAL As PERSONALDataTable
    
    Private tableEMPRESA_GENERAL As EMPRESA_GENERALDataTable
    
    Private tableAREA_GENERAL As AREA_GENERALDataTable
    
    Private tableSUCURSAL_GENERAL As SUCURSAL_GENERALDataTable
    
    Private tableGERENCIAS_GENERAL As GERENCIAS_GENERALDataTable
    
    Private tableCARGO_OCUPACIONAL As CARGO_OCUPACIONALDataTable
    
    Private tableRADIOS As RADIOSDataTable
    
    Private tableCHALECOS As CHALECOSDataTable
    
    Private relationFK_ARMAS_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_GENERADORES_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_SOFTWARE_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_VEHICULOS_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_TERRENOS_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_ACTIVO_FIJO_GENERAL_PERSONAL As Global.System.Data.DataRelation
    
    Private relationEMPRESA_GENERAL_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationAREA_GENERAL_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationSUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationGERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_PERSONAL_CARGO_OCUPACIONAL As Global.System.Data.DataRelation
    
    Private relationFK_RADIOS_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private relationFK_CHALECOS_ACTIVO_FIJO_GENERAL As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ACTIVO_FIJO_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New ACTIVO_FIJO_GENERALDataTable(ds.Tables("ACTIVO_FIJO_GENERAL")))
            End If
            If (Not (ds.Tables("ARMAS")) Is Nothing) Then
                MyBase.Tables.Add(New ARMASDataTable(ds.Tables("ARMAS")))
            End If
            If (Not (ds.Tables("CAMARAS_SEGURIDAD")) Is Nothing) Then
                MyBase.Tables.Add(New CAMARAS_SEGURIDADDataTable(ds.Tables("CAMARAS_SEGURIDAD")))
            End If
            If (Not (ds.Tables("EQUIPOS_AMBIENTACION")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_AMBIENTACIONDataTable(ds.Tables("EQUIPOS_AMBIENTACION")))
            End If
            If (Not (ds.Tables("EQUIPOS_COCINA")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_COCINADataTable(ds.Tables("EQUIPOS_COCINA")))
            End If
            If (Not (ds.Tables("EQUIPOS_COMPUTO")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_COMPUTODataTable(ds.Tables("EQUIPOS_COMPUTO")))
            End If
            If (Not (ds.Tables("EQUIPOS_COMUNICACION_TELEFONIA")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_COMUNICACION_TELEFONIADataTable(ds.Tables("EQUIPOS_COMUNICACION_TELEFONIA")))
            End If
            If (Not (ds.Tables("EQUIPOS_OFICINA")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_OFICINADataTable(ds.Tables("EQUIPOS_OFICINA")))
            End If
            If (Not (ds.Tables("EQUIPOS_SEGURIDAD_INDUSTRIAL")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_SEGURIDAD_INDUSTRIALDataTable(ds.Tables("EQUIPOS_SEGURIDAD_INDUSTRIAL")))
            End If
            If (Not (ds.Tables("GENERADORES")) Is Nothing) Then
                MyBase.Tables.Add(New GENERADORESDataTable(ds.Tables("GENERADORES")))
            End If
            If (Not (ds.Tables("LIBRO_COLECCIONES")) Is Nothing) Then
                MyBase.Tables.Add(New LIBRO_COLECCIONESDataTable(ds.Tables("LIBRO_COLECCIONES")))
            End If
            If (Not (ds.Tables("MUEBLES_OFICINA")) Is Nothing) Then
                MyBase.Tables.Add(New MUEBLES_OFICINADataTable(ds.Tables("MUEBLES_OFICINA")))
            End If
            If (Not (ds.Tables("SOFTWARE")) Is Nothing) Then
                MyBase.Tables.Add(New SOFTWAREDataTable(ds.Tables("SOFTWARE")))
            End If
            If (Not (ds.Tables("VEHICULOS")) Is Nothing) Then
                MyBase.Tables.Add(New VEHICULOSDataTable(ds.Tables("VEHICULOS")))
            End If
            If (Not (ds.Tables("TERRENOS")) Is Nothing) Then
                MyBase.Tables.Add(New TERRENOSDataTable(ds.Tables("TERRENOS")))
            End If
            If (Not (ds.Tables("PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONALDataTable(ds.Tables("PERSONAL")))
            End If
            If (Not (ds.Tables("EMPRESA_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New EMPRESA_GENERALDataTable(ds.Tables("EMPRESA_GENERAL")))
            End If
            If (Not (ds.Tables("AREA_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New AREA_GENERALDataTable(ds.Tables("AREA_GENERAL")))
            End If
            If (Not (ds.Tables("SUCURSAL_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New SUCURSAL_GENERALDataTable(ds.Tables("SUCURSAL_GENERAL")))
            End If
            If (Not (ds.Tables("GERENCIAS_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New GERENCIAS_GENERALDataTable(ds.Tables("GERENCIAS_GENERAL")))
            End If
            If (Not (ds.Tables("CARGO_OCUPACIONAL")) Is Nothing) Then
                MyBase.Tables.Add(New CARGO_OCUPACIONALDataTable(ds.Tables("CARGO_OCUPACIONAL")))
            End If
            If (Not (ds.Tables("RADIOS")) Is Nothing) Then
                MyBase.Tables.Add(New RADIOSDataTable(ds.Tables("RADIOS")))
            End If
            If (Not (ds.Tables("CHALECOS")) Is Nothing) Then
                MyBase.Tables.Add(New CHALECOSDataTable(ds.Tables("CHALECOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACTIVO_FIJO_GENERAL() As ACTIVO_FIJO_GENERALDataTable
        Get
            Return Me.tableACTIVO_FIJO_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ARMAS() As ARMASDataTable
        Get
            Return Me.tableARMAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CAMARAS_SEGURIDAD() As CAMARAS_SEGURIDADDataTable
        Get
            Return Me.tableCAMARAS_SEGURIDAD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EQUIPOS_AMBIENTACION() As EQUIPOS_AMBIENTACIONDataTable
        Get
            Return Me.tableEQUIPOS_AMBIENTACION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EQUIPOS_COCINA() As EQUIPOS_COCINADataTable
        Get
            Return Me.tableEQUIPOS_COCINA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EQUIPOS_COMPUTO() As EQUIPOS_COMPUTODataTable
        Get
            Return Me.tableEQUIPOS_COMPUTO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EQUIPOS_COMUNICACION_TELEFONIA() As EQUIPOS_COMUNICACION_TELEFONIADataTable
        Get
            Return Me.tableEQUIPOS_COMUNICACION_TELEFONIA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EQUIPOS_OFICINA() As EQUIPOS_OFICINADataTable
        Get
            Return Me.tableEQUIPOS_OFICINA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EQUIPOS_SEGURIDAD_INDUSTRIAL() As EQUIPOS_SEGURIDAD_INDUSTRIALDataTable
        Get
            Return Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GENERADORES() As GENERADORESDataTable
        Get
            Return Me.tableGENERADORES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LIBRO_COLECCIONES() As LIBRO_COLECCIONESDataTable
        Get
            Return Me.tableLIBRO_COLECCIONES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MUEBLES_OFICINA() As MUEBLES_OFICINADataTable
        Get
            Return Me.tableMUEBLES_OFICINA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SOFTWARE() As SOFTWAREDataTable
        Get
            Return Me.tableSOFTWARE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VEHICULOS() As VEHICULOSDataTable
        Get
            Return Me.tableVEHICULOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TERRENOS() As TERRENOSDataTable
        Get
            Return Me.tableTERRENOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PERSONAL() As PERSONALDataTable
        Get
            Return Me.tablePERSONAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EMPRESA_GENERAL() As EMPRESA_GENERALDataTable
        Get
            Return Me.tableEMPRESA_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AREA_GENERAL() As AREA_GENERALDataTable
        Get
            Return Me.tableAREA_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SUCURSAL_GENERAL() As SUCURSAL_GENERALDataTable
        Get
            Return Me.tableSUCURSAL_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GERENCIAS_GENERAL() As GERENCIAS_GENERALDataTable
        Get
            Return Me.tableGERENCIAS_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CARGO_OCUPACIONAL() As CARGO_OCUPACIONALDataTable
        Get
            Return Me.tableCARGO_OCUPACIONAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RADIOS() As RADIOSDataTable
        Get
            Return Me.tableRADIOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CHALECOS() As CHALECOSDataTable
        Get
            Return Me.tableCHALECOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsActivosFijosGeneral = CType(MyBase.Clone,dsActivosFijosGeneral)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("ACTIVO_FIJO_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New ACTIVO_FIJO_GENERALDataTable(ds.Tables("ACTIVO_FIJO_GENERAL")))
            End If
            If (Not (ds.Tables("ARMAS")) Is Nothing) Then
                MyBase.Tables.Add(New ARMASDataTable(ds.Tables("ARMAS")))
            End If
            If (Not (ds.Tables("CAMARAS_SEGURIDAD")) Is Nothing) Then
                MyBase.Tables.Add(New CAMARAS_SEGURIDADDataTable(ds.Tables("CAMARAS_SEGURIDAD")))
            End If
            If (Not (ds.Tables("EQUIPOS_AMBIENTACION")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_AMBIENTACIONDataTable(ds.Tables("EQUIPOS_AMBIENTACION")))
            End If
            If (Not (ds.Tables("EQUIPOS_COCINA")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_COCINADataTable(ds.Tables("EQUIPOS_COCINA")))
            End If
            If (Not (ds.Tables("EQUIPOS_COMPUTO")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_COMPUTODataTable(ds.Tables("EQUIPOS_COMPUTO")))
            End If
            If (Not (ds.Tables("EQUIPOS_COMUNICACION_TELEFONIA")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_COMUNICACION_TELEFONIADataTable(ds.Tables("EQUIPOS_COMUNICACION_TELEFONIA")))
            End If
            If (Not (ds.Tables("EQUIPOS_OFICINA")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_OFICINADataTable(ds.Tables("EQUIPOS_OFICINA")))
            End If
            If (Not (ds.Tables("EQUIPOS_SEGURIDAD_INDUSTRIAL")) Is Nothing) Then
                MyBase.Tables.Add(New EQUIPOS_SEGURIDAD_INDUSTRIALDataTable(ds.Tables("EQUIPOS_SEGURIDAD_INDUSTRIAL")))
            End If
            If (Not (ds.Tables("GENERADORES")) Is Nothing) Then
                MyBase.Tables.Add(New GENERADORESDataTable(ds.Tables("GENERADORES")))
            End If
            If (Not (ds.Tables("LIBRO_COLECCIONES")) Is Nothing) Then
                MyBase.Tables.Add(New LIBRO_COLECCIONESDataTable(ds.Tables("LIBRO_COLECCIONES")))
            End If
            If (Not (ds.Tables("MUEBLES_OFICINA")) Is Nothing) Then
                MyBase.Tables.Add(New MUEBLES_OFICINADataTable(ds.Tables("MUEBLES_OFICINA")))
            End If
            If (Not (ds.Tables("SOFTWARE")) Is Nothing) Then
                MyBase.Tables.Add(New SOFTWAREDataTable(ds.Tables("SOFTWARE")))
            End If
            If (Not (ds.Tables("VEHICULOS")) Is Nothing) Then
                MyBase.Tables.Add(New VEHICULOSDataTable(ds.Tables("VEHICULOS")))
            End If
            If (Not (ds.Tables("TERRENOS")) Is Nothing) Then
                MyBase.Tables.Add(New TERRENOSDataTable(ds.Tables("TERRENOS")))
            End If
            If (Not (ds.Tables("PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONALDataTable(ds.Tables("PERSONAL")))
            End If
            If (Not (ds.Tables("EMPRESA_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New EMPRESA_GENERALDataTable(ds.Tables("EMPRESA_GENERAL")))
            End If
            If (Not (ds.Tables("AREA_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New AREA_GENERALDataTable(ds.Tables("AREA_GENERAL")))
            End If
            If (Not (ds.Tables("SUCURSAL_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New SUCURSAL_GENERALDataTable(ds.Tables("SUCURSAL_GENERAL")))
            End If
            If (Not (ds.Tables("GERENCIAS_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New GERENCIAS_GENERALDataTable(ds.Tables("GERENCIAS_GENERAL")))
            End If
            If (Not (ds.Tables("CARGO_OCUPACIONAL")) Is Nothing) Then
                MyBase.Tables.Add(New CARGO_OCUPACIONALDataTable(ds.Tables("CARGO_OCUPACIONAL")))
            End If
            If (Not (ds.Tables("RADIOS")) Is Nothing) Then
                MyBase.Tables.Add(New RADIOSDataTable(ds.Tables("RADIOS")))
            End If
            If (Not (ds.Tables("CHALECOS")) Is Nothing) Then
                MyBase.Tables.Add(New CHALECOSDataTable(ds.Tables("CHALECOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableACTIVO_FIJO_GENERAL = CType(MyBase.Tables("ACTIVO_FIJO_GENERAL"),ACTIVO_FIJO_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACTIVO_FIJO_GENERAL) Is Nothing) Then
                Me.tableACTIVO_FIJO_GENERAL.InitVars
            End If
        End If
        Me.tableARMAS = CType(MyBase.Tables("ARMAS"),ARMASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableARMAS) Is Nothing) Then
                Me.tableARMAS.InitVars
            End If
        End If
        Me.tableCAMARAS_SEGURIDAD = CType(MyBase.Tables("CAMARAS_SEGURIDAD"),CAMARAS_SEGURIDADDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCAMARAS_SEGURIDAD) Is Nothing) Then
                Me.tableCAMARAS_SEGURIDAD.InitVars
            End If
        End If
        Me.tableEQUIPOS_AMBIENTACION = CType(MyBase.Tables("EQUIPOS_AMBIENTACION"),EQUIPOS_AMBIENTACIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEQUIPOS_AMBIENTACION) Is Nothing) Then
                Me.tableEQUIPOS_AMBIENTACION.InitVars
            End If
        End If
        Me.tableEQUIPOS_COCINA = CType(MyBase.Tables("EQUIPOS_COCINA"),EQUIPOS_COCINADataTable)
        If (initTable = true) Then
            If (Not (Me.tableEQUIPOS_COCINA) Is Nothing) Then
                Me.tableEQUIPOS_COCINA.InitVars
            End If
        End If
        Me.tableEQUIPOS_COMPUTO = CType(MyBase.Tables("EQUIPOS_COMPUTO"),EQUIPOS_COMPUTODataTable)
        If (initTable = true) Then
            If (Not (Me.tableEQUIPOS_COMPUTO) Is Nothing) Then
                Me.tableEQUIPOS_COMPUTO.InitVars
            End If
        End If
        Me.tableEQUIPOS_COMUNICACION_TELEFONIA = CType(MyBase.Tables("EQUIPOS_COMUNICACION_TELEFONIA"),EQUIPOS_COMUNICACION_TELEFONIADataTable)
        If (initTable = true) Then
            If (Not (Me.tableEQUIPOS_COMUNICACION_TELEFONIA) Is Nothing) Then
                Me.tableEQUIPOS_COMUNICACION_TELEFONIA.InitVars
            End If
        End If
        Me.tableEQUIPOS_OFICINA = CType(MyBase.Tables("EQUIPOS_OFICINA"),EQUIPOS_OFICINADataTable)
        If (initTable = true) Then
            If (Not (Me.tableEQUIPOS_OFICINA) Is Nothing) Then
                Me.tableEQUIPOS_OFICINA.InitVars
            End If
        End If
        Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL = CType(MyBase.Tables("EQUIPOS_SEGURIDAD_INDUSTRIAL"),EQUIPOS_SEGURIDAD_INDUSTRIALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL) Is Nothing) Then
                Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.InitVars
            End If
        End If
        Me.tableGENERADORES = CType(MyBase.Tables("GENERADORES"),GENERADORESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGENERADORES) Is Nothing) Then
                Me.tableGENERADORES.InitVars
            End If
        End If
        Me.tableLIBRO_COLECCIONES = CType(MyBase.Tables("LIBRO_COLECCIONES"),LIBRO_COLECCIONESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLIBRO_COLECCIONES) Is Nothing) Then
                Me.tableLIBRO_COLECCIONES.InitVars
            End If
        End If
        Me.tableMUEBLES_OFICINA = CType(MyBase.Tables("MUEBLES_OFICINA"),MUEBLES_OFICINADataTable)
        If (initTable = true) Then
            If (Not (Me.tableMUEBLES_OFICINA) Is Nothing) Then
                Me.tableMUEBLES_OFICINA.InitVars
            End If
        End If
        Me.tableSOFTWARE = CType(MyBase.Tables("SOFTWARE"),SOFTWAREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSOFTWARE) Is Nothing) Then
                Me.tableSOFTWARE.InitVars
            End If
        End If
        Me.tableVEHICULOS = CType(MyBase.Tables("VEHICULOS"),VEHICULOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVEHICULOS) Is Nothing) Then
                Me.tableVEHICULOS.InitVars
            End If
        End If
        Me.tableTERRENOS = CType(MyBase.Tables("TERRENOS"),TERRENOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTERRENOS) Is Nothing) Then
                Me.tableTERRENOS.InitVars
            End If
        End If
        Me.tablePERSONAL = CType(MyBase.Tables("PERSONAL"),PERSONALDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePERSONAL) Is Nothing) Then
                Me.tablePERSONAL.InitVars
            End If
        End If
        Me.tableEMPRESA_GENERAL = CType(MyBase.Tables("EMPRESA_GENERAL"),EMPRESA_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEMPRESA_GENERAL) Is Nothing) Then
                Me.tableEMPRESA_GENERAL.InitVars
            End If
        End If
        Me.tableAREA_GENERAL = CType(MyBase.Tables("AREA_GENERAL"),AREA_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAREA_GENERAL) Is Nothing) Then
                Me.tableAREA_GENERAL.InitVars
            End If
        End If
        Me.tableSUCURSAL_GENERAL = CType(MyBase.Tables("SUCURSAL_GENERAL"),SUCURSAL_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSUCURSAL_GENERAL) Is Nothing) Then
                Me.tableSUCURSAL_GENERAL.InitVars
            End If
        End If
        Me.tableGERENCIAS_GENERAL = CType(MyBase.Tables("GERENCIAS_GENERAL"),GERENCIAS_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGERENCIAS_GENERAL) Is Nothing) Then
                Me.tableGERENCIAS_GENERAL.InitVars
            End If
        End If
        Me.tableCARGO_OCUPACIONAL = CType(MyBase.Tables("CARGO_OCUPACIONAL"),CARGO_OCUPACIONALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCARGO_OCUPACIONAL) Is Nothing) Then
                Me.tableCARGO_OCUPACIONAL.InitVars
            End If
        End If
        Me.tableRADIOS = CType(MyBase.Tables("RADIOS"),RADIOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRADIOS) Is Nothing) Then
                Me.tableRADIOS.InitVars
            End If
        End If
        Me.tableCHALECOS = CType(MyBase.Tables("CHALECOS"),CHALECOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCHALECOS) Is Nothing) Then
                Me.tableCHALECOS.InitVars
            End If
        End If
        Me.relationFK_ARMAS_ACTIVO_FIJO_GENERAL = Me.Relations("FK_ARMAS_ACTIVO_FIJO_GENERAL")
        Me.relationFK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL = Me.Relations("FK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL")
        Me.relationFK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL = Me.Relations("FK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL")
        Me.relationFK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL = Me.Relations("FK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL")
        Me.relationFK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL = Me.Relations("FK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL")
        Me.relationFK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL = Me.Relations("FK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL")
        Me.relationFK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL = Me.Relations("FK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL")
        Me.relationFK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL = Me.Relations("FK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL")
        Me.relationFK_GENERADORES_ACTIVO_FIJO_GENERAL = Me.Relations("FK_GENERADORES_ACTIVO_FIJO_GENERAL")
        Me.relationFK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL = Me.Relations("FK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL")
        Me.relationFK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL = Me.Relations("FK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL")
        Me.relationFK_SOFTWARE_ACTIVO_FIJO_GENERAL = Me.Relations("FK_SOFTWARE_ACTIVO_FIJO_GENERAL")
        Me.relationFK_VEHICULOS_ACTIVO_FIJO_GENERAL = Me.Relations("FK_VEHICULOS_ACTIVO_FIJO_GENERAL")
        Me.relationFK_TERRENOS_ACTIVO_FIJO_GENERAL = Me.Relations("FK_TERRENOS_ACTIVO_FIJO_GENERAL")
        Me.relationFK_ACTIVO_FIJO_GENERAL_PERSONAL = Me.Relations("FK_ACTIVO_FIJO_GENERAL_PERSONAL")
        Me.relationEMPRESA_GENERAL_ACTIVO_FIJO_GENERAL = Me.Relations("EMPRESA_GENERAL_ACTIVO_FIJO_GENERAL")
        Me.relationAREA_GENERAL_ACTIVO_FIJO_GENERAL = Me.Relations("AREA_GENERAL_ACTIVO_FIJO_GENERAL")
        Me.relationSUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL = Me.Relations("SUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL")
        Me.relationGERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL = Me.Relations("GERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL")
        Me.relationFK_PERSONAL_CARGO_OCUPACIONAL = Me.Relations("FK_PERSONAL_CARGO_OCUPACIONAL")
        Me.relationFK_RADIOS_ACTIVO_FIJO_GENERAL = Me.Relations("FK_RADIOS_ACTIVO_FIJO_GENERAL")
        Me.relationFK_CHALECOS_ACTIVO_FIJO_GENERAL = Me.Relations("FK_CHALECOS_ACTIVO_FIJO_GENERAL")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsActivosFijosGeneral"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsActivosFijosGeneral.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableACTIVO_FIJO_GENERAL = New ACTIVO_FIJO_GENERALDataTable()
        MyBase.Tables.Add(Me.tableACTIVO_FIJO_GENERAL)
        Me.tableARMAS = New ARMASDataTable()
        MyBase.Tables.Add(Me.tableARMAS)
        Me.tableCAMARAS_SEGURIDAD = New CAMARAS_SEGURIDADDataTable()
        MyBase.Tables.Add(Me.tableCAMARAS_SEGURIDAD)
        Me.tableEQUIPOS_AMBIENTACION = New EQUIPOS_AMBIENTACIONDataTable()
        MyBase.Tables.Add(Me.tableEQUIPOS_AMBIENTACION)
        Me.tableEQUIPOS_COCINA = New EQUIPOS_COCINADataTable()
        MyBase.Tables.Add(Me.tableEQUIPOS_COCINA)
        Me.tableEQUIPOS_COMPUTO = New EQUIPOS_COMPUTODataTable()
        MyBase.Tables.Add(Me.tableEQUIPOS_COMPUTO)
        Me.tableEQUIPOS_COMUNICACION_TELEFONIA = New EQUIPOS_COMUNICACION_TELEFONIADataTable()
        MyBase.Tables.Add(Me.tableEQUIPOS_COMUNICACION_TELEFONIA)
        Me.tableEQUIPOS_OFICINA = New EQUIPOS_OFICINADataTable()
        MyBase.Tables.Add(Me.tableEQUIPOS_OFICINA)
        Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL = New EQUIPOS_SEGURIDAD_INDUSTRIALDataTable()
        MyBase.Tables.Add(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL)
        Me.tableGENERADORES = New GENERADORESDataTable()
        MyBase.Tables.Add(Me.tableGENERADORES)
        Me.tableLIBRO_COLECCIONES = New LIBRO_COLECCIONESDataTable()
        MyBase.Tables.Add(Me.tableLIBRO_COLECCIONES)
        Me.tableMUEBLES_OFICINA = New MUEBLES_OFICINADataTable()
        MyBase.Tables.Add(Me.tableMUEBLES_OFICINA)
        Me.tableSOFTWARE = New SOFTWAREDataTable()
        MyBase.Tables.Add(Me.tableSOFTWARE)
        Me.tableVEHICULOS = New VEHICULOSDataTable()
        MyBase.Tables.Add(Me.tableVEHICULOS)
        Me.tableTERRENOS = New TERRENOSDataTable()
        MyBase.Tables.Add(Me.tableTERRENOS)
        Me.tablePERSONAL = New PERSONALDataTable()
        MyBase.Tables.Add(Me.tablePERSONAL)
        Me.tableEMPRESA_GENERAL = New EMPRESA_GENERALDataTable()
        MyBase.Tables.Add(Me.tableEMPRESA_GENERAL)
        Me.tableAREA_GENERAL = New AREA_GENERALDataTable()
        MyBase.Tables.Add(Me.tableAREA_GENERAL)
        Me.tableSUCURSAL_GENERAL = New SUCURSAL_GENERALDataTable()
        MyBase.Tables.Add(Me.tableSUCURSAL_GENERAL)
        Me.tableGERENCIAS_GENERAL = New GERENCIAS_GENERALDataTable()
        MyBase.Tables.Add(Me.tableGERENCIAS_GENERAL)
        Me.tableCARGO_OCUPACIONAL = New CARGO_OCUPACIONALDataTable()
        MyBase.Tables.Add(Me.tableCARGO_OCUPACIONAL)
        Me.tableRADIOS = New RADIOSDataTable()
        MyBase.Tables.Add(Me.tableRADIOS)
        Me.tableCHALECOS = New CHALECOSDataTable()
        MyBase.Tables.Add(Me.tableCHALECOS)
        Me.relationFK_ARMAS_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_ARMAS_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableARMAS.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_ARMAS_ACTIVO_FIJO_GENERAL)
        Me.relationFK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableCAMARAS_SEGURIDAD.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL)
        Me.relationFK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableEQUIPOS_AMBIENTACION.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL)
        Me.relationFK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableEQUIPOS_COCINA.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL)
        Me.relationFK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableEQUIPOS_COMPUTO.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL)
        Me.relationFK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL)
        Me.relationFK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableEQUIPOS_OFICINA.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL)
        Me.relationFK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL)
        Me.relationFK_GENERADORES_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_GENERADORES_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableGENERADORES.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_GENERADORES_ACTIVO_FIJO_GENERAL)
        Me.relationFK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableLIBRO_COLECCIONES.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL)
        Me.relationFK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableMUEBLES_OFICINA.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL)
        Me.relationFK_SOFTWARE_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_SOFTWARE_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableSOFTWARE.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_SOFTWARE_ACTIVO_FIJO_GENERAL)
        Me.relationFK_VEHICULOS_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_VEHICULOS_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableVEHICULOS.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_VEHICULOS_ACTIVO_FIJO_GENERAL)
        Me.relationFK_TERRENOS_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_TERRENOS_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableTERRENOS.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_TERRENOS_ACTIVO_FIJO_GENERAL)
        Me.relationFK_ACTIVO_FIJO_GENERAL_PERSONAL = New Global.System.Data.DataRelation("FK_ACTIVO_FIJO_GENERAL_PERSONAL", New Global.System.Data.DataColumn() {Me.tablePERSONAL.ID_PERSONALColumn}, New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_PERSONALColumn}, false)
        Me.Relations.Add(Me.relationFK_ACTIVO_FIJO_GENERAL_PERSONAL)
        Me.relationEMPRESA_GENERAL_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("EMPRESA_GENERAL_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableEMPRESA_GENERAL.ID_EMPRESAColumn}, New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_EMPRESAColumn}, false)
        Me.Relations.Add(Me.relationEMPRESA_GENERAL_ACTIVO_FIJO_GENERAL)
        Me.relationAREA_GENERAL_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("AREA_GENERAL_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableAREA_GENERAL.ID_AREA_GENERALColumn}, New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_AREAColumn}, false)
        Me.Relations.Add(Me.relationAREA_GENERAL_ACTIVO_FIJO_GENERAL)
        Me.relationSUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("SUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableSUCURSAL_GENERAL.ID_SUCURSALColumn}, New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_SUCURSALColumn}, false)
        Me.Relations.Add(Me.relationSUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL)
        Me.relationGERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("GERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableGERENCIAS_GENERAL.ID_GERENCIAS_GENERALColumn}, New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_GERENCIASColumn}, false)
        Me.Relations.Add(Me.relationGERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL)
        Me.relationFK_PERSONAL_CARGO_OCUPACIONAL = New Global.System.Data.DataRelation("FK_PERSONAL_CARGO_OCUPACIONAL", New Global.System.Data.DataColumn() {Me.tableCARGO_OCUPACIONAL.ID_CARGO_OCUPACIONALColumn}, New Global.System.Data.DataColumn() {Me.tablePERSONAL.ID_CARGO_OCUPACIONALColumn}, false)
        Me.Relations.Add(Me.relationFK_PERSONAL_CARGO_OCUPACIONAL)
        Me.relationFK_RADIOS_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_RADIOS_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableRADIOS.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_RADIOS_ACTIVO_FIJO_GENERAL)
        Me.relationFK_CHALECOS_ACTIVO_FIJO_GENERAL = New Global.System.Data.DataRelation("FK_CHALECOS_ACTIVO_FIJO_GENERAL", New Global.System.Data.DataColumn() {Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn}, New Global.System.Data.DataColumn() {Me.tableCHALECOS.ID_ACTIVO_FIJOColumn}, false)
        Me.Relations.Add(Me.relationFK_CHALECOS_ACTIVO_FIJO_GENERAL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeACTIVO_FIJO_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeARMAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCAMARAS_SEGURIDAD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeEQUIPOS_AMBIENTACION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeEQUIPOS_COCINA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeEQUIPOS_COMPUTO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeEQUIPOS_COMUNICACION_TELEFONIA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeEQUIPOS_OFICINA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeEQUIPOS_SEGURIDAD_INDUSTRIAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeGENERADORES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeLIBRO_COLECCIONES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeMUEBLES_OFICINA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeSOFTWARE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeVEHICULOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeTERRENOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializePERSONAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeEMPRESA_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeAREA_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeSUCURSAL_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeGERENCIAS_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCARGO_OCUPACIONAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRADIOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCHALECOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub ACTIVO_FIJO_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As ACTIVO_FIJO_GENERALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub ARMASRowChangeEventHandler(ByVal sender As Object, ByVal e As ARMASRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CAMARAS_SEGURIDADRowChangeEventHandler(ByVal sender As Object, ByVal e As CAMARAS_SEGURIDADRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub EQUIPOS_AMBIENTACIONRowChangeEventHandler(ByVal sender As Object, ByVal e As EQUIPOS_AMBIENTACIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub EQUIPOS_COCINARowChangeEventHandler(ByVal sender As Object, ByVal e As EQUIPOS_COCINARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub EQUIPOS_COMPUTORowChangeEventHandler(ByVal sender As Object, ByVal e As EQUIPOS_COMPUTORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub EQUIPOS_COMUNICACION_TELEFONIARowChangeEventHandler(ByVal sender As Object, ByVal e As EQUIPOS_COMUNICACION_TELEFONIARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub EQUIPOS_OFICINARowChangeEventHandler(ByVal sender As Object, ByVal e As EQUIPOS_OFICINARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEventHandler(ByVal sender As Object, ByVal e As EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub GENERADORESRowChangeEventHandler(ByVal sender As Object, ByVal e As GENERADORESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub LIBRO_COLECCIONESRowChangeEventHandler(ByVal sender As Object, ByVal e As LIBRO_COLECCIONESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub MUEBLES_OFICINARowChangeEventHandler(ByVal sender As Object, ByVal e As MUEBLES_OFICINARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub SOFTWARERowChangeEventHandler(ByVal sender As Object, ByVal e As SOFTWARERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub VEHICULOSRowChangeEventHandler(ByVal sender As Object, ByVal e As VEHICULOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub TERRENOSRowChangeEventHandler(ByVal sender As Object, ByVal e As TERRENOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub PERSONALRowChangeEventHandler(ByVal sender As Object, ByVal e As PERSONALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub EMPRESA_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As EMPRESA_GENERALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub AREA_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As AREA_GENERALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub SUCURSAL_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As SUCURSAL_GENERALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub GERENCIAS_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As GERENCIAS_GENERALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CARGO_OCUPACIONALRowChangeEventHandler(ByVal sender As Object, ByVal e As CARGO_OCUPACIONALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RADIOSRowChangeEventHandler(ByVal sender As Object, ByVal e As RADIOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CHALECOSRowChangeEventHandler(ByVal sender As Object, ByVal e As CHALECOSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACTIVO_FIJO_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of ACTIVO_FIJO_GENERALRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnID_PERSONAL As Global.System.Data.DataColumn
        
        Private columnID_EMPRESA As Global.System.Data.DataColumn
        
        Private columnID_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnID_GERENCIAS As Global.System.Data.DataColumn
        
        Private columnID_AREA As Global.System.Data.DataColumn
        
        Private columnCARPETA As Global.System.Data.DataColumn
        
        Private columnCONTRATO As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_ACTIVO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_PROVEDOR As Global.System.Data.DataColumn
        
        Private columnNOMBRE_CUSTODIO As Global.System.Data.DataColumn
        
        Private columnRESPONSABLE As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnCODIGO_ARANCEL As Global.System.Data.DataColumn
        
        Private columnNUM_ORDEN_COMPRA As Global.System.Data.DataColumn
        
        Private columnNUM_FACTURA As Global.System.Data.DataColumn
        
        Private columnVALOR_FACTURA As Global.System.Data.DataColumn
        
        Private columnVALOR_ADICIONAL As Global.System.Data.DataColumn
        
        Private columnVALOR_RESIDUAL As Global.System.Data.DataColumn
        
        Private columnFECHA_ADQUISICION As Global.System.Data.DataColumn
        
        Private columnAÑOS_VIDA_UTIL As Global.System.Data.DataColumn
        
        Private columnCTA_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCTA_GASTOS As Global.System.Data.DataColumn
        
        Private columnCTA_DEPRECIACION As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnTIPO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnMANTENIMIENTO As Global.System.Data.DataColumn
        
        Private columnFECHA_MANTENIMIENTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACTIVO_FIJO_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_PERSONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PERSONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_GERENCIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_GERENCIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CARPETAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARPETA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONTRATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTRATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_PROVEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_PROVEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_CUSTODIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_CUSTODIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RESPONSABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_ARANCELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_ARANCEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_ORDEN_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_ORDEN_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_FACTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_FACTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_FACTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_FACTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_ADICIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_ADICIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_RESIDUALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_RESIDUAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_ADQUISICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADQUISICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property AÑOS_VIDA_UTILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAÑOS_VIDA_UTIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CTA_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CTA_GASTOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_GASTOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CTA_DEPRECIACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DEPRECIACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.Rows(index),ACTIVO_FIJO_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ACTIVO_FIJO_GENERALRowChanging As ACTIVO_FIJO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ACTIVO_FIJO_GENERALRowChanged As ACTIVO_FIJO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ACTIVO_FIJO_GENERALRowDeleting As ACTIVO_FIJO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ACTIVO_FIJO_GENERALRowDeleted As ACTIVO_FIJO_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddACTIVO_FIJO_GENERALRow(ByVal row As ACTIVO_FIJO_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddACTIVO_FIJO_GENERALRow( _
                    ByVal ID_ACTIVO_FIJO As Integer,  _
                    ByVal parentPERSONALRowByFK_ACTIVO_FIJO_GENERAL_PERSONAL As PERSONALRow,  _
                    ByVal parentEMPRESA_GENERALRowByEMPRESA_GENERAL_ACTIVO_FIJO_GENERAL As EMPRESA_GENERALRow,  _
                    ByVal parentSUCURSAL_GENERALRowBySUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL As SUCURSAL_GENERALRow,  _
                    ByVal parentGERENCIAS_GENERALRowByGERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL As GERENCIAS_GENERALRow,  _
                    ByVal parentAREA_GENERALRowByAREA_GENERAL_ACTIVO_FIJO_GENERAL As AREA_GENERALRow,  _
                    ByVal CARPETA As String,  _
                    ByVal CONTRATO As String,  _
                    ByVal CODIGO As String,  _
                    ByVal NOMBRE_ACTIVO As String,  _
                    ByVal NOMBRE_PROVEDOR As String,  _
                    ByVal NOMBRE_CUSTODIO As String,  _
                    ByVal RESPONSABLE As String,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO_ARANCEL As String,  _
                    ByVal NUM_ORDEN_COMPRA As String,  _
                    ByVal NUM_FACTURA As String,  _
                    ByVal VALOR_FACTURA As Decimal,  _
                    ByVal VALOR_ADICIONAL As Decimal,  _
                    ByVal VALOR_RESIDUAL As Decimal,  _
                    ByVal FECHA_ADQUISICION As Date,  _
                    ByVal AÑOS_VIDA_UTIL As Integer,  _
                    ByVal CTA_ACTIVO As String,  _
                    ByVal CTA_GASTOS As String,  _
                    ByVal CTA_DEPRECIACION As String,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal TIPO_ACTIVO As String,  _
                    ByVal MANTENIMIENTO As String,  _
                    ByVal FECHA_MANTENIMIENTO As Date) As ACTIVO_FIJO_GENERALRow
            Dim rowACTIVO_FIJO_GENERALRow As ACTIVO_FIJO_GENERALRow = CType(Me.NewRow,ACTIVO_FIJO_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_ACTIVO_FIJO, Nothing, Nothing, Nothing, Nothing, Nothing, CARPETA, CONTRATO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, NOMBRE_CUSTODIO, RESPONSABLE, FECHA, CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTURA, VALOR_FACTURA, VALOR_ADICIONAL, VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_UTIL, CTA_ACTIVO, CTA_GASTOS, CTA_DEPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTIVO, MANTENIMIENTO, FECHA_MANTENIMIENTO}
            If (Not (parentPERSONALRowByFK_ACTIVO_FIJO_GENERAL_PERSONAL) Is Nothing) Then
                columnValuesArray(1) = parentPERSONALRowByFK_ACTIVO_FIJO_GENERAL_PERSONAL(0)
            End If
            If (Not (parentEMPRESA_GENERALRowByEMPRESA_GENERAL_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(2) = parentEMPRESA_GENERALRowByEMPRESA_GENERAL_ACTIVO_FIJO_GENERAL(0)
            End If
            If (Not (parentSUCURSAL_GENERALRowBySUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(3) = parentSUCURSAL_GENERALRowBySUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL(0)
            End If
            If (Not (parentGERENCIAS_GENERALRowByGERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(4) = parentGERENCIAS_GENERALRowByGERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL(0)
            End If
            If (Not (parentAREA_GENERALRowByAREA_GENERAL_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(5) = parentAREA_GENERALRowByAREA_GENERAL_ACTIVO_FIJO_GENERAL(0)
            End If
            rowACTIVO_FIJO_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACTIVO_FIJO_GENERALRow)
            Return rowACTIVO_FIJO_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_ACTIVO_FIJO(ByVal ID_ACTIVO_FIJO As Integer) As ACTIVO_FIJO_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_ACTIVO_FIJO}),ACTIVO_FIJO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACTIVO_FIJO_GENERALDataTable = CType(MyBase.Clone,ACTIVO_FIJO_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACTIVO_FIJO_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnID_PERSONAL = MyBase.Columns("ID_PERSONAL")
            Me.columnID_EMPRESA = MyBase.Columns("ID_EMPRESA")
            Me.columnID_SUCURSAL = MyBase.Columns("ID_SUCURSAL")
            Me.columnID_GERENCIAS = MyBase.Columns("ID_GERENCIAS")
            Me.columnID_AREA = MyBase.Columns("ID_AREA")
            Me.columnCARPETA = MyBase.Columns("CARPETA")
            Me.columnCONTRATO = MyBase.Columns("CONTRATO")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnNOMBRE_ACTIVO = MyBase.Columns("NOMBRE_ACTIVO")
            Me.columnNOMBRE_PROVEDOR = MyBase.Columns("NOMBRE_PROVEDOR")
            Me.columnNOMBRE_CUSTODIO = MyBase.Columns("NOMBRE_CUSTODIO")
            Me.columnRESPONSABLE = MyBase.Columns("RESPONSABLE")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnCODIGO_ARANCEL = MyBase.Columns("CODIGO_ARANCEL")
            Me.columnNUM_ORDEN_COMPRA = MyBase.Columns("NUM_ORDEN_COMPRA")
            Me.columnNUM_FACTURA = MyBase.Columns("NUM_FACTURA")
            Me.columnVALOR_FACTURA = MyBase.Columns("VALOR_FACTURA")
            Me.columnVALOR_ADICIONAL = MyBase.Columns("VALOR_ADICIONAL")
            Me.columnVALOR_RESIDUAL = MyBase.Columns("VALOR_RESIDUAL")
            Me.columnFECHA_ADQUISICION = MyBase.Columns("FECHA_ADQUISICION")
            Me.columnAÑOS_VIDA_UTIL = MyBase.Columns("AÑOS_VIDA_UTIL")
            Me.columnCTA_ACTIVO = MyBase.Columns("CTA_ACTIVO")
            Me.columnCTA_GASTOS = MyBase.Columns("CTA_GASTOS")
            Me.columnCTA_DEPRECIACION = MyBase.Columns("CTA_DEPRECIACION")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnTIPO_ACTIVO = MyBase.Columns("TIPO_ACTIVO")
            Me.columnMANTENIMIENTO = MyBase.Columns("MANTENIMIENTO")
            Me.columnFECHA_MANTENIMIENTO = MyBase.Columns("FECHA_MANTENIMIENTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnID_PERSONAL = New Global.System.Data.DataColumn("ID_PERSONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PERSONAL)
            Me.columnID_EMPRESA = New Global.System.Data.DataColumn("ID_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPRESA)
            Me.columnID_SUCURSAL = New Global.System.Data.DataColumn("ID_SUCURSAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SUCURSAL)
            Me.columnID_GERENCIAS = New Global.System.Data.DataColumn("ID_GERENCIAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_GERENCIAS)
            Me.columnID_AREA = New Global.System.Data.DataColumn("ID_AREA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AREA)
            Me.columnCARPETA = New Global.System.Data.DataColumn("CARPETA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARPETA)
            Me.columnCONTRATO = New Global.System.Data.DataColumn("CONTRATO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTRATO)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnNOMBRE_ACTIVO = New Global.System.Data.DataColumn("NOMBRE_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_ACTIVO)
            Me.columnNOMBRE_PROVEDOR = New Global.System.Data.DataColumn("NOMBRE_PROVEDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_PROVEDOR)
            Me.columnNOMBRE_CUSTODIO = New Global.System.Data.DataColumn("NOMBRE_CUSTODIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_CUSTODIO)
            Me.columnRESPONSABLE = New Global.System.Data.DataColumn("RESPONSABLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSABLE)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnCODIGO_ARANCEL = New Global.System.Data.DataColumn("CODIGO_ARANCEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_ARANCEL)
            Me.columnNUM_ORDEN_COMPRA = New Global.System.Data.DataColumn("NUM_ORDEN_COMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_ORDEN_COMPRA)
            Me.columnNUM_FACTURA = New Global.System.Data.DataColumn("NUM_FACTURA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_FACTURA)
            Me.columnVALOR_FACTURA = New Global.System.Data.DataColumn("VALOR_FACTURA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_FACTURA)
            Me.columnVALOR_ADICIONAL = New Global.System.Data.DataColumn("VALOR_ADICIONAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_ADICIONAL)
            Me.columnVALOR_RESIDUAL = New Global.System.Data.DataColumn("VALOR_RESIDUAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_RESIDUAL)
            Me.columnFECHA_ADQUISICION = New Global.System.Data.DataColumn("FECHA_ADQUISICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADQUISICION)
            Me.columnAÑOS_VIDA_UTIL = New Global.System.Data.DataColumn("AÑOS_VIDA_UTIL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAÑOS_VIDA_UTIL)
            Me.columnCTA_ACTIVO = New Global.System.Data.DataColumn("CTA_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_ACTIVO)
            Me.columnCTA_GASTOS = New Global.System.Data.DataColumn("CTA_GASTOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_GASTOS)
            Me.columnCTA_DEPRECIACION = New Global.System.Data.DataColumn("CTA_DEPRECIACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DEPRECIACION)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnTIPO_ACTIVO = New Global.System.Data.DataColumn("TIPO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_ACTIVO)
            Me.columnMANTENIMIENTO = New Global.System.Data.DataColumn("MANTENIMIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMANTENIMIENTO)
            Me.columnFECHA_MANTENIMIENTO = New Global.System.Data.DataColumn("FECHA_MANTENIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MANTENIMIENTO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_ACTIVO_FIJO}, true))
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnID_ACTIVO_FIJO.Unique = true
            Me.columnID_PERSONAL.AllowDBNull = false
            Me.columnID_EMPRESA.AllowDBNull = false
            Me.columnID_SUCURSAL.AllowDBNull = false
            Me.columnID_GERENCIAS.AllowDBNull = false
            Me.columnID_AREA.AllowDBNull = false
            Me.columnCARPETA.AllowDBNull = false
            Me.columnCARPETA.MaxLength = 2147483647
            Me.columnCONTRATO.AllowDBNull = false
            Me.columnCONTRATO.MaxLength = 2147483647
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnNOMBRE_ACTIVO.AllowDBNull = false
            Me.columnNOMBRE_ACTIVO.MaxLength = 2147483647
            Me.columnNOMBRE_PROVEDOR.AllowDBNull = false
            Me.columnNOMBRE_PROVEDOR.MaxLength = 2147483647
            Me.columnNOMBRE_CUSTODIO.AllowDBNull = false
            Me.columnNOMBRE_CUSTODIO.MaxLength = 2147483647
            Me.columnRESPONSABLE.AllowDBNull = false
            Me.columnRESPONSABLE.MaxLength = 2147483647
            Me.columnFECHA.AllowDBNull = false
            Me.columnCODIGO_ARANCEL.AllowDBNull = false
            Me.columnCODIGO_ARANCEL.MaxLength = 2147483647
            Me.columnNUM_ORDEN_COMPRA.AllowDBNull = false
            Me.columnNUM_ORDEN_COMPRA.MaxLength = 2147483647
            Me.columnNUM_FACTURA.AllowDBNull = false
            Me.columnNUM_FACTURA.MaxLength = 2147483647
            Me.columnVALOR_FACTURA.AllowDBNull = false
            Me.columnVALOR_ADICIONAL.AllowDBNull = false
            Me.columnVALOR_RESIDUAL.AllowDBNull = false
            Me.columnFECHA_ADQUISICION.AllowDBNull = false
            Me.columnAÑOS_VIDA_UTIL.AllowDBNull = false
            Me.columnCTA_ACTIVO.AllowDBNull = false
            Me.columnCTA_ACTIVO.MaxLength = 2147483647
            Me.columnCTA_GASTOS.AllowDBNull = false
            Me.columnCTA_GASTOS.MaxLength = 2147483647
            Me.columnCTA_DEPRECIACION.AllowDBNull = false
            Me.columnCTA_DEPRECIACION.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnTIPO_ACTIVO.AllowDBNull = false
            Me.columnTIPO_ACTIVO.MaxLength = 2147483647
            Me.columnMANTENIMIENTO.AllowDBNull = false
            Me.columnMANTENIMIENTO.MaxLength = 2147483647
            Me.columnFECHA_MANTENIMIENTO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Return CType(Me.NewRow,ACTIVO_FIJO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACTIVO_FIJO_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACTIVO_FIJO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACTIVO_FIJO_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent ACTIVO_FIJO_GENERALRowChanged(Me, New ACTIVO_FIJO_GENERALRowChangeEvent(CType(e.Row,ACTIVO_FIJO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACTIVO_FIJO_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent ACTIVO_FIJO_GENERALRowChanging(Me, New ACTIVO_FIJO_GENERALRowChangeEvent(CType(e.Row,ACTIVO_FIJO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACTIVO_FIJO_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent ACTIVO_FIJO_GENERALRowDeleted(Me, New ACTIVO_FIJO_GENERALRowChangeEvent(CType(e.Row,ACTIVO_FIJO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACTIVO_FIJO_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent ACTIVO_FIJO_GENERALRowDeleting(Me, New ACTIVO_FIJO_GENERALRowChangeEvent(CType(e.Row,ACTIVO_FIJO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveACTIVO_FIJO_GENERALRow(ByVal row As ACTIVO_FIJO_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACTIVO_FIJO_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ARMASDataTable
        Inherits Global.System.Data.TypedTableBase(Of ARMASRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnNUM_PERMISO_GOBIERNO As Global.System.Data.DataColumn
        
        Private columnNUM_PERMISO_COMANDO As Global.System.Data.DataColumn
        
        Private columnNUM_TENENCIA_ARMAS As Global.System.Data.DataColumn
        
        Private columnFEC_ACEPTACION_TENENCIA As Global.System.Data.DataColumn
        
        Private columnFEC_CADUCIDAD_TENENCIA As Global.System.Data.DataColumn
        
        Private columnNUM_MATRICULA_ARMA As Global.System.Data.DataColumn
        
        Private columnFEC_ACEPTACION_MATRICULA As Global.System.Data.DataColumn
        
        Private columnFEC_CADUCIDAD_MATRICULA As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ARMAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_PERMISO_GOBIERNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_PERMISO_GOBIERNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_PERMISO_COMANDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_PERMISO_COMANDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_TENENCIA_ARMASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_TENENCIA_ARMAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_ACEPTACION_TENENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_ACEPTACION_TENENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_CADUCIDAD_TENENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_CADUCIDAD_TENENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_MATRICULA_ARMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_MATRICULA_ARMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_ACEPTACION_MATRICULAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_ACEPTACION_MATRICULA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_CADUCIDAD_MATRICULAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_CADUCIDAD_MATRICULA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ARMASRow
            Get
                Return CType(Me.Rows(index),ARMASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ARMASRowChanging As ARMASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ARMASRowChanged As ARMASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ARMASRowDeleting As ARMASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ARMASRowDeleted As ARMASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddARMASRow(ByVal row As ARMASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddARMASRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_ARMAS_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal NUM_PERMISO_GOBIERNO As String, ByVal NUM_PERMISO_COMANDO As String, ByVal NUM_TENENCIA_ARMAS As String, ByVal FEC_ACEPTACION_TENENCIA As Date, ByVal FEC_CADUCIDAD_TENENCIA As Date, ByVal NUM_MATRICULA_ARMA As String, ByVal FEC_ACEPTACION_MATRICULA As Date, ByVal FEC_CADUCIDAD_MATRICULA As Date, ByVal SERIE As String, ByVal ESTADO As Integer) As ARMASRow
            Dim rowARMASRow As ARMASRow = CType(Me.NewRow,ARMASRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, NUM_PERMISO_GOBIERNO, NUM_PERMISO_COMANDO, NUM_TENENCIA_ARMAS, FEC_ACEPTACION_TENENCIA, FEC_CADUCIDAD_TENENCIA, NUM_MATRICULA_ARMA, FEC_ACEPTACION_MATRICULA, FEC_CADUCIDAD_MATRICULA, SERIE, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_ARMAS_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_ARMAS_ACTIVO_FIJO_GENERAL(0)
            End If
            rowARMASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowARMASRow)
            Return rowARMASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ARMASDataTable = CType(MyBase.Clone,ARMASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ARMASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnNUM_PERMISO_GOBIERNO = MyBase.Columns("NUM_PERMISO_GOBIERNO")
            Me.columnNUM_PERMISO_COMANDO = MyBase.Columns("NUM_PERMISO_COMANDO")
            Me.columnNUM_TENENCIA_ARMAS = MyBase.Columns("NUM_TENENCIA_ARMAS")
            Me.columnFEC_ACEPTACION_TENENCIA = MyBase.Columns("FEC_ACEPTACION_TENENCIA")
            Me.columnFEC_CADUCIDAD_TENENCIA = MyBase.Columns("FEC_CADUCIDAD_TENENCIA")
            Me.columnNUM_MATRICULA_ARMA = MyBase.Columns("NUM_MATRICULA_ARMA")
            Me.columnFEC_ACEPTACION_MATRICULA = MyBase.Columns("FEC_ACEPTACION_MATRICULA")
            Me.columnFEC_CADUCIDAD_MATRICULA = MyBase.Columns("FEC_CADUCIDAD_MATRICULA")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnNUM_PERMISO_GOBIERNO = New Global.System.Data.DataColumn("NUM_PERMISO_GOBIERNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_PERMISO_GOBIERNO)
            Me.columnNUM_PERMISO_COMANDO = New Global.System.Data.DataColumn("NUM_PERMISO_COMANDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_PERMISO_COMANDO)
            Me.columnNUM_TENENCIA_ARMAS = New Global.System.Data.DataColumn("NUM_TENENCIA_ARMAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_TENENCIA_ARMAS)
            Me.columnFEC_ACEPTACION_TENENCIA = New Global.System.Data.DataColumn("FEC_ACEPTACION_TENENCIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_ACEPTACION_TENENCIA)
            Me.columnFEC_CADUCIDAD_TENENCIA = New Global.System.Data.DataColumn("FEC_CADUCIDAD_TENENCIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_CADUCIDAD_TENENCIA)
            Me.columnNUM_MATRICULA_ARMA = New Global.System.Data.DataColumn("NUM_MATRICULA_ARMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_MATRICULA_ARMA)
            Me.columnFEC_ACEPTACION_MATRICULA = New Global.System.Data.DataColumn("FEC_ACEPTACION_MATRICULA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_ACEPTACION_MATRICULA)
            Me.columnFEC_CADUCIDAD_MATRICULA = New Global.System.Data.DataColumn("FEC_CADUCIDAD_MATRICULA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_CADUCIDAD_MATRICULA)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnNUM_PERMISO_GOBIERNO.AllowDBNull = false
            Me.columnNUM_PERMISO_GOBIERNO.MaxLength = 2147483647
            Me.columnNUM_PERMISO_COMANDO.AllowDBNull = false
            Me.columnNUM_PERMISO_COMANDO.MaxLength = 2147483647
            Me.columnNUM_TENENCIA_ARMAS.AllowDBNull = false
            Me.columnNUM_TENENCIA_ARMAS.MaxLength = 2147483647
            Me.columnFEC_ACEPTACION_TENENCIA.AllowDBNull = false
            Me.columnFEC_CADUCIDAD_TENENCIA.AllowDBNull = false
            Me.columnNUM_MATRICULA_ARMA.AllowDBNull = false
            Me.columnNUM_MATRICULA_ARMA.MaxLength = 2147483647
            Me.columnFEC_ACEPTACION_MATRICULA.AllowDBNull = false
            Me.columnFEC_CADUCIDAD_MATRICULA.AllowDBNull = false
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewARMASRow() As ARMASRow
            Return CType(Me.NewRow,ARMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ARMASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ARMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ARMASRowChangedEvent) Is Nothing) Then
                RaiseEvent ARMASRowChanged(Me, New ARMASRowChangeEvent(CType(e.Row,ARMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ARMASRowChangingEvent) Is Nothing) Then
                RaiseEvent ARMASRowChanging(Me, New ARMASRowChangeEvent(CType(e.Row,ARMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ARMASRowDeletedEvent) Is Nothing) Then
                RaiseEvent ARMASRowDeleted(Me, New ARMASRowChangeEvent(CType(e.Row,ARMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ARMASRowDeletingEvent) Is Nothing) Then
                RaiseEvent ARMASRowDeleting(Me, New ARMASRowChangeEvent(CType(e.Row,ARMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveARMASRow(ByVal row As ARMASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ARMASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CAMARAS_SEGURIDADDataTable
        Inherits Global.System.Data.TypedTableBase(Of CAMARAS_SEGURIDADRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnADICIONALES As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CAMARAS_SEGURIDAD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADICIONALESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONALES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CAMARAS_SEGURIDADRow
            Get
                Return CType(Me.Rows(index),CAMARAS_SEGURIDADRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CAMARAS_SEGURIDADRowChanging As CAMARAS_SEGURIDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CAMARAS_SEGURIDADRowChanged As CAMARAS_SEGURIDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CAMARAS_SEGURIDADRowDeleting As CAMARAS_SEGURIDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CAMARAS_SEGURIDADRowDeleted As CAMARAS_SEGURIDADRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCAMARAS_SEGURIDADRow(ByVal row As CAMARAS_SEGURIDADRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCAMARAS_SEGURIDADRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ADICIONALES As String, ByVal ESTADO As Integer) As CAMARAS_SEGURIDADRow
            Dim rowCAMARAS_SEGURIDADRow As CAMARAS_SEGURIDADRow = CType(Me.NewRow,CAMARAS_SEGURIDADRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO, ADICIONALES, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL(0)
            End If
            rowCAMARAS_SEGURIDADRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCAMARAS_SEGURIDADRow)
            Return rowCAMARAS_SEGURIDADRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CAMARAS_SEGURIDADDataTable = CType(MyBase.Clone,CAMARAS_SEGURIDADDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CAMARAS_SEGURIDADDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnADICIONALES = MyBase.Columns("ADICIONALES")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnADICIONALES = New Global.System.Data.DataColumn("ADICIONALES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONALES)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnADICIONALES.AllowDBNull = false
            Me.columnADICIONALES.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCAMARAS_SEGURIDADRow() As CAMARAS_SEGURIDADRow
            Return CType(Me.NewRow,CAMARAS_SEGURIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CAMARAS_SEGURIDADRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CAMARAS_SEGURIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CAMARAS_SEGURIDADRowChangedEvent) Is Nothing) Then
                RaiseEvent CAMARAS_SEGURIDADRowChanged(Me, New CAMARAS_SEGURIDADRowChangeEvent(CType(e.Row,CAMARAS_SEGURIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CAMARAS_SEGURIDADRowChangingEvent) Is Nothing) Then
                RaiseEvent CAMARAS_SEGURIDADRowChanging(Me, New CAMARAS_SEGURIDADRowChangeEvent(CType(e.Row,CAMARAS_SEGURIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CAMARAS_SEGURIDADRowDeletedEvent) Is Nothing) Then
                RaiseEvent CAMARAS_SEGURIDADRowDeleted(Me, New CAMARAS_SEGURIDADRowChangeEvent(CType(e.Row,CAMARAS_SEGURIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CAMARAS_SEGURIDADRowDeletingEvent) Is Nothing) Then
                RaiseEvent CAMARAS_SEGURIDADRowDeleting(Me, New CAMARAS_SEGURIDADRowChangeEvent(CType(e.Row,CAMARAS_SEGURIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCAMARAS_SEGURIDADRow(ByVal row As CAMARAS_SEGURIDADRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CAMARAS_SEGURIDADDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EQUIPOS_AMBIENTACIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of EQUIPOS_AMBIENTACIONRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnAMPERAJE As Global.System.Data.DataColumn
        
        Private columnVOLTAJE As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EQUIPOS_AMBIENTACION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property AMPERAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMPERAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VOLTAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOLTAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EQUIPOS_AMBIENTACIONRow
            Get
                Return CType(Me.Rows(index),EQUIPOS_AMBIENTACIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_AMBIENTACIONRowChanging As EQUIPOS_AMBIENTACIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_AMBIENTACIONRowChanged As EQUIPOS_AMBIENTACIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_AMBIENTACIONRowDeleting As EQUIPOS_AMBIENTACIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_AMBIENTACIONRowDeleted As EQUIPOS_AMBIENTACIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddEQUIPOS_AMBIENTACIONRow(ByVal row As EQUIPOS_AMBIENTACIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddEQUIPOS_AMBIENTACIONRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal AMPERAJE As Integer, ByVal VOLTAJE As Integer, ByVal TIPO As String, ByVal ANO As Integer, ByVal ESTADO As Integer) As EQUIPOS_AMBIENTACIONRow
            Dim rowEQUIPOS_AMBIENTACIONRow As EQUIPOS_AMBIENTACIONRow = CType(Me.NewRow,EQUIPOS_AMBIENTACIONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, AMPERAJE, VOLTAJE, TIPO, ANO, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL(0)
            End If
            rowEQUIPOS_AMBIENTACIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEQUIPOS_AMBIENTACIONRow)
            Return rowEQUIPOS_AMBIENTACIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EQUIPOS_AMBIENTACIONDataTable = CType(MyBase.Clone,EQUIPOS_AMBIENTACIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EQUIPOS_AMBIENTACIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnAMPERAJE = MyBase.Columns("AMPERAJE")
            Me.columnVOLTAJE = MyBase.Columns("VOLTAJE")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnAMPERAJE = New Global.System.Data.DataColumn("AMPERAJE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMPERAJE)
            Me.columnVOLTAJE = New Global.System.Data.DataColumn("VOLTAJE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOLTAJE)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnAMPERAJE.AllowDBNull = false
            Me.columnVOLTAJE.AllowDBNull = false
            Me.columnTIPO.AllowDBNull = false
            Me.columnTIPO.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewEQUIPOS_AMBIENTACIONRow() As EQUIPOS_AMBIENTACIONRow
            Return CType(Me.NewRow,EQUIPOS_AMBIENTACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EQUIPOS_AMBIENTACIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EQUIPOS_AMBIENTACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EQUIPOS_AMBIENTACIONRowChangedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_AMBIENTACIONRowChanged(Me, New EQUIPOS_AMBIENTACIONRowChangeEvent(CType(e.Row,EQUIPOS_AMBIENTACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EQUIPOS_AMBIENTACIONRowChangingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_AMBIENTACIONRowChanging(Me, New EQUIPOS_AMBIENTACIONRowChangeEvent(CType(e.Row,EQUIPOS_AMBIENTACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EQUIPOS_AMBIENTACIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_AMBIENTACIONRowDeleted(Me, New EQUIPOS_AMBIENTACIONRowChangeEvent(CType(e.Row,EQUIPOS_AMBIENTACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EQUIPOS_AMBIENTACIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_AMBIENTACIONRowDeleting(Me, New EQUIPOS_AMBIENTACIONRowChangeEvent(CType(e.Row,EQUIPOS_AMBIENTACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveEQUIPOS_AMBIENTACIONRow(ByVal row As EQUIPOS_AMBIENTACIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EQUIPOS_AMBIENTACIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EQUIPOS_COCINADataTable
        Inherits Global.System.Data.TypedTableBase(Of EQUIPOS_COCINARow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EQUIPOS_COCINA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EQUIPOS_COCINARow
            Get
                Return CType(Me.Rows(index),EQUIPOS_COCINARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COCINARowChanging As EQUIPOS_COCINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COCINARowChanged As EQUIPOS_COCINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COCINARowDeleting As EQUIPOS_COCINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COCINARowDeleted As EQUIPOS_COCINARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddEQUIPOS_COCINARow(ByVal row As EQUIPOS_COCINARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddEQUIPOS_COCINARow(ByVal parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ESTADO As Integer) As EQUIPOS_COCINARow
            Dim rowEQUIPOS_COCINARow As EQUIPOS_COCINARow = CType(Me.NewRow,EQUIPOS_COCINARow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL(0)
            End If
            rowEQUIPOS_COCINARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEQUIPOS_COCINARow)
            Return rowEQUIPOS_COCINARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EQUIPOS_COCINADataTable = CType(MyBase.Clone,EQUIPOS_COCINADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EQUIPOS_COCINADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewEQUIPOS_COCINARow() As EQUIPOS_COCINARow
            Return CType(Me.NewRow,EQUIPOS_COCINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EQUIPOS_COCINARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EQUIPOS_COCINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EQUIPOS_COCINARowChangedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COCINARowChanged(Me, New EQUIPOS_COCINARowChangeEvent(CType(e.Row,EQUIPOS_COCINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EQUIPOS_COCINARowChangingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COCINARowChanging(Me, New EQUIPOS_COCINARowChangeEvent(CType(e.Row,EQUIPOS_COCINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EQUIPOS_COCINARowDeletedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COCINARowDeleted(Me, New EQUIPOS_COCINARowChangeEvent(CType(e.Row,EQUIPOS_COCINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EQUIPOS_COCINARowDeletingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COCINARowDeleting(Me, New EQUIPOS_COCINARowChangeEvent(CType(e.Row,EQUIPOS_COCINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveEQUIPOS_COCINARow(ByVal row As EQUIPOS_COCINARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EQUIPOS_COCINADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EQUIPOS_COMPUTODataTable
        Inherits Global.System.Data.TypedTableBase(Of EQUIPOS_COMPUTORow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnCOMPONENTE As Global.System.Data.DataColumn
        
        Private columnESTADO_COMPONENTE As Global.System.Data.DataColumn
        
        Private columnCOLOR_COMPONENTE As Global.System.Data.DataColumn
        
        Private columnCODIGO_COMPONENTE As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EQUIPOS_COMPUTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COMPONENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPONENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_COMPONENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_COMPONENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLOR_COMPONENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR_COMPONENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_COMPONENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_COMPONENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EQUIPOS_COMPUTORow
            Get
                Return CType(Me.Rows(index),EQUIPOS_COMPUTORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COMPUTORowChanging As EQUIPOS_COMPUTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COMPUTORowChanged As EQUIPOS_COMPUTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COMPUTORowDeleting As EQUIPOS_COMPUTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COMPUTORowDeleted As EQUIPOS_COMPUTORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddEQUIPOS_COMPUTORow(ByVal row As EQUIPOS_COMPUTORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddEQUIPOS_COMPUTORow(ByVal parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal COMPONENTE As String, ByVal ESTADO_COMPONENTE As String, ByVal COLOR_COMPONENTE As String, ByVal CODIGO_COMPONENTE As String, ByVal ESTADO As Integer) As EQUIPOS_COMPUTORow
            Dim rowEQUIPOS_COMPUTORow As EQUIPOS_COMPUTORow = CType(Me.NewRow,EQUIPOS_COMPUTORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, COMPONENTE, ESTADO_COMPONENTE, COLOR_COMPONENTE, CODIGO_COMPONENTE, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL(0)
            End If
            rowEQUIPOS_COMPUTORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEQUIPOS_COMPUTORow)
            Return rowEQUIPOS_COMPUTORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EQUIPOS_COMPUTODataTable = CType(MyBase.Clone,EQUIPOS_COMPUTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EQUIPOS_COMPUTODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnCOMPONENTE = MyBase.Columns("COMPONENTE")
            Me.columnESTADO_COMPONENTE = MyBase.Columns("ESTADO_COMPONENTE")
            Me.columnCOLOR_COMPONENTE = MyBase.Columns("COLOR_COMPONENTE")
            Me.columnCODIGO_COMPONENTE = MyBase.Columns("CODIGO_COMPONENTE")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnCOMPONENTE = New Global.System.Data.DataColumn("COMPONENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPONENTE)
            Me.columnESTADO_COMPONENTE = New Global.System.Data.DataColumn("ESTADO_COMPONENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_COMPONENTE)
            Me.columnCOLOR_COMPONENTE = New Global.System.Data.DataColumn("COLOR_COMPONENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR_COMPONENTE)
            Me.columnCODIGO_COMPONENTE = New Global.System.Data.DataColumn("CODIGO_COMPONENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_COMPONENTE)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnCOMPONENTE.AllowDBNull = false
            Me.columnCOMPONENTE.MaxLength = 2147483647
            Me.columnESTADO_COMPONENTE.AllowDBNull = false
            Me.columnESTADO_COMPONENTE.MaxLength = 2147483647
            Me.columnCOLOR_COMPONENTE.AllowDBNull = false
            Me.columnCOLOR_COMPONENTE.MaxLength = 2147483647
            Me.columnCODIGO_COMPONENTE.AllowDBNull = false
            Me.columnCODIGO_COMPONENTE.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewEQUIPOS_COMPUTORow() As EQUIPOS_COMPUTORow
            Return CType(Me.NewRow,EQUIPOS_COMPUTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EQUIPOS_COMPUTORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EQUIPOS_COMPUTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EQUIPOS_COMPUTORowChangedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COMPUTORowChanged(Me, New EQUIPOS_COMPUTORowChangeEvent(CType(e.Row,EQUIPOS_COMPUTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EQUIPOS_COMPUTORowChangingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COMPUTORowChanging(Me, New EQUIPOS_COMPUTORowChangeEvent(CType(e.Row,EQUIPOS_COMPUTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EQUIPOS_COMPUTORowDeletedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COMPUTORowDeleted(Me, New EQUIPOS_COMPUTORowChangeEvent(CType(e.Row,EQUIPOS_COMPUTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EQUIPOS_COMPUTORowDeletingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COMPUTORowDeleting(Me, New EQUIPOS_COMPUTORowChangeEvent(CType(e.Row,EQUIPOS_COMPUTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveEQUIPOS_COMPUTORow(ByVal row As EQUIPOS_COMPUTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EQUIPOS_COMPUTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EQUIPOS_COMUNICACION_TELEFONIADataTable
        Inherits Global.System.Data.TypedTableBase(Of EQUIPOS_COMUNICACION_TELEFONIARow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnINICIO_PERMISO_FRECUENCIA As Global.System.Data.DataColumn
        
        Private columnFINAL_PERMISO_FRECUENCIA As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EQUIPOS_COMUNICACION_TELEFONIA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property INICIO_PERMISO_FRECUENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINICIO_PERMISO_FRECUENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FINAL_PERMISO_FRECUENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINAL_PERMISO_FRECUENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EQUIPOS_COMUNICACION_TELEFONIARow
            Get
                Return CType(Me.Rows(index),EQUIPOS_COMUNICACION_TELEFONIARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COMUNICACION_TELEFONIARowChanging As EQUIPOS_COMUNICACION_TELEFONIARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COMUNICACION_TELEFONIARowChanged As EQUIPOS_COMUNICACION_TELEFONIARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COMUNICACION_TELEFONIARowDeleting As EQUIPOS_COMUNICACION_TELEFONIARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_COMUNICACION_TELEFONIARowDeleted As EQUIPOS_COMUNICACION_TELEFONIARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddEQUIPOS_COMUNICACION_TELEFONIARow(ByVal row As EQUIPOS_COMUNICACION_TELEFONIARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddEQUIPOS_COMUNICACION_TELEFONIARow(ByVal parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal INICIO_PERMISO_FRECUENCIA As Date, ByVal FINAL_PERMISO_FRECUENCIA As Date, ByVal ESTADO As Integer) As EQUIPOS_COMUNICACION_TELEFONIARow
            Dim rowEQUIPOS_COMUNICACION_TELEFONIARow As EQUIPOS_COMUNICACION_TELEFONIARow = CType(Me.NewRow,EQUIPOS_COMUNICACION_TELEFONIARow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO, INICIO_PERMISO_FRECUENCIA, FINAL_PERMISO_FRECUENCIA, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL(0)
            End If
            rowEQUIPOS_COMUNICACION_TELEFONIARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEQUIPOS_COMUNICACION_TELEFONIARow)
            Return rowEQUIPOS_COMUNICACION_TELEFONIARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EQUIPOS_COMUNICACION_TELEFONIADataTable = CType(MyBase.Clone,EQUIPOS_COMUNICACION_TELEFONIADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EQUIPOS_COMUNICACION_TELEFONIADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnINICIO_PERMISO_FRECUENCIA = MyBase.Columns("INICIO_PERMISO_FRECUENCIA")
            Me.columnFINAL_PERMISO_FRECUENCIA = MyBase.Columns("FINAL_PERMISO_FRECUENCIA")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnINICIO_PERMISO_FRECUENCIA = New Global.System.Data.DataColumn("INICIO_PERMISO_FRECUENCIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINICIO_PERMISO_FRECUENCIA)
            Me.columnFINAL_PERMISO_FRECUENCIA = New Global.System.Data.DataColumn("FINAL_PERMISO_FRECUENCIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINAL_PERMISO_FRECUENCIA)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnINICIO_PERMISO_FRECUENCIA.AllowDBNull = false
            Me.columnFINAL_PERMISO_FRECUENCIA.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewEQUIPOS_COMUNICACION_TELEFONIARow() As EQUIPOS_COMUNICACION_TELEFONIARow
            Return CType(Me.NewRow,EQUIPOS_COMUNICACION_TELEFONIARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EQUIPOS_COMUNICACION_TELEFONIARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EQUIPOS_COMUNICACION_TELEFONIARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EQUIPOS_COMUNICACION_TELEFONIARowChangedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COMUNICACION_TELEFONIARowChanged(Me, New EQUIPOS_COMUNICACION_TELEFONIARowChangeEvent(CType(e.Row,EQUIPOS_COMUNICACION_TELEFONIARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EQUIPOS_COMUNICACION_TELEFONIARowChangingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COMUNICACION_TELEFONIARowChanging(Me, New EQUIPOS_COMUNICACION_TELEFONIARowChangeEvent(CType(e.Row,EQUIPOS_COMUNICACION_TELEFONIARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EQUIPOS_COMUNICACION_TELEFONIARowDeletedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COMUNICACION_TELEFONIARowDeleted(Me, New EQUIPOS_COMUNICACION_TELEFONIARowChangeEvent(CType(e.Row,EQUIPOS_COMUNICACION_TELEFONIARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EQUIPOS_COMUNICACION_TELEFONIARowDeletingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_COMUNICACION_TELEFONIARowDeleting(Me, New EQUIPOS_COMUNICACION_TELEFONIARowChangeEvent(CType(e.Row,EQUIPOS_COMUNICACION_TELEFONIARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveEQUIPOS_COMUNICACION_TELEFONIARow(ByVal row As EQUIPOS_COMUNICACION_TELEFONIARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EQUIPOS_COMUNICACION_TELEFONIADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EQUIPOS_OFICINADataTable
        Inherits Global.System.Data.TypedTableBase(Of EQUIPOS_OFICINARow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EQUIPOS_OFICINA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EQUIPOS_OFICINARow
            Get
                Return CType(Me.Rows(index),EQUIPOS_OFICINARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_OFICINARowChanging As EQUIPOS_OFICINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_OFICINARowChanged As EQUIPOS_OFICINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_OFICINARowDeleting As EQUIPOS_OFICINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_OFICINARowDeleted As EQUIPOS_OFICINARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddEQUIPOS_OFICINARow(ByVal row As EQUIPOS_OFICINARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddEQUIPOS_OFICINARow(ByVal parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ESTADO As Integer) As EQUIPOS_OFICINARow
            Dim rowEQUIPOS_OFICINARow As EQUIPOS_OFICINARow = CType(Me.NewRow,EQUIPOS_OFICINARow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL(0)
            End If
            rowEQUIPOS_OFICINARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEQUIPOS_OFICINARow)
            Return rowEQUIPOS_OFICINARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EQUIPOS_OFICINADataTable = CType(MyBase.Clone,EQUIPOS_OFICINADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EQUIPOS_OFICINADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewEQUIPOS_OFICINARow() As EQUIPOS_OFICINARow
            Return CType(Me.NewRow,EQUIPOS_OFICINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EQUIPOS_OFICINARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EQUIPOS_OFICINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EQUIPOS_OFICINARowChangedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_OFICINARowChanged(Me, New EQUIPOS_OFICINARowChangeEvent(CType(e.Row,EQUIPOS_OFICINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EQUIPOS_OFICINARowChangingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_OFICINARowChanging(Me, New EQUIPOS_OFICINARowChangeEvent(CType(e.Row,EQUIPOS_OFICINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EQUIPOS_OFICINARowDeletedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_OFICINARowDeleted(Me, New EQUIPOS_OFICINARowChangeEvent(CType(e.Row,EQUIPOS_OFICINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EQUIPOS_OFICINARowDeletingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_OFICINARowDeleting(Me, New EQUIPOS_OFICINARowChangeEvent(CType(e.Row,EQUIPOS_OFICINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveEQUIPOS_OFICINARow(ByVal row As EQUIPOS_OFICINARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EQUIPOS_OFICINADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EQUIPOS_SEGURIDAD_INDUSTRIALDataTable
        Inherits Global.System.Data.TypedTableBase(Of EQUIPOS_SEGURIDAD_INDUSTRIALRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnADICIONAL As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EQUIPOS_SEGURIDAD_INDUSTRIAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADICIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EQUIPOS_SEGURIDAD_INDUSTRIALRow
            Get
                Return CType(Me.Rows(index),EQUIPOS_SEGURIDAD_INDUSTRIALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_SEGURIDAD_INDUSTRIALRowChanging As EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_SEGURIDAD_INDUSTRIALRowChanged As EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_SEGURIDAD_INDUSTRIALRowDeleting As EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EQUIPOS_SEGURIDAD_INDUSTRIALRowDeleted As EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddEQUIPOS_SEGURIDAD_INDUSTRIALRow(ByVal row As EQUIPOS_SEGURIDAD_INDUSTRIALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddEQUIPOS_SEGURIDAD_INDUSTRIALRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ADICIONAL As String, ByVal ESTADO As Integer) As EQUIPOS_SEGURIDAD_INDUSTRIALRow
            Dim rowEQUIPOS_SEGURIDAD_INDUSTRIALRow As EQUIPOS_SEGURIDAD_INDUSTRIALRow = CType(Me.NewRow,EQUIPOS_SEGURIDAD_INDUSTRIALRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO, ADICIONAL, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL(0)
            End If
            rowEQUIPOS_SEGURIDAD_INDUSTRIALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEQUIPOS_SEGURIDAD_INDUSTRIALRow)
            Return rowEQUIPOS_SEGURIDAD_INDUSTRIALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EQUIPOS_SEGURIDAD_INDUSTRIALDataTable = CType(MyBase.Clone,EQUIPOS_SEGURIDAD_INDUSTRIALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EQUIPOS_SEGURIDAD_INDUSTRIALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnADICIONAL = MyBase.Columns("ADICIONAL")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnADICIONAL = New Global.System.Data.DataColumn("ADICIONAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONAL)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnADICIONAL.AllowDBNull = false
            Me.columnADICIONAL.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewEQUIPOS_SEGURIDAD_INDUSTRIALRow() As EQUIPOS_SEGURIDAD_INDUSTRIALRow
            Return CType(Me.NewRow,EQUIPOS_SEGURIDAD_INDUSTRIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EQUIPOS_SEGURIDAD_INDUSTRIALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EQUIPOS_SEGURIDAD_INDUSTRIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EQUIPOS_SEGURIDAD_INDUSTRIALRowChangedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_SEGURIDAD_INDUSTRIALRowChanged(Me, New EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEvent(CType(e.Row,EQUIPOS_SEGURIDAD_INDUSTRIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EQUIPOS_SEGURIDAD_INDUSTRIALRowChangingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_SEGURIDAD_INDUSTRIALRowChanging(Me, New EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEvent(CType(e.Row,EQUIPOS_SEGURIDAD_INDUSTRIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EQUIPOS_SEGURIDAD_INDUSTRIALRowDeletedEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_SEGURIDAD_INDUSTRIALRowDeleted(Me, New EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEvent(CType(e.Row,EQUIPOS_SEGURIDAD_INDUSTRIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EQUIPOS_SEGURIDAD_INDUSTRIALRowDeletingEvent) Is Nothing) Then
                RaiseEvent EQUIPOS_SEGURIDAD_INDUSTRIALRowDeleting(Me, New EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEvent(CType(e.Row,EQUIPOS_SEGURIDAD_INDUSTRIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveEQUIPOS_SEGURIDAD_INDUSTRIALRow(ByVal row As EQUIPOS_SEGURIDAD_INDUSTRIALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EQUIPOS_SEGURIDAD_INDUSTRIALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GENERADORESDataTable
        Inherits Global.System.Data.TypedTableBase(Of GENERADORESRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnAMPERAJE As Global.System.Data.DataColumn
        
        Private columnVOLTAJE As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnADICIONALES As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GENERADORES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property AMPERAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMPERAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VOLTAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOLTAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADICIONALESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONALES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GENERADORESRow
            Get
                Return CType(Me.Rows(index),GENERADORESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GENERADORESRowChanging As GENERADORESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GENERADORESRowChanged As GENERADORESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GENERADORESRowDeleting As GENERADORESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GENERADORESRowDeleted As GENERADORESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddGENERADORESRow(ByVal row As GENERADORESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddGENERADORESRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_GENERADORES_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal AMPERAJE As Integer, ByVal VOLTAJE As Integer, ByVal TIPO As String, ByVal ANO As Integer, ByVal ADICIONALES As String, ByVal ESTADO As Integer) As GENERADORESRow
            Dim rowGENERADORESRow As GENERADORESRow = CType(Me.NewRow,GENERADORESRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, AMPERAJE, VOLTAJE, TIPO, ANO, ADICIONALES, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_GENERADORES_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_GENERADORES_ACTIVO_FIJO_GENERAL(0)
            End If
            rowGENERADORESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGENERADORESRow)
            Return rowGENERADORESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GENERADORESDataTable = CType(MyBase.Clone,GENERADORESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GENERADORESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnAMPERAJE = MyBase.Columns("AMPERAJE")
            Me.columnVOLTAJE = MyBase.Columns("VOLTAJE")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnADICIONALES = MyBase.Columns("ADICIONALES")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnAMPERAJE = New Global.System.Data.DataColumn("AMPERAJE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMPERAJE)
            Me.columnVOLTAJE = New Global.System.Data.DataColumn("VOLTAJE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOLTAJE)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnADICIONALES = New Global.System.Data.DataColumn("ADICIONALES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONALES)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnAMPERAJE.AllowDBNull = false
            Me.columnVOLTAJE.AllowDBNull = false
            Me.columnTIPO.AllowDBNull = false
            Me.columnTIPO.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnADICIONALES.AllowDBNull = false
            Me.columnADICIONALES.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewGENERADORESRow() As GENERADORESRow
            Return CType(Me.NewRow,GENERADORESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GENERADORESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GENERADORESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GENERADORESRowChangedEvent) Is Nothing) Then
                RaiseEvent GENERADORESRowChanged(Me, New GENERADORESRowChangeEvent(CType(e.Row,GENERADORESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GENERADORESRowChangingEvent) Is Nothing) Then
                RaiseEvent GENERADORESRowChanging(Me, New GENERADORESRowChangeEvent(CType(e.Row,GENERADORESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GENERADORESRowDeletedEvent) Is Nothing) Then
                RaiseEvent GENERADORESRowDeleted(Me, New GENERADORESRowChangeEvent(CType(e.Row,GENERADORESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GENERADORESRowDeletingEvent) Is Nothing) Then
                RaiseEvent GENERADORESRowDeleting(Me, New GENERADORESRowChangeEvent(CType(e.Row,GENERADORESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveGENERADORESRow(ByVal row As GENERADORESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GENERADORESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LIBRO_COLECCIONESDataTable
        Inherits Global.System.Data.TypedTableBase(Of LIBRO_COLECCIONESRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnEDITORIAL As Global.System.Data.DataColumn
        
        Private columnAUTOR As Global.System.Data.DataColumn
        
        Private columnTOMOS As Global.System.Data.DataColumn
        
        Private columnANOS_EDICION As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LIBRO_COLECCIONES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property EDITORIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDITORIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property AUTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TOMOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOMOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOS_EDICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANOS_EDICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LIBRO_COLECCIONESRow
            Get
                Return CType(Me.Rows(index),LIBRO_COLECCIONESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LIBRO_COLECCIONESRowChanging As LIBRO_COLECCIONESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LIBRO_COLECCIONESRowChanged As LIBRO_COLECCIONESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LIBRO_COLECCIONESRowDeleting As LIBRO_COLECCIONESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LIBRO_COLECCIONESRowDeleted As LIBRO_COLECCIONESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddLIBRO_COLECCIONESRow(ByVal row As LIBRO_COLECCIONESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddLIBRO_COLECCIONESRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal EDITORIAL As String, ByVal AUTOR As String, ByVal TOMOS As Integer, ByVal ANOS_EDICION As Integer, ByVal ESTADO As Integer) As LIBRO_COLECCIONESRow
            Dim rowLIBRO_COLECCIONESRow As LIBRO_COLECCIONESRow = CType(Me.NewRow,LIBRO_COLECCIONESRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, EDITORIAL, AUTOR, TOMOS, ANOS_EDICION, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL(0)
            End If
            rowLIBRO_COLECCIONESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLIBRO_COLECCIONESRow)
            Return rowLIBRO_COLECCIONESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LIBRO_COLECCIONESDataTable = CType(MyBase.Clone,LIBRO_COLECCIONESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LIBRO_COLECCIONESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnEDITORIAL = MyBase.Columns("EDITORIAL")
            Me.columnAUTOR = MyBase.Columns("AUTOR")
            Me.columnTOMOS = MyBase.Columns("TOMOS")
            Me.columnANOS_EDICION = MyBase.Columns("ANOS_EDICION")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnEDITORIAL = New Global.System.Data.DataColumn("EDITORIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDITORIAL)
            Me.columnAUTOR = New Global.System.Data.DataColumn("AUTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUTOR)
            Me.columnTOMOS = New Global.System.Data.DataColumn("TOMOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOMOS)
            Me.columnANOS_EDICION = New Global.System.Data.DataColumn("ANOS_EDICION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANOS_EDICION)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnEDITORIAL.AllowDBNull = false
            Me.columnEDITORIAL.MaxLength = 2147483647
            Me.columnAUTOR.AllowDBNull = false
            Me.columnAUTOR.MaxLength = 2147483647
            Me.columnTOMOS.AllowDBNull = false
            Me.columnANOS_EDICION.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewLIBRO_COLECCIONESRow() As LIBRO_COLECCIONESRow
            Return CType(Me.NewRow,LIBRO_COLECCIONESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LIBRO_COLECCIONESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LIBRO_COLECCIONESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LIBRO_COLECCIONESRowChangedEvent) Is Nothing) Then
                RaiseEvent LIBRO_COLECCIONESRowChanged(Me, New LIBRO_COLECCIONESRowChangeEvent(CType(e.Row,LIBRO_COLECCIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LIBRO_COLECCIONESRowChangingEvent) Is Nothing) Then
                RaiseEvent LIBRO_COLECCIONESRowChanging(Me, New LIBRO_COLECCIONESRowChangeEvent(CType(e.Row,LIBRO_COLECCIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LIBRO_COLECCIONESRowDeletedEvent) Is Nothing) Then
                RaiseEvent LIBRO_COLECCIONESRowDeleted(Me, New LIBRO_COLECCIONESRowChangeEvent(CType(e.Row,LIBRO_COLECCIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LIBRO_COLECCIONESRowDeletingEvent) Is Nothing) Then
                RaiseEvent LIBRO_COLECCIONESRowDeleting(Me, New LIBRO_COLECCIONESRowChangeEvent(CType(e.Row,LIBRO_COLECCIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveLIBRO_COLECCIONESRow(ByVal row As LIBRO_COLECCIONESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LIBRO_COLECCIONESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MUEBLES_OFICINADataTable
        Inherits Global.System.Data.TypedTableBase(Of MUEBLES_OFICINARow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MUEBLES_OFICINA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MUEBLES_OFICINARow
            Get
                Return CType(Me.Rows(index),MUEBLES_OFICINARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MUEBLES_OFICINARowChanging As MUEBLES_OFICINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MUEBLES_OFICINARowChanged As MUEBLES_OFICINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MUEBLES_OFICINARowDeleting As MUEBLES_OFICINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MUEBLES_OFICINARowDeleted As MUEBLES_OFICINARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddMUEBLES_OFICINARow(ByVal row As MUEBLES_OFICINARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddMUEBLES_OFICINARow(ByVal parentACTIVO_FIJO_GENERALRowByFK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ESTADO As Integer) As MUEBLES_OFICINARow
            Dim rowMUEBLES_OFICINARow As MUEBLES_OFICINARow = CType(Me.NewRow,MUEBLES_OFICINARow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, MATERIAL, ANO, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL(0)
            End If
            rowMUEBLES_OFICINARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMUEBLES_OFICINARow)
            Return rowMUEBLES_OFICINARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MUEBLES_OFICINADataTable = CType(MyBase.Clone,MUEBLES_OFICINADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MUEBLES_OFICINADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewMUEBLES_OFICINARow() As MUEBLES_OFICINARow
            Return CType(Me.NewRow,MUEBLES_OFICINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MUEBLES_OFICINARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MUEBLES_OFICINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MUEBLES_OFICINARowChangedEvent) Is Nothing) Then
                RaiseEvent MUEBLES_OFICINARowChanged(Me, New MUEBLES_OFICINARowChangeEvent(CType(e.Row,MUEBLES_OFICINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MUEBLES_OFICINARowChangingEvent) Is Nothing) Then
                RaiseEvent MUEBLES_OFICINARowChanging(Me, New MUEBLES_OFICINARowChangeEvent(CType(e.Row,MUEBLES_OFICINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MUEBLES_OFICINARowDeletedEvent) Is Nothing) Then
                RaiseEvent MUEBLES_OFICINARowDeleted(Me, New MUEBLES_OFICINARowChangeEvent(CType(e.Row,MUEBLES_OFICINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MUEBLES_OFICINARowDeletingEvent) Is Nothing) Then
                RaiseEvent MUEBLES_OFICINARowDeleting(Me, New MUEBLES_OFICINARowChangeEvent(CType(e.Row,MUEBLES_OFICINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveMUEBLES_OFICINARow(ByVal row As MUEBLES_OFICINARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MUEBLES_OFICINADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SOFTWAREDataTable
        Inherits Global.System.Data.TypedTableBase(Of SOFTWARERow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnDETALLE As Global.System.Data.DataColumn
        
        Private columnVERSION As Global.System.Data.DataColumn
        
        Private columnPROVEDOR As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SOFTWARE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VERSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVERSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PROVEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SOFTWARERow
            Get
                Return CType(Me.Rows(index),SOFTWARERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SOFTWARERowChanging As SOFTWARERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SOFTWARERowChanged As SOFTWARERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SOFTWARERowDeleting As SOFTWARERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SOFTWARERowDeleted As SOFTWARERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddSOFTWARERow(ByVal row As SOFTWARERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddSOFTWARERow(ByVal parentACTIVO_FIJO_GENERALRowByFK_SOFTWARE_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal DETALLE As String, ByVal VERSION As String, ByVal PROVEDOR As String, ByVal TIPO As String, ByVal ESTADO As Integer) As SOFTWARERow
            Dim rowSOFTWARERow As SOFTWARERow = CType(Me.NewRow,SOFTWARERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DETALLE, VERSION, PROVEDOR, TIPO, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_SOFTWARE_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_SOFTWARE_ACTIVO_FIJO_GENERAL(0)
            End If
            rowSOFTWARERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSOFTWARERow)
            Return rowSOFTWARERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SOFTWAREDataTable = CType(MyBase.Clone,SOFTWAREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SOFTWAREDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnDETALLE = MyBase.Columns("DETALLE")
            Me.columnVERSION = MyBase.Columns("VERSION")
            Me.columnPROVEDOR = MyBase.Columns("PROVEDOR")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnDETALLE = New Global.System.Data.DataColumn("DETALLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETALLE)
            Me.columnVERSION = New Global.System.Data.DataColumn("VERSION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVERSION)
            Me.columnPROVEDOR = New Global.System.Data.DataColumn("PROVEDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVEDOR)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnDETALLE.AllowDBNull = false
            Me.columnDETALLE.MaxLength = 2147483647
            Me.columnVERSION.AllowDBNull = false
            Me.columnVERSION.MaxLength = 2147483647
            Me.columnPROVEDOR.AllowDBNull = false
            Me.columnPROVEDOR.MaxLength = 2147483647
            Me.columnTIPO.AllowDBNull = false
            Me.columnTIPO.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewSOFTWARERow() As SOFTWARERow
            Return CType(Me.NewRow,SOFTWARERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SOFTWARERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SOFTWARERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SOFTWARERowChangedEvent) Is Nothing) Then
                RaiseEvent SOFTWARERowChanged(Me, New SOFTWARERowChangeEvent(CType(e.Row,SOFTWARERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SOFTWARERowChangingEvent) Is Nothing) Then
                RaiseEvent SOFTWARERowChanging(Me, New SOFTWARERowChangeEvent(CType(e.Row,SOFTWARERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SOFTWARERowDeletedEvent) Is Nothing) Then
                RaiseEvent SOFTWARERowDeleted(Me, New SOFTWARERowChangeEvent(CType(e.Row,SOFTWARERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SOFTWARERowDeletingEvent) Is Nothing) Then
                RaiseEvent SOFTWARERowDeleting(Me, New SOFTWARERowChangeEvent(CType(e.Row,SOFTWARERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveSOFTWARERow(ByVal row As SOFTWARERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SOFTWAREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VEHICULOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of VEHICULOSRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnCHASIS As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnPLACAS As Global.System.Data.DataColumn
        
        Private columnMOTOR As Global.System.Data.DataColumn
        
        Private columnCILINDRAJE As Global.System.Data.DataColumn
        
        Private columnCAPACIDAD As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnANO_FABRICACION As Global.System.Data.DataColumn
        
        Private columnASEGURADORA As Global.System.Data.DataColumn
        
        Private columnSEGURO As Global.System.Data.DataColumn
        
        Private columnBROKER As Global.System.Data.DataColumn
        
        Private columnNRO_POLIZA As Global.System.Data.DataColumn
        
        Private columnCOSTO_PRIMA As Global.System.Data.DataColumn
        
        Private columnDISPOSITIVO_SEGURIDAD As Global.System.Data.DataColumn
        
        Private columnFECHA_INICIO_CONTRATO As Global.System.Data.DataColumn
        
        Private columnFECHA_FINAL_CONTRATO As Global.System.Data.DataColumn
        
        Private columnFECHA_RENOVACION_CONTRATO As Global.System.Data.DataColumn
        
        Private columnFECHA_INICIO_DIS_SEG As Global.System.Data.DataColumn
        
        Private columnFECHA_FINAL_DIS_SEG As Global.System.Data.DataColumn
        
        Private columnFECHA_RENOVACION_DIS_SEG As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnSOAT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VEHICULOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CHASISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHASIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PLACASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLACAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MOTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CILINDRAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCILINDRAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CAPACIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAPACIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANO_FABRICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO_FABRICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ASEGURADORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASEGURADORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SEGUROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEGURO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property BROKERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBROKER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NRO_POLIZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_POLIZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COSTO_PRIMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTO_PRIMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DISPOSITIVO_SEGURIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISPOSITIVO_SEGURIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_INICIO_CONTRATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_INICIO_CONTRATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_FINAL_CONTRATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_FINAL_CONTRATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_RENOVACION_CONTRATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_RENOVACION_CONTRATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_INICIO_DIS_SEGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_INICIO_DIS_SEG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_FINAL_DIS_SEGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_FINAL_DIS_SEG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_RENOVACION_DIS_SEGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_RENOVACION_DIS_SEG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SOATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VEHICULOSRow
            Get
                Return CType(Me.Rows(index),VEHICULOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event VEHICULOSRowChanging As VEHICULOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event VEHICULOSRowChanged As VEHICULOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event VEHICULOSRowDeleting As VEHICULOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event VEHICULOSRowDeleted As VEHICULOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddVEHICULOSRow(ByVal row As VEHICULOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddVEHICULOSRow( _
                    ByVal parentACTIVO_FIJO_GENERALRowByFK_VEHICULOS_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow,  _
                    ByVal MARCA As String,  _
                    ByVal MODELO As String,  _
                    ByVal SERIE As String,  _
                    ByVal CHASIS As String,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal PLACAS As String,  _
                    ByVal MOTOR As String,  _
                    ByVal CILINDRAJE As String,  _
                    ByVal CAPACIDAD As String,  _
                    ByVal TIPO As String,  _
                    ByVal COLOR As String,  _
                    ByVal ANO_FABRICACION As Integer,  _
                    ByVal ASEGURADORA As String,  _
                    ByVal SEGURO As String,  _
                    ByVal BROKER As String,  _
                    ByVal NRO_POLIZA As String,  _
                    ByVal COSTO_PRIMA As Decimal,  _
                    ByVal DISPOSITIVO_SEGURIDAD As String,  _
                    ByVal FECHA_INICIO_CONTRATO As Date,  _
                    ByVal FECHA_FINAL_CONTRATO As Date,  _
                    ByVal FECHA_RENOVACION_CONTRATO As Date,  _
                    ByVal FECHA_INICIO_DIS_SEG As Date,  _
                    ByVal FECHA_FINAL_DIS_SEG As Date,  _
                    ByVal FECHA_RENOVACION_DIS_SEG As Date,  _
                    ByVal ESTADO As Integer,  _
                    ByVal SOAT As Date) As VEHICULOSRow
            Dim rowVEHICULOSRow As VEHICULOSRow = CType(Me.NewRow,VEHICULOSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, SERIE, CHASIS, ESTADO_ACTIVO, PLACAS, MOTOR, CILINDRAJE, CAPACIDAD, TIPO, COLOR, ANO_FABRICACION, ASEGURADORA, SEGURO, BROKER, NRO_POLIZA, COSTO_PRIMA, DISPOSITIVO_SEGURIDAD, FECHA_INICIO_CONTRATO, FECHA_FINAL_CONTRATO, FECHA_RENOVACION_CONTRATO, FECHA_INICIO_DIS_SEG, FECHA_FINAL_DIS_SEG, FECHA_RENOVACION_DIS_SEG, ESTADO, SOAT}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_VEHICULOS_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_VEHICULOS_ACTIVO_FIJO_GENERAL(0)
            End If
            rowVEHICULOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVEHICULOSRow)
            Return rowVEHICULOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VEHICULOSDataTable = CType(MyBase.Clone,VEHICULOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VEHICULOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnCHASIS = MyBase.Columns("CHASIS")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnPLACAS = MyBase.Columns("PLACAS")
            Me.columnMOTOR = MyBase.Columns("MOTOR")
            Me.columnCILINDRAJE = MyBase.Columns("CILINDRAJE")
            Me.columnCAPACIDAD = MyBase.Columns("CAPACIDAD")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnANO_FABRICACION = MyBase.Columns("ANO_FABRICACION")
            Me.columnASEGURADORA = MyBase.Columns("ASEGURADORA")
            Me.columnSEGURO = MyBase.Columns("SEGURO")
            Me.columnBROKER = MyBase.Columns("BROKER")
            Me.columnNRO_POLIZA = MyBase.Columns("NRO_POLIZA")
            Me.columnCOSTO_PRIMA = MyBase.Columns("COSTO_PRIMA")
            Me.columnDISPOSITIVO_SEGURIDAD = MyBase.Columns("DISPOSITIVO_SEGURIDAD")
            Me.columnFECHA_INICIO_CONTRATO = MyBase.Columns("FECHA_INICIO_CONTRATO")
            Me.columnFECHA_FINAL_CONTRATO = MyBase.Columns("FECHA_FINAL_CONTRATO")
            Me.columnFECHA_RENOVACION_CONTRATO = MyBase.Columns("FECHA_RENOVACION_CONTRATO")
            Me.columnFECHA_INICIO_DIS_SEG = MyBase.Columns("FECHA_INICIO_DIS_SEG")
            Me.columnFECHA_FINAL_DIS_SEG = MyBase.Columns("FECHA_FINAL_DIS_SEG")
            Me.columnFECHA_RENOVACION_DIS_SEG = MyBase.Columns("FECHA_RENOVACION_DIS_SEG")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnSOAT = MyBase.Columns("SOAT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnCHASIS = New Global.System.Data.DataColumn("CHASIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHASIS)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnPLACAS = New Global.System.Data.DataColumn("PLACAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLACAS)
            Me.columnMOTOR = New Global.System.Data.DataColumn("MOTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOTOR)
            Me.columnCILINDRAJE = New Global.System.Data.DataColumn("CILINDRAJE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCILINDRAJE)
            Me.columnCAPACIDAD = New Global.System.Data.DataColumn("CAPACIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAPACIDAD)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnANO_FABRICACION = New Global.System.Data.DataColumn("ANO_FABRICACION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO_FABRICACION)
            Me.columnASEGURADORA = New Global.System.Data.DataColumn("ASEGURADORA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASEGURADORA)
            Me.columnSEGURO = New Global.System.Data.DataColumn("SEGURO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEGURO)
            Me.columnBROKER = New Global.System.Data.DataColumn("BROKER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBROKER)
            Me.columnNRO_POLIZA = New Global.System.Data.DataColumn("NRO_POLIZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_POLIZA)
            Me.columnCOSTO_PRIMA = New Global.System.Data.DataColumn("COSTO_PRIMA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTO_PRIMA)
            Me.columnDISPOSITIVO_SEGURIDAD = New Global.System.Data.DataColumn("DISPOSITIVO_SEGURIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISPOSITIVO_SEGURIDAD)
            Me.columnFECHA_INICIO_CONTRATO = New Global.System.Data.DataColumn("FECHA_INICIO_CONTRATO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INICIO_CONTRATO)
            Me.columnFECHA_FINAL_CONTRATO = New Global.System.Data.DataColumn("FECHA_FINAL_CONTRATO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_FINAL_CONTRATO)
            Me.columnFECHA_RENOVACION_CONTRATO = New Global.System.Data.DataColumn("FECHA_RENOVACION_CONTRATO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_RENOVACION_CONTRATO)
            Me.columnFECHA_INICIO_DIS_SEG = New Global.System.Data.DataColumn("FECHA_INICIO_DIS_SEG", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INICIO_DIS_SEG)
            Me.columnFECHA_FINAL_DIS_SEG = New Global.System.Data.DataColumn("FECHA_FINAL_DIS_SEG", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_FINAL_DIS_SEG)
            Me.columnFECHA_RENOVACION_DIS_SEG = New Global.System.Data.DataColumn("FECHA_RENOVACION_DIS_SEG", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_RENOVACION_DIS_SEG)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnSOAT = New Global.System.Data.DataColumn("SOAT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOAT)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnCHASIS.AllowDBNull = false
            Me.columnCHASIS.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnPLACAS.AllowDBNull = false
            Me.columnPLACAS.MaxLength = 2147483647
            Me.columnMOTOR.AllowDBNull = false
            Me.columnMOTOR.MaxLength = 2147483647
            Me.columnCILINDRAJE.AllowDBNull = false
            Me.columnCILINDRAJE.MaxLength = 2147483647
            Me.columnCAPACIDAD.AllowDBNull = false
            Me.columnCAPACIDAD.MaxLength = 2147483647
            Me.columnTIPO.AllowDBNull = false
            Me.columnTIPO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnANO_FABRICACION.AllowDBNull = false
            Me.columnASEGURADORA.AllowDBNull = false
            Me.columnASEGURADORA.MaxLength = 2147483647
            Me.columnSEGURO.AllowDBNull = false
            Me.columnSEGURO.MaxLength = 2147483647
            Me.columnBROKER.AllowDBNull = false
            Me.columnBROKER.MaxLength = 2147483647
            Me.columnNRO_POLIZA.AllowDBNull = false
            Me.columnNRO_POLIZA.MaxLength = 2147483647
            Me.columnCOSTO_PRIMA.AllowDBNull = false
            Me.columnDISPOSITIVO_SEGURIDAD.AllowDBNull = false
            Me.columnDISPOSITIVO_SEGURIDAD.MaxLength = 2147483647
            Me.columnFECHA_INICIO_CONTRATO.AllowDBNull = false
            Me.columnFECHA_FINAL_CONTRATO.AllowDBNull = false
            Me.columnFECHA_RENOVACION_CONTRATO.AllowDBNull = false
            Me.columnFECHA_INICIO_DIS_SEG.AllowDBNull = false
            Me.columnFECHA_FINAL_DIS_SEG.AllowDBNull = false
            Me.columnFECHA_RENOVACION_DIS_SEG.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
            Me.columnSOAT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewVEHICULOSRow() As VEHICULOSRow
            Return CType(Me.NewRow,VEHICULOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VEHICULOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VEHICULOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VEHICULOSRowChangedEvent) Is Nothing) Then
                RaiseEvent VEHICULOSRowChanged(Me, New VEHICULOSRowChangeEvent(CType(e.Row,VEHICULOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VEHICULOSRowChangingEvent) Is Nothing) Then
                RaiseEvent VEHICULOSRowChanging(Me, New VEHICULOSRowChangeEvent(CType(e.Row,VEHICULOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VEHICULOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VEHICULOSRowDeleted(Me, New VEHICULOSRowChangeEvent(CType(e.Row,VEHICULOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VEHICULOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VEHICULOSRowDeleting(Me, New VEHICULOSRowChangeEvent(CType(e.Row,VEHICULOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveVEHICULOSRow(ByVal row As VEHICULOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VEHICULOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TERRENOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of TERRENOSRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMEDIDA As Global.System.Data.DataColumn
        
        Private columnUBICACION As Global.System.Data.DataColumn
        
        Private columnESTADO_TERRENO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TERRENOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MEDIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property UBICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUBICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_TERRENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_TERRENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TERRENOSRow
            Get
                Return CType(Me.Rows(index),TERRENOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event TERRENOSRowChanging As TERRENOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event TERRENOSRowChanged As TERRENOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event TERRENOSRowDeleting As TERRENOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event TERRENOSRowDeleted As TERRENOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddTERRENOSRow(ByVal row As TERRENOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddTERRENOSRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_TERRENOS_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MEDIDA As Integer, ByVal UBICACION As String, ByVal ESTADO_TERRENO As String, ByVal ESTADO As Integer) As TERRENOSRow
            Dim rowTERRENOSRow As TERRENOSRow = CType(Me.NewRow,TERRENOSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MEDIDA, UBICACION, ESTADO_TERRENO, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_TERRENOS_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_TERRENOS_ACTIVO_FIJO_GENERAL(0)
            End If
            rowTERRENOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTERRENOSRow)
            Return rowTERRENOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TERRENOSDataTable = CType(MyBase.Clone,TERRENOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TERRENOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMEDIDA = MyBase.Columns("MEDIDA")
            Me.columnUBICACION = MyBase.Columns("UBICACION")
            Me.columnESTADO_TERRENO = MyBase.Columns("ESTADO_TERRENO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMEDIDA = New Global.System.Data.DataColumn("MEDIDA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDIDA)
            Me.columnUBICACION = New Global.System.Data.DataColumn("UBICACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUBICACION)
            Me.columnESTADO_TERRENO = New Global.System.Data.DataColumn("ESTADO_TERRENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_TERRENO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMEDIDA.AllowDBNull = false
            Me.columnUBICACION.AllowDBNull = false
            Me.columnUBICACION.MaxLength = 2147483647
            Me.columnESTADO_TERRENO.AllowDBNull = false
            Me.columnESTADO_TERRENO.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewTERRENOSRow() As TERRENOSRow
            Return CType(Me.NewRow,TERRENOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TERRENOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TERRENOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TERRENOSRowChangedEvent) Is Nothing) Then
                RaiseEvent TERRENOSRowChanged(Me, New TERRENOSRowChangeEvent(CType(e.Row,TERRENOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TERRENOSRowChangingEvent) Is Nothing) Then
                RaiseEvent TERRENOSRowChanging(Me, New TERRENOSRowChangeEvent(CType(e.Row,TERRENOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TERRENOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TERRENOSRowDeleted(Me, New TERRENOSRowChangeEvent(CType(e.Row,TERRENOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TERRENOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TERRENOSRowDeleting(Me, New TERRENOSRowChangeEvent(CType(e.Row,TERRENOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveTERRENOSRow(ByVal row As TERRENOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TERRENOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PERSONALDataTable
        Inherits Global.System.Data.TypedTableBase(Of PERSONALRow)
        
        Private columnID_PERSONAL As Global.System.Data.DataColumn
        
        Private columnCEDULA As Global.System.Data.DataColumn
        
        Private columnNOMBRES As Global.System.Data.DataColumn
        
        Private columnAPELLIDOS As Global.System.Data.DataColumn
        
        Private columnPROVINCIA As Global.System.Data.DataColumn
        
        Private columnDIRECCION As Global.System.Data.DataColumn
        
        Private columnFECHA_NACIMIENTO As Global.System.Data.DataColumn
        
        Private columnSEXO As Global.System.Data.DataColumn
        
        Private columnCIUDAD As Global.System.Data.DataColumn
        
        Private columnSUELDO As Global.System.Data.DataColumn
        
        Private columnLIBRETA_MILITAR As Global.System.Data.DataColumn
        
        Private columnTIPO_SANGRE As Global.System.Data.DataColumn
        
        Private columnPASAPORTE As Global.System.Data.DataColumn
        
        Private columnPESO As Global.System.Data.DataColumn
        
        Private columnEDAD As Global.System.Data.DataColumn
        
        Private columnPRUEBA_ANTIDROGA As Global.System.Data.DataColumn
        
        Private columnFECHA_ENTRADA As Global.System.Data.DataColumn
        
        Private columnFECHA_SALIDA As Global.System.Data.DataColumn
        
        Private columnESTADO_PERSONAL As Global.System.Data.DataColumn
        
        Private columnID_AREA As Global.System.Data.DataColumn
        
        Private columnID_CARGO_OCUPACIONAL As Global.System.Data.DataColumn
        
        Private columnUBICACION As Global.System.Data.DataColumn
        
        Private columnINSTRUCCION As Global.System.Data.DataColumn
        
        Private columnESTADO_CIVIL As Global.System.Data.DataColumn
        
        Private columnMOVIL As Global.System.Data.DataColumn
        
        Private columnTELEFONO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD_HIJOS As Global.System.Data.DataColumn
        
        Private columnHISTORIA_CLINICA As Global.System.Data.DataColumn
        
        Private columnPARROQUIA As Global.System.Data.DataColumn
        
        Private columnESTATURA As Global.System.Data.DataColumn
        
        Private columnDISCAPACIDAD As Global.System.Data.DataColumn
        
        Private columnEXAMEN_PSICOLOGICO As Global.System.Data.DataColumn
        
        Private columnLUGAR_EXAMEN_PSICOLOGICO As Global.System.Data.DataColumn
        
        Private columnCARNET_CONADIS As Global.System.Data.DataColumn
        
        Private columnDATOS_HIJOS As Global.System.Data.DataColumn
        
        Private columnDATOS_ESPOSA As Global.System.Data.DataColumn
        
        Private columnCASA As Global.System.Data.DataColumn
        
        Private columnARRIENDO As Global.System.Data.DataColumn
        
        Private columnDEUDOR_GARANTE As Global.System.Data.DataColumn
        
        Private columnCANTIDAD_DEUDA As Global.System.Data.DataColumn
        
        Private columnA_QUIEN_ADEUDA As Global.System.Data.DataColumn
        
        Private columnTRABAJO_ATERIORMENTE As Global.System.Data.DataColumn
        
        Private columnANTERIOR_TRABAJO As Global.System.Data.DataColumn
        
        Private columnCARGO_ANTERIOR_TRABAJO As Global.System.Data.DataColumn
        
        Private columnMOTIVO_SALIDA_TRABAJO As Global.System.Data.DataColumn
        
        Private columnENTRADA_ANTERIOR As Global.System.Data.DataColumn
        
        Private columnSALIDA_ANTERIOR As Global.System.Data.DataColumn
        
        Private columnNOMBRES_PATRONO_ANTERIOR As Global.System.Data.DataColumn
        
        Private columnTELEFONO_PATRONO_ANTERIOR As Global.System.Data.DataColumn
        
        Private columnRECOMENDACIONES As Global.System.Data.DataColumn
        
        Private columnDATOS_FAMILIARES As Global.System.Data.DataColumn
        
        Private columnDATOS_EMERGENCIA As Global.System.Data.DataColumn
        
        Private columnFOTO As Global.System.Data.DataColumn
        
        Private columnPERFIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PERSONAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_PERSONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PERSONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CEDULAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEDULA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property APELLIDOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPELLIDOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PROVINCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVINCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_NACIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_NACIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SEXOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEXO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SUELDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUELDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LIBRETA_MILITARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIBRETA_MILITAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_SANGREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_SANGRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PASAPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPASAPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property EDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PRUEBA_ANTIDROGAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRUEBA_ANTIDROGA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_ENTRADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ENTRADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_SALIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_SALIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_PERSONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_PERSONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CARGO_OCUPACIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CARGO_OCUPACIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property UBICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUBICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property INSTRUCCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSTRUCCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_CIVILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_CIVIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MOVILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOVIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELEFONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CANTIDAD_HIJOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD_HIJOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HISTORIA_CLINICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHISTORIA_CLINICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PARROQUIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARROQUIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTATURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTATURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DISCAPACIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCAPACIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property EXAMEN_PSICOLOGICOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAMEN_PSICOLOGICO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LUGAR_EXAMEN_PSICOLOGICOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLUGAR_EXAMEN_PSICOLOGICO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CARNET_CONADISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARNET_CONADIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATOS_HIJOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATOS_HIJOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATOS_ESPOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATOS_ESPOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CASAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ARRIENDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnARRIENDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DEUDOR_GARANTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEUDOR_GARANTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CANTIDAD_DEUDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD_DEUDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property A_QUIEN_ADEUDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnA_QUIEN_ADEUDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TRABAJO_ATERIORMENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRABAJO_ATERIORMENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANTERIOR_TRABAJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANTERIOR_TRABAJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CARGO_ANTERIOR_TRABAJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARGO_ANTERIOR_TRABAJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MOTIVO_SALIDA_TRABAJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOTIVO_SALIDA_TRABAJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ENTRADA_ANTERIORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTRADA_ANTERIOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SALIDA_ANTERIORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALIDA_ANTERIOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRES_PATRONO_ANTERIORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRES_PATRONO_ANTERIOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELEFONO_PATRONO_ANTERIORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONO_PATRONO_ANTERIOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RECOMENDACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECOMENDACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATOS_FAMILIARESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATOS_FAMILIARES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATOS_EMERGENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATOS_EMERGENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FOTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PERFILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERFIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PERSONALRow
            Get
                Return CType(Me.Rows(index),PERSONALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PERSONALRowChanging As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PERSONALRowChanged As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PERSONALRowDeleting As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PERSONALRowDeleted As PERSONALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddPERSONALRow(ByVal row As PERSONALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddPERSONALRow( _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal CEDULA As String,  _
                    ByVal NOMBRES As String,  _
                    ByVal APELLIDOS As String,  _
                    ByVal PROVINCIA As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal FECHA_NACIMIENTO As Date,  _
                    ByVal SEXO As String,  _
                    ByVal CIUDAD As String,  _
                    ByVal SUELDO As Decimal,  _
                    ByVal LIBRETA_MILITAR As String,  _
                    ByVal TIPO_SANGRE As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal PESO As Integer,  _
                    ByVal EDAD As Integer,  _
                    ByVal PRUEBA_ANTIDROGA As String,  _
                    ByVal FECHA_ENTRADA As Date,  _
                    ByVal FECHA_SALIDA As Date,  _
                    ByVal ESTADO_PERSONAL As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal parentCARGO_OCUPACIONALRowByFK_PERSONAL_CARGO_OCUPACIONAL As CARGO_OCUPACIONALRow,  _
                    ByVal UBICACION As String,  _
                    ByVal INSTRUCCION As String,  _
                    ByVal ESTADO_CIVIL As String,  _
                    ByVal MOVIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal CANTIDAD_HIJOS As Integer,  _
                    ByVal HISTORIA_CLINICA As String,  _
                    ByVal PARROQUIA As String,  _
                    ByVal ESTATURA As Decimal,  _
                    ByVal DISCAPACIDAD As String,  _
                    ByVal EXAMEN_PSICOLOGICO As String,  _
                    ByVal LUGAR_EXAMEN_PSICOLOGICO As String,  _
                    ByVal CARNET_CONADIS As String,  _
                    ByVal DATOS_HIJOS As String,  _
                    ByVal DATOS_ESPOSA As String,  _
                    ByVal CASA As String,  _
                    ByVal ARRIENDO As String,  _
                    ByVal DEUDOR_GARANTE As String,  _
                    ByVal CANTIDAD_DEUDA As Decimal,  _
                    ByVal A_QUIEN_ADEUDA As String,  _
                    ByVal TRABAJO_ATERIORMENTE As String,  _
                    ByVal ANTERIOR_TRABAJO As String,  _
                    ByVal CARGO_ANTERIOR_TRABAJO As String,  _
                    ByVal MOTIVO_SALIDA_TRABAJO As String,  _
                    ByVal ENTRADA_ANTERIOR As Date,  _
                    ByVal SALIDA_ANTERIOR As Date,  _
                    ByVal NOMBRES_PATRONO_ANTERIOR As String,  _
                    ByVal TELEFONO_PATRONO_ANTERIOR As String,  _
                    ByVal RECOMENDACIONES As String,  _
                    ByVal DATOS_FAMILIARES As String,  _
                    ByVal DATOS_EMERGENCIA As String,  _
                    ByVal FOTO() As Byte,  _
                    ByVal PERFIL() As Byte) As PERSONALRow
            Dim rowPERSONALRow As PERSONALRow = CType(Me.NewRow,PERSONALRow)
            Dim columnValuesArray() As Object = New Object() {ID_PERSONAL, CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIMIENTO, SEXO, CIUDAD, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD, PRUEBA_ANTIDROGA, FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, Nothing, UBICACION, INSTRUCCION, ESTADO_CIVIL, MOVIL, TELEFONO, CANTIDAD_HIJOS, HISTORIA_CLINICA, PARROQUIA, ESTATURA, DISCAPACIDAD, EXAMEN_PSICOLOGICO, LUGAR_EXAMEN_PSICOLOGICO, CARNET_CONADIS, DATOS_HIJOS, DATOS_ESPOSA, CASA, ARRIENDO, DEUDOR_GARANTE, CANTIDAD_DEUDA, A_QUIEN_ADEUDA, TRABAJO_ATERIORMENTE, ANTERIOR_TRABAJO, CARGO_ANTERIOR_TRABAJO, MOTIVO_SALIDA_TRABAJO, ENTRADA_ANTERIOR, SALIDA_ANTERIOR, NOMBRES_PATRONO_ANTERIOR, TELEFONO_PATRONO_ANTERIOR, RECOMENDACIONES, DATOS_FAMILIARES, DATOS_EMERGENCIA, FOTO, PERFIL}
            If (Not (parentCARGO_OCUPACIONALRowByFK_PERSONAL_CARGO_OCUPACIONAL) Is Nothing) Then
                columnValuesArray(20) = parentCARGO_OCUPACIONALRowByFK_PERSONAL_CARGO_OCUPACIONAL(0)
            End If
            rowPERSONALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPERSONALRow)
            Return rowPERSONALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_PERSONAL(ByVal ID_PERSONAL As Integer) As PERSONALRow
            Return CType(Me.Rows.Find(New Object() {ID_PERSONAL}),PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PERSONALDataTable = CType(MyBase.Clone,PERSONALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PERSONALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_PERSONAL = MyBase.Columns("ID_PERSONAL")
            Me.columnCEDULA = MyBase.Columns("CEDULA")
            Me.columnNOMBRES = MyBase.Columns("NOMBRES")
            Me.columnAPELLIDOS = MyBase.Columns("APELLIDOS")
            Me.columnPROVINCIA = MyBase.Columns("PROVINCIA")
            Me.columnDIRECCION = MyBase.Columns("DIRECCION")
            Me.columnFECHA_NACIMIENTO = MyBase.Columns("FECHA_NACIMIENTO")
            Me.columnSEXO = MyBase.Columns("SEXO")
            Me.columnCIUDAD = MyBase.Columns("CIUDAD")
            Me.columnSUELDO = MyBase.Columns("SUELDO")
            Me.columnLIBRETA_MILITAR = MyBase.Columns("LIBRETA_MILITAR")
            Me.columnTIPO_SANGRE = MyBase.Columns("TIPO_SANGRE")
            Me.columnPASAPORTE = MyBase.Columns("PASAPORTE")
            Me.columnPESO = MyBase.Columns("PESO")
            Me.columnEDAD = MyBase.Columns("EDAD")
            Me.columnPRUEBA_ANTIDROGA = MyBase.Columns("PRUEBA_ANTIDROGA")
            Me.columnFECHA_ENTRADA = MyBase.Columns("FECHA_ENTRADA")
            Me.columnFECHA_SALIDA = MyBase.Columns("FECHA_SALIDA")
            Me.columnESTADO_PERSONAL = MyBase.Columns("ESTADO_PERSONAL")
            Me.columnID_AREA = MyBase.Columns("ID_AREA")
            Me.columnID_CARGO_OCUPACIONAL = MyBase.Columns("ID_CARGO_OCUPACIONAL")
            Me.columnUBICACION = MyBase.Columns("UBICACION")
            Me.columnINSTRUCCION = MyBase.Columns("INSTRUCCION")
            Me.columnESTADO_CIVIL = MyBase.Columns("ESTADO_CIVIL")
            Me.columnMOVIL = MyBase.Columns("MOVIL")
            Me.columnTELEFONO = MyBase.Columns("TELEFONO")
            Me.columnCANTIDAD_HIJOS = MyBase.Columns("CANTIDAD_HIJOS")
            Me.columnHISTORIA_CLINICA = MyBase.Columns("HISTORIA_CLINICA")
            Me.columnPARROQUIA = MyBase.Columns("PARROQUIA")
            Me.columnESTATURA = MyBase.Columns("ESTATURA")
            Me.columnDISCAPACIDAD = MyBase.Columns("DISCAPACIDAD")
            Me.columnEXAMEN_PSICOLOGICO = MyBase.Columns("EXAMEN_PSICOLOGICO")
            Me.columnLUGAR_EXAMEN_PSICOLOGICO = MyBase.Columns("LUGAR_EXAMEN_PSICOLOGICO")
            Me.columnCARNET_CONADIS = MyBase.Columns("CARNET_CONADIS")
            Me.columnDATOS_HIJOS = MyBase.Columns("DATOS_HIJOS")
            Me.columnDATOS_ESPOSA = MyBase.Columns("DATOS_ESPOSA")
            Me.columnCASA = MyBase.Columns("CASA")
            Me.columnARRIENDO = MyBase.Columns("ARRIENDO")
            Me.columnDEUDOR_GARANTE = MyBase.Columns("DEUDOR_GARANTE")
            Me.columnCANTIDAD_DEUDA = MyBase.Columns("CANTIDAD_DEUDA")
            Me.columnA_QUIEN_ADEUDA = MyBase.Columns("A_QUIEN_ADEUDA")
            Me.columnTRABAJO_ATERIORMENTE = MyBase.Columns("TRABAJO_ATERIORMENTE")
            Me.columnANTERIOR_TRABAJO = MyBase.Columns("ANTERIOR_TRABAJO")
            Me.columnCARGO_ANTERIOR_TRABAJO = MyBase.Columns("CARGO_ANTERIOR_TRABAJO")
            Me.columnMOTIVO_SALIDA_TRABAJO = MyBase.Columns("MOTIVO_SALIDA_TRABAJO")
            Me.columnENTRADA_ANTERIOR = MyBase.Columns("ENTRADA_ANTERIOR")
            Me.columnSALIDA_ANTERIOR = MyBase.Columns("SALIDA_ANTERIOR")
            Me.columnNOMBRES_PATRONO_ANTERIOR = MyBase.Columns("NOMBRES_PATRONO_ANTERIOR")
            Me.columnTELEFONO_PATRONO_ANTERIOR = MyBase.Columns("TELEFONO_PATRONO_ANTERIOR")
            Me.columnRECOMENDACIONES = MyBase.Columns("RECOMENDACIONES")
            Me.columnDATOS_FAMILIARES = MyBase.Columns("DATOS_FAMILIARES")
            Me.columnDATOS_EMERGENCIA = MyBase.Columns("DATOS_EMERGENCIA")
            Me.columnFOTO = MyBase.Columns("FOTO")
            Me.columnPERFIL = MyBase.Columns("PERFIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_PERSONAL = New Global.System.Data.DataColumn("ID_PERSONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PERSONAL)
            Me.columnCEDULA = New Global.System.Data.DataColumn("CEDULA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEDULA)
            Me.columnNOMBRES = New Global.System.Data.DataColumn("NOMBRES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRES)
            Me.columnAPELLIDOS = New Global.System.Data.DataColumn("APELLIDOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPELLIDOS)
            Me.columnPROVINCIA = New Global.System.Data.DataColumn("PROVINCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVINCIA)
            Me.columnDIRECCION = New Global.System.Data.DataColumn("DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION)
            Me.columnFECHA_NACIMIENTO = New Global.System.Data.DataColumn("FECHA_NACIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_NACIMIENTO)
            Me.columnSEXO = New Global.System.Data.DataColumn("SEXO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEXO)
            Me.columnCIUDAD = New Global.System.Data.DataColumn("CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIUDAD)
            Me.columnSUELDO = New Global.System.Data.DataColumn("SUELDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUELDO)
            Me.columnLIBRETA_MILITAR = New Global.System.Data.DataColumn("LIBRETA_MILITAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIBRETA_MILITAR)
            Me.columnTIPO_SANGRE = New Global.System.Data.DataColumn("TIPO_SANGRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_SANGRE)
            Me.columnPASAPORTE = New Global.System.Data.DataColumn("PASAPORTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPASAPORTE)
            Me.columnPESO = New Global.System.Data.DataColumn("PESO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPESO)
            Me.columnEDAD = New Global.System.Data.DataColumn("EDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDAD)
            Me.columnPRUEBA_ANTIDROGA = New Global.System.Data.DataColumn("PRUEBA_ANTIDROGA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRUEBA_ANTIDROGA)
            Me.columnFECHA_ENTRADA = New Global.System.Data.DataColumn("FECHA_ENTRADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ENTRADA)
            Me.columnFECHA_SALIDA = New Global.System.Data.DataColumn("FECHA_SALIDA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_SALIDA)
            Me.columnESTADO_PERSONAL = New Global.System.Data.DataColumn("ESTADO_PERSONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_PERSONAL)
            Me.columnID_AREA = New Global.System.Data.DataColumn("ID_AREA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AREA)
            Me.columnID_CARGO_OCUPACIONAL = New Global.System.Data.DataColumn("ID_CARGO_OCUPACIONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CARGO_OCUPACIONAL)
            Me.columnUBICACION = New Global.System.Data.DataColumn("UBICACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUBICACION)
            Me.columnINSTRUCCION = New Global.System.Data.DataColumn("INSTRUCCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSTRUCCION)
            Me.columnESTADO_CIVIL = New Global.System.Data.DataColumn("ESTADO_CIVIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_CIVIL)
            Me.columnMOVIL = New Global.System.Data.DataColumn("MOVIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOVIL)
            Me.columnTELEFONO = New Global.System.Data.DataColumn("TELEFONO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONO)
            Me.columnCANTIDAD_HIJOS = New Global.System.Data.DataColumn("CANTIDAD_HIJOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD_HIJOS)
            Me.columnHISTORIA_CLINICA = New Global.System.Data.DataColumn("HISTORIA_CLINICA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHISTORIA_CLINICA)
            Me.columnPARROQUIA = New Global.System.Data.DataColumn("PARROQUIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARROQUIA)
            Me.columnESTATURA = New Global.System.Data.DataColumn("ESTATURA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTATURA)
            Me.columnDISCAPACIDAD = New Global.System.Data.DataColumn("DISCAPACIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCAPACIDAD)
            Me.columnEXAMEN_PSICOLOGICO = New Global.System.Data.DataColumn("EXAMEN_PSICOLOGICO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAMEN_PSICOLOGICO)
            Me.columnLUGAR_EXAMEN_PSICOLOGICO = New Global.System.Data.DataColumn("LUGAR_EXAMEN_PSICOLOGICO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLUGAR_EXAMEN_PSICOLOGICO)
            Me.columnCARNET_CONADIS = New Global.System.Data.DataColumn("CARNET_CONADIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARNET_CONADIS)
            Me.columnDATOS_HIJOS = New Global.System.Data.DataColumn("DATOS_HIJOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATOS_HIJOS)
            Me.columnDATOS_ESPOSA = New Global.System.Data.DataColumn("DATOS_ESPOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATOS_ESPOSA)
            Me.columnCASA = New Global.System.Data.DataColumn("CASA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASA)
            Me.columnARRIENDO = New Global.System.Data.DataColumn("ARRIENDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnARRIENDO)
            Me.columnDEUDOR_GARANTE = New Global.System.Data.DataColumn("DEUDOR_GARANTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEUDOR_GARANTE)
            Me.columnCANTIDAD_DEUDA = New Global.System.Data.DataColumn("CANTIDAD_DEUDA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD_DEUDA)
            Me.columnA_QUIEN_ADEUDA = New Global.System.Data.DataColumn("A_QUIEN_ADEUDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnA_QUIEN_ADEUDA)
            Me.columnTRABAJO_ATERIORMENTE = New Global.System.Data.DataColumn("TRABAJO_ATERIORMENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRABAJO_ATERIORMENTE)
            Me.columnANTERIOR_TRABAJO = New Global.System.Data.DataColumn("ANTERIOR_TRABAJO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANTERIOR_TRABAJO)
            Me.columnCARGO_ANTERIOR_TRABAJO = New Global.System.Data.DataColumn("CARGO_ANTERIOR_TRABAJO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARGO_ANTERIOR_TRABAJO)
            Me.columnMOTIVO_SALIDA_TRABAJO = New Global.System.Data.DataColumn("MOTIVO_SALIDA_TRABAJO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOTIVO_SALIDA_TRABAJO)
            Me.columnENTRADA_ANTERIOR = New Global.System.Data.DataColumn("ENTRADA_ANTERIOR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTRADA_ANTERIOR)
            Me.columnSALIDA_ANTERIOR = New Global.System.Data.DataColumn("SALIDA_ANTERIOR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALIDA_ANTERIOR)
            Me.columnNOMBRES_PATRONO_ANTERIOR = New Global.System.Data.DataColumn("NOMBRES_PATRONO_ANTERIOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRES_PATRONO_ANTERIOR)
            Me.columnTELEFONO_PATRONO_ANTERIOR = New Global.System.Data.DataColumn("TELEFONO_PATRONO_ANTERIOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONO_PATRONO_ANTERIOR)
            Me.columnRECOMENDACIONES = New Global.System.Data.DataColumn("RECOMENDACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECOMENDACIONES)
            Me.columnDATOS_FAMILIARES = New Global.System.Data.DataColumn("DATOS_FAMILIARES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATOS_FAMILIARES)
            Me.columnDATOS_EMERGENCIA = New Global.System.Data.DataColumn("DATOS_EMERGENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATOS_EMERGENCIA)
            Me.columnFOTO = New Global.System.Data.DataColumn("FOTO", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOTO)
            Me.columnPERFIL = New Global.System.Data.DataColumn("PERFIL", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERFIL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_PERSONAL}, true))
            Me.columnID_PERSONAL.AllowDBNull = false
            Me.columnID_PERSONAL.Unique = true
            Me.columnCEDULA.AllowDBNull = false
            Me.columnCEDULA.MaxLength = 10
            Me.columnNOMBRES.AllowDBNull = false
            Me.columnNOMBRES.MaxLength = 2147483647
            Me.columnAPELLIDOS.AllowDBNull = false
            Me.columnAPELLIDOS.MaxLength = 2147483647
            Me.columnPROVINCIA.AllowDBNull = false
            Me.columnPROVINCIA.MaxLength = 2147483647
            Me.columnDIRECCION.AllowDBNull = false
            Me.columnDIRECCION.MaxLength = 2147483647
            Me.columnSEXO.AllowDBNull = false
            Me.columnSEXO.MaxLength = 10
            Me.columnCIUDAD.AllowDBNull = false
            Me.columnCIUDAD.MaxLength = 2147483647
            Me.columnSUELDO.AllowDBNull = false
            Me.columnLIBRETA_MILITAR.AllowDBNull = false
            Me.columnLIBRETA_MILITAR.MaxLength = 20
            Me.columnTIPO_SANGRE.AllowDBNull = false
            Me.columnTIPO_SANGRE.MaxLength = 5
            Me.columnPASAPORTE.AllowDBNull = false
            Me.columnPASAPORTE.MaxLength = 20
            Me.columnPESO.AllowDBNull = false
            Me.columnEDAD.AllowDBNull = false
            Me.columnPRUEBA_ANTIDROGA.AllowDBNull = false
            Me.columnPRUEBA_ANTIDROGA.MaxLength = 20
            Me.columnESTADO_PERSONAL.AllowDBNull = false
            Me.columnID_AREA.AllowDBNull = false
            Me.columnID_CARGO_OCUPACIONAL.AllowDBNull = false
            Me.columnUBICACION.AllowDBNull = false
            Me.columnUBICACION.MaxLength = 2147483647
            Me.columnINSTRUCCION.AllowDBNull = false
            Me.columnINSTRUCCION.MaxLength = 2147483647
            Me.columnESTADO_CIVIL.AllowDBNull = false
            Me.columnESTADO_CIVIL.MaxLength = 10
            Me.columnMOVIL.MaxLength = 2147483647
            Me.columnTELEFONO.MaxLength = 2147483647
            Me.columnHISTORIA_CLINICA.MaxLength = 2147483647
            Me.columnPARROQUIA.MaxLength = 2147483647
            Me.columnDISCAPACIDAD.MaxLength = 2147483647
            Me.columnEXAMEN_PSICOLOGICO.MaxLength = 2147483647
            Me.columnLUGAR_EXAMEN_PSICOLOGICO.MaxLength = 2147483647
            Me.columnCARNET_CONADIS.MaxLength = 2147483647
            Me.columnDATOS_HIJOS.MaxLength = 2147483647
            Me.columnDATOS_ESPOSA.MaxLength = 2147483647
            Me.columnCASA.MaxLength = 2147483647
            Me.columnARRIENDO.MaxLength = 2147483647
            Me.columnDEUDOR_GARANTE.MaxLength = 2147483647
            Me.columnA_QUIEN_ADEUDA.MaxLength = 2147483647
            Me.columnTRABAJO_ATERIORMENTE.MaxLength = 2147483647
            Me.columnANTERIOR_TRABAJO.MaxLength = 2147483647
            Me.columnCARGO_ANTERIOR_TRABAJO.MaxLength = 2147483647
            Me.columnMOTIVO_SALIDA_TRABAJO.MaxLength = 2147483647
            Me.columnNOMBRES_PATRONO_ANTERIOR.MaxLength = 2147483647
            Me.columnTELEFONO_PATRONO_ANTERIOR.MaxLength = 2147483647
            Me.columnRECOMENDACIONES.MaxLength = 2147483647
            Me.columnDATOS_FAMILIARES.MaxLength = 2147483647
            Me.columnDATOS_EMERGENCIA.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewPERSONALRow() As PERSONALRow
            Return CType(Me.NewRow,PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PERSONALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PERSONALRowChangedEvent) Is Nothing) Then
                RaiseEvent PERSONALRowChanged(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PERSONALRowChangingEvent) Is Nothing) Then
                RaiseEvent PERSONALRowChanging(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PERSONALRowDeletedEvent) Is Nothing) Then
                RaiseEvent PERSONALRowDeleted(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PERSONALRowDeletingEvent) Is Nothing) Then
                RaiseEvent PERSONALRowDeleting(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemovePERSONALRow(ByVal row As PERSONALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PERSONALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EMPRESA_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of EMPRESA_GENERALRow)
        
        Private columnID_EMPRESA As Global.System.Data.DataColumn
        
        Private columnCODIGO_EMPRESA As Global.System.Data.DataColumn
        
        Private columnNOMBRE_EMPRESA As Global.System.Data.DataColumn
        
        Private columnRUC_EMPRESA As Global.System.Data.DataColumn
        
        Private columnESTADO_EMPRESA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EMPRESA_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RUC_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUC_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EMPRESA_GENERALRow
            Get
                Return CType(Me.Rows(index),EMPRESA_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EMPRESA_GENERALRowChanging As EMPRESA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EMPRESA_GENERALRowChanged As EMPRESA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EMPRESA_GENERALRowDeleting As EMPRESA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event EMPRESA_GENERALRowDeleted As EMPRESA_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddEMPRESA_GENERALRow(ByVal row As EMPRESA_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddEMPRESA_GENERALRow(ByVal ID_EMPRESA As Integer, ByVal CODIGO_EMPRESA As Integer, ByVal NOMBRE_EMPRESA As String, ByVal RUC_EMPRESA As String, ByVal ESTADO_EMPRESA As Integer) As EMPRESA_GENERALRow
            Dim rowEMPRESA_GENERALRow As EMPRESA_GENERALRow = CType(Me.NewRow,EMPRESA_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_EMPRESA, CODIGO_EMPRESA, NOMBRE_EMPRESA, RUC_EMPRESA, ESTADO_EMPRESA}
            rowEMPRESA_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEMPRESA_GENERALRow)
            Return rowEMPRESA_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_EMPRESA(ByVal ID_EMPRESA As Integer) As EMPRESA_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_EMPRESA}),EMPRESA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EMPRESA_GENERALDataTable = CType(MyBase.Clone,EMPRESA_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EMPRESA_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_EMPRESA = MyBase.Columns("ID_EMPRESA")
            Me.columnCODIGO_EMPRESA = MyBase.Columns("CODIGO_EMPRESA")
            Me.columnNOMBRE_EMPRESA = MyBase.Columns("NOMBRE_EMPRESA")
            Me.columnRUC_EMPRESA = MyBase.Columns("RUC_EMPRESA")
            Me.columnESTADO_EMPRESA = MyBase.Columns("ESTADO_EMPRESA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_EMPRESA = New Global.System.Data.DataColumn("ID_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPRESA)
            Me.columnCODIGO_EMPRESA = New Global.System.Data.DataColumn("CODIGO_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_EMPRESA)
            Me.columnNOMBRE_EMPRESA = New Global.System.Data.DataColumn("NOMBRE_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_EMPRESA)
            Me.columnRUC_EMPRESA = New Global.System.Data.DataColumn("RUC_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC_EMPRESA)
            Me.columnESTADO_EMPRESA = New Global.System.Data.DataColumn("ESTADO_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_EMPRESA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_EMPRESA}, true))
            Me.columnID_EMPRESA.AllowDBNull = false
            Me.columnID_EMPRESA.Unique = true
            Me.columnCODIGO_EMPRESA.AllowDBNull = false
            Me.columnNOMBRE_EMPRESA.AllowDBNull = false
            Me.columnNOMBRE_EMPRESA.MaxLength = 2147483647
            Me.columnRUC_EMPRESA.AllowDBNull = false
            Me.columnRUC_EMPRESA.MaxLength = 15
            Me.columnESTADO_EMPRESA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewEMPRESA_GENERALRow() As EMPRESA_GENERALRow
            Return CType(Me.NewRow,EMPRESA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EMPRESA_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EMPRESA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EMPRESA_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent EMPRESA_GENERALRowChanged(Me, New EMPRESA_GENERALRowChangeEvent(CType(e.Row,EMPRESA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EMPRESA_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent EMPRESA_GENERALRowChanging(Me, New EMPRESA_GENERALRowChangeEvent(CType(e.Row,EMPRESA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EMPRESA_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent EMPRESA_GENERALRowDeleted(Me, New EMPRESA_GENERALRowChangeEvent(CType(e.Row,EMPRESA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EMPRESA_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent EMPRESA_GENERALRowDeleting(Me, New EMPRESA_GENERALRowChangeEvent(CType(e.Row,EMPRESA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveEMPRESA_GENERALRow(ByVal row As EMPRESA_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EMPRESA_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AREA_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of AREA_GENERALRow)
        
        Private columnID_AREA_GENERAL As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_AREA As Global.System.Data.DataColumn
        
        Private columnESTADO_AREA As Global.System.Data.DataColumn
        
        Private columnID_GERENCIAS_GENERAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AREA_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_AREA_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AREA_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_GERENCIAS_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_GERENCIAS_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AREA_GENERALRow
            Get
                Return CType(Me.Rows(index),AREA_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event AREA_GENERALRowChanging As AREA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event AREA_GENERALRowChanged As AREA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event AREA_GENERALRowDeleting As AREA_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event AREA_GENERALRowDeleted As AREA_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddAREA_GENERALRow(ByVal row As AREA_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddAREA_GENERALRow(ByVal ID_AREA_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_AREA As String, ByVal ESTADO_AREA As Integer, ByVal ID_GERENCIAS_GENERAL As Integer) As AREA_GENERALRow
            Dim rowAREA_GENERALRow As AREA_GENERALRow = CType(Me.NewRow,AREA_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_AREA_GENERAL, CODIGO, NOMBRE_AREA, ESTADO_AREA, ID_GERENCIAS_GENERAL}
            rowAREA_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAREA_GENERALRow)
            Return rowAREA_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_AREA_GENERAL(ByVal ID_AREA_GENERAL As Integer) As AREA_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_AREA_GENERAL}),AREA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AREA_GENERALDataTable = CType(MyBase.Clone,AREA_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AREA_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_AREA_GENERAL = MyBase.Columns("ID_AREA_GENERAL")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnNOMBRE_AREA = MyBase.Columns("NOMBRE_AREA")
            Me.columnESTADO_AREA = MyBase.Columns("ESTADO_AREA")
            Me.columnID_GERENCIAS_GENERAL = MyBase.Columns("ID_GERENCIAS_GENERAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_AREA_GENERAL = New Global.System.Data.DataColumn("ID_AREA_GENERAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AREA_GENERAL)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnNOMBRE_AREA = New Global.System.Data.DataColumn("NOMBRE_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_AREA)
            Me.columnESTADO_AREA = New Global.System.Data.DataColumn("ESTADO_AREA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_AREA)
            Me.columnID_GERENCIAS_GENERAL = New Global.System.Data.DataColumn("ID_GERENCIAS_GENERAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_GERENCIAS_GENERAL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_AREA_GENERAL}, true))
            Me.columnID_AREA_GENERAL.AllowDBNull = false
            Me.columnID_AREA_GENERAL.Unique = true
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnNOMBRE_AREA.AllowDBNull = false
            Me.columnNOMBRE_AREA.MaxLength = 2147483647
            Me.columnESTADO_AREA.AllowDBNull = false
            Me.columnID_GERENCIAS_GENERAL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewAREA_GENERALRow() As AREA_GENERALRow
            Return CType(Me.NewRow,AREA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AREA_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AREA_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AREA_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent AREA_GENERALRowChanged(Me, New AREA_GENERALRowChangeEvent(CType(e.Row,AREA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AREA_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent AREA_GENERALRowChanging(Me, New AREA_GENERALRowChangeEvent(CType(e.Row,AREA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AREA_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent AREA_GENERALRowDeleted(Me, New AREA_GENERALRowChangeEvent(CType(e.Row,AREA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AREA_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent AREA_GENERALRowDeleting(Me, New AREA_GENERALRowChangeEvent(CType(e.Row,AREA_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveAREA_GENERALRow(ByVal row As AREA_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AREA_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SUCURSAL_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of SUCURSAL_GENERALRow)
        
        Private columnID_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnCODIGO_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnNOMBRE_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnESTADO_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnID_EMPRESA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SUCURSAL_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SUCURSAL_GENERALRow
            Get
                Return CType(Me.Rows(index),SUCURSAL_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SUCURSAL_GENERALRowChanging As SUCURSAL_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SUCURSAL_GENERALRowChanged As SUCURSAL_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SUCURSAL_GENERALRowDeleting As SUCURSAL_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SUCURSAL_GENERALRowDeleted As SUCURSAL_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddSUCURSAL_GENERALRow(ByVal row As SUCURSAL_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddSUCURSAL_GENERALRow(ByVal ID_SUCURSAL As Integer, ByVal CODIGO_SUCURSAL As String, ByVal NOMBRE_SUCURSAL As String, ByVal ESTADO_SUCURSAL As Integer, ByVal ID_EMPRESA As Integer) As SUCURSAL_GENERALRow
            Dim rowSUCURSAL_GENERALRow As SUCURSAL_GENERALRow = CType(Me.NewRow,SUCURSAL_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_SUCURSAL, CODIGO_SUCURSAL, NOMBRE_SUCURSAL, ESTADO_SUCURSAL, ID_EMPRESA}
            rowSUCURSAL_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSUCURSAL_GENERALRow)
            Return rowSUCURSAL_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_SUCURSAL(ByVal ID_SUCURSAL As Integer) As SUCURSAL_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_SUCURSAL}),SUCURSAL_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SUCURSAL_GENERALDataTable = CType(MyBase.Clone,SUCURSAL_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SUCURSAL_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_SUCURSAL = MyBase.Columns("ID_SUCURSAL")
            Me.columnCODIGO_SUCURSAL = MyBase.Columns("CODIGO_SUCURSAL")
            Me.columnNOMBRE_SUCURSAL = MyBase.Columns("NOMBRE_SUCURSAL")
            Me.columnESTADO_SUCURSAL = MyBase.Columns("ESTADO_SUCURSAL")
            Me.columnID_EMPRESA = MyBase.Columns("ID_EMPRESA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_SUCURSAL = New Global.System.Data.DataColumn("ID_SUCURSAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SUCURSAL)
            Me.columnCODIGO_SUCURSAL = New Global.System.Data.DataColumn("CODIGO_SUCURSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_SUCURSAL)
            Me.columnNOMBRE_SUCURSAL = New Global.System.Data.DataColumn("NOMBRE_SUCURSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_SUCURSAL)
            Me.columnESTADO_SUCURSAL = New Global.System.Data.DataColumn("ESTADO_SUCURSAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_SUCURSAL)
            Me.columnID_EMPRESA = New Global.System.Data.DataColumn("ID_EMPRESA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPRESA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_SUCURSAL}, true))
            Me.columnID_SUCURSAL.AllowDBNull = false
            Me.columnID_SUCURSAL.Unique = true
            Me.columnCODIGO_SUCURSAL.AllowDBNull = false
            Me.columnCODIGO_SUCURSAL.MaxLength = 2147483647
            Me.columnNOMBRE_SUCURSAL.AllowDBNull = false
            Me.columnNOMBRE_SUCURSAL.MaxLength = 2147483647
            Me.columnESTADO_SUCURSAL.AllowDBNull = false
            Me.columnID_EMPRESA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewSUCURSAL_GENERALRow() As SUCURSAL_GENERALRow
            Return CType(Me.NewRow,SUCURSAL_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SUCURSAL_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SUCURSAL_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SUCURSAL_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent SUCURSAL_GENERALRowChanged(Me, New SUCURSAL_GENERALRowChangeEvent(CType(e.Row,SUCURSAL_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SUCURSAL_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent SUCURSAL_GENERALRowChanging(Me, New SUCURSAL_GENERALRowChangeEvent(CType(e.Row,SUCURSAL_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SUCURSAL_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent SUCURSAL_GENERALRowDeleted(Me, New SUCURSAL_GENERALRowChangeEvent(CType(e.Row,SUCURSAL_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SUCURSAL_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent SUCURSAL_GENERALRowDeleting(Me, New SUCURSAL_GENERALRowChangeEvent(CType(e.Row,SUCURSAL_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveSUCURSAL_GENERALRow(ByVal row As SUCURSAL_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SUCURSAL_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GERENCIAS_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of GERENCIAS_GENERALRow)
        
        Private columnID_GERENCIAS_GENERAL As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_GERENCIAS As Global.System.Data.DataColumn
        
        Private columnESTADO_GERENCIAS As Global.System.Data.DataColumn
        
        Private columnID_GERENCIA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GERENCIAS_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_GERENCIAS_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_GERENCIAS_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_GERENCIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_GERENCIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_GERENCIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_GERENCIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_GERENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_GERENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GERENCIAS_GENERALRow
            Get
                Return CType(Me.Rows(index),GERENCIAS_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GERENCIAS_GENERALRowChanging As GERENCIAS_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GERENCIAS_GENERALRowChanged As GERENCIAS_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GERENCIAS_GENERALRowDeleting As GERENCIAS_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GERENCIAS_GENERALRowDeleted As GERENCIAS_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddGERENCIAS_GENERALRow(ByVal row As GERENCIAS_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddGERENCIAS_GENERALRow(ByVal ID_GERENCIAS_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_GERENCIAS As String, ByVal ESTADO_GERENCIAS As Integer, ByVal ID_GERENCIA As Integer) As GERENCIAS_GENERALRow
            Dim rowGERENCIAS_GENERALRow As GERENCIAS_GENERALRow = CType(Me.NewRow,GERENCIAS_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_GERENCIAS_GENERAL, CODIGO, NOMBRE_GERENCIAS, ESTADO_GERENCIAS, ID_GERENCIA}
            rowGERENCIAS_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGERENCIAS_GENERALRow)
            Return rowGERENCIAS_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_GERENCIAS_GENERAL(ByVal ID_GERENCIAS_GENERAL As Integer) As GERENCIAS_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_GERENCIAS_GENERAL}),GERENCIAS_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GERENCIAS_GENERALDataTable = CType(MyBase.Clone,GERENCIAS_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GERENCIAS_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_GERENCIAS_GENERAL = MyBase.Columns("ID_GERENCIAS_GENERAL")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnNOMBRE_GERENCIAS = MyBase.Columns("NOMBRE_GERENCIAS")
            Me.columnESTADO_GERENCIAS = MyBase.Columns("ESTADO_GERENCIAS")
            Me.columnID_GERENCIA = MyBase.Columns("ID_GERENCIA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_GERENCIAS_GENERAL = New Global.System.Data.DataColumn("ID_GERENCIAS_GENERAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_GERENCIAS_GENERAL)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnNOMBRE_GERENCIAS = New Global.System.Data.DataColumn("NOMBRE_GERENCIAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_GERENCIAS)
            Me.columnESTADO_GERENCIAS = New Global.System.Data.DataColumn("ESTADO_GERENCIAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_GERENCIAS)
            Me.columnID_GERENCIA = New Global.System.Data.DataColumn("ID_GERENCIA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_GERENCIA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_GERENCIAS_GENERAL}, true))
            Me.columnID_GERENCIAS_GENERAL.AllowDBNull = false
            Me.columnID_GERENCIAS_GENERAL.Unique = true
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnNOMBRE_GERENCIAS.AllowDBNull = false
            Me.columnNOMBRE_GERENCIAS.MaxLength = 2147483647
            Me.columnESTADO_GERENCIAS.AllowDBNull = false
            Me.columnID_GERENCIA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewGERENCIAS_GENERALRow() As GERENCIAS_GENERALRow
            Return CType(Me.NewRow,GERENCIAS_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GERENCIAS_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GERENCIAS_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GERENCIAS_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent GERENCIAS_GENERALRowChanged(Me, New GERENCIAS_GENERALRowChangeEvent(CType(e.Row,GERENCIAS_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GERENCIAS_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent GERENCIAS_GENERALRowChanging(Me, New GERENCIAS_GENERALRowChangeEvent(CType(e.Row,GERENCIAS_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GERENCIAS_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent GERENCIAS_GENERALRowDeleted(Me, New GERENCIAS_GENERALRowChangeEvent(CType(e.Row,GERENCIAS_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GERENCIAS_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent GERENCIAS_GENERALRowDeleting(Me, New GERENCIAS_GENERALRowChangeEvent(CType(e.Row,GERENCIAS_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveGERENCIAS_GENERALRow(ByVal row As GERENCIAS_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GERENCIAS_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CARGO_OCUPACIONALDataTable
        Inherits Global.System.Data.TypedTableBase(Of CARGO_OCUPACIONALRow)
        
        Private columnID_CARGO_OCUPACIONAL As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnID_SERIE_OCUPACIONAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CARGO_OCUPACIONAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CARGO_OCUPACIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CARGO_OCUPACIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_SERIE_OCUPACIONALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SERIE_OCUPACIONAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CARGO_OCUPACIONALRow
            Get
                Return CType(Me.Rows(index),CARGO_OCUPACIONALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARGO_OCUPACIONALRowChanging As CARGO_OCUPACIONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARGO_OCUPACIONALRowChanged As CARGO_OCUPACIONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARGO_OCUPACIONALRowDeleting As CARGO_OCUPACIONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARGO_OCUPACIONALRowDeleted As CARGO_OCUPACIONALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCARGO_OCUPACIONALRow(ByVal row As CARGO_OCUPACIONALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCARGO_OCUPACIONALRow(ByVal ID_CARGO_OCUPACIONAL As Integer, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal ESTADO As Integer, ByVal ID_SERIE_OCUPACIONAL As Integer) As CARGO_OCUPACIONALRow
            Dim rowCARGO_OCUPACIONALRow As CARGO_OCUPACIONALRow = CType(Me.NewRow,CARGO_OCUPACIONALRow)
            Dim columnValuesArray() As Object = New Object() {ID_CARGO_OCUPACIONAL, CODIGO, DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL}
            rowCARGO_OCUPACIONALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCARGO_OCUPACIONALRow)
            Return rowCARGO_OCUPACIONALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_CARGO_OCUPACIONAL(ByVal ID_CARGO_OCUPACIONAL As Integer) As CARGO_OCUPACIONALRow
            Return CType(Me.Rows.Find(New Object() {ID_CARGO_OCUPACIONAL}),CARGO_OCUPACIONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CARGO_OCUPACIONALDataTable = CType(MyBase.Clone,CARGO_OCUPACIONALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CARGO_OCUPACIONALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_CARGO_OCUPACIONAL = MyBase.Columns("ID_CARGO_OCUPACIONAL")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnID_SERIE_OCUPACIONAL = MyBase.Columns("ID_SERIE_OCUPACIONAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_CARGO_OCUPACIONAL = New Global.System.Data.DataColumn("ID_CARGO_OCUPACIONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CARGO_OCUPACIONAL)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_SERIE_OCUPACIONAL = New Global.System.Data.DataColumn("ID_SERIE_OCUPACIONAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SERIE_OCUPACIONAL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_CARGO_OCUPACIONAL}, true))
            Me.columnID_CARGO_OCUPACIONAL.AllowDBNull = false
            Me.columnID_CARGO_OCUPACIONAL.Unique = true
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
            Me.columnID_SERIE_OCUPACIONAL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCARGO_OCUPACIONALRow() As CARGO_OCUPACIONALRow
            Return CType(Me.NewRow,CARGO_OCUPACIONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CARGO_OCUPACIONALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CARGO_OCUPACIONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CARGO_OCUPACIONALRowChangedEvent) Is Nothing) Then
                RaiseEvent CARGO_OCUPACIONALRowChanged(Me, New CARGO_OCUPACIONALRowChangeEvent(CType(e.Row,CARGO_OCUPACIONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CARGO_OCUPACIONALRowChangingEvent) Is Nothing) Then
                RaiseEvent CARGO_OCUPACIONALRowChanging(Me, New CARGO_OCUPACIONALRowChangeEvent(CType(e.Row,CARGO_OCUPACIONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CARGO_OCUPACIONALRowDeletedEvent) Is Nothing) Then
                RaiseEvent CARGO_OCUPACIONALRowDeleted(Me, New CARGO_OCUPACIONALRowChangeEvent(CType(e.Row,CARGO_OCUPACIONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CARGO_OCUPACIONALRowDeletingEvent) Is Nothing) Then
                RaiseEvent CARGO_OCUPACIONALRowDeleting(Me, New CARGO_OCUPACIONALRowChangeEvent(CType(e.Row,CARGO_OCUPACIONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCARGO_OCUPACIONALRow(ByVal row As CARGO_OCUPACIONALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CARGO_OCUPACIONALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RADIOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of RADIOSRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnNUM_PERMISO_USO As Global.System.Data.DataColumn
        
        Private columnFEC_ACEPTACION_PERMISO As Global.System.Data.DataColumn
        
        Private columnFEC_CADUCIDAD_PERMISO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RADIOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUM_PERMISO_USOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_PERMISO_USO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_ACEPTACION_PERMISOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_ACEPTACION_PERMISO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FEC_CADUCIDAD_PERMISOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_CADUCIDAD_PERMISO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RADIOSRow
            Get
                Return CType(Me.Rows(index),RADIOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RADIOSRowChanging As RADIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RADIOSRowChanged As RADIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RADIOSRowDeleting As RADIOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RADIOSRowDeleted As RADIOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRADIOSRow(ByVal row As RADIOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRADIOSRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_RADIOS_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal SERIE As String, ByVal NUM_PERMISO_USO As String, ByVal FEC_ACEPTACION_PERMISO As Date, ByVal FEC_CADUCIDAD_PERMISO As Date, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal ESTADO As Integer) As RADIOSRow
            Dim rowRADIOSRow As RADIOSRow = CType(Me.NewRow,RADIOSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, SERIE, NUM_PERMISO_USO, FEC_ACEPTACION_PERMISO, FEC_CADUCIDAD_PERMISO, ESTADO_ACTIVO, COLOR, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_RADIOS_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_RADIOS_ACTIVO_FIJO_GENERAL(0)
            End If
            rowRADIOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRADIOSRow)
            Return rowRADIOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RADIOSDataTable = CType(MyBase.Clone,RADIOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RADIOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnNUM_PERMISO_USO = MyBase.Columns("NUM_PERMISO_USO")
            Me.columnFEC_ACEPTACION_PERMISO = MyBase.Columns("FEC_ACEPTACION_PERMISO")
            Me.columnFEC_CADUCIDAD_PERMISO = MyBase.Columns("FEC_CADUCIDAD_PERMISO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnNUM_PERMISO_USO = New Global.System.Data.DataColumn("NUM_PERMISO_USO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_PERMISO_USO)
            Me.columnFEC_ACEPTACION_PERMISO = New Global.System.Data.DataColumn("FEC_ACEPTACION_PERMISO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_ACEPTACION_PERMISO)
            Me.columnFEC_CADUCIDAD_PERMISO = New Global.System.Data.DataColumn("FEC_CADUCIDAD_PERMISO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_CADUCIDAD_PERMISO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnNUM_PERMISO_USO.AllowDBNull = false
            Me.columnNUM_PERMISO_USO.MaxLength = 2147483647
            Me.columnFEC_ACEPTACION_PERMISO.AllowDBNull = false
            Me.columnFEC_CADUCIDAD_PERMISO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRADIOSRow() As RADIOSRow
            Return CType(Me.NewRow,RADIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RADIOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RADIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RADIOSRowChangedEvent) Is Nothing) Then
                RaiseEvent RADIOSRowChanged(Me, New RADIOSRowChangeEvent(CType(e.Row,RADIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RADIOSRowChangingEvent) Is Nothing) Then
                RaiseEvent RADIOSRowChanging(Me, New RADIOSRowChangeEvent(CType(e.Row,RADIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RADIOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent RADIOSRowDeleted(Me, New RADIOSRowChangeEvent(CType(e.Row,RADIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RADIOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent RADIOSRowDeleting(Me, New RADIOSRowChangeEvent(CType(e.Row,RADIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRADIOSRow(ByVal row As RADIOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RADIOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CHALECOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of CHALECOSRow)
        
        Private columnID_ACTIVO_FIJO As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnESTADO_ACTIVO As Global.System.Data.DataColumn
        
        Private columnCOLOR As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnANO As Global.System.Data.DataColumn
        
        Private columnADICIONALES As Global.System.Data.DataColumn
        
        Private columnCADUCIDAD As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CHALECOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ACTIVO_FIJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ACTIVO_FIJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ACTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ACTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADICIONALESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONALES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CADUCIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCADUCIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CHALECOSRow
            Get
                Return CType(Me.Rows(index),CHALECOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHALECOSRowChanging As CHALECOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHALECOSRowChanged As CHALECOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHALECOSRowDeleting As CHALECOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHALECOSRowDeleted As CHALECOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCHALECOSRow(ByVal row As CHALECOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCHALECOSRow(ByVal parentACTIVO_FIJO_GENERALRowByFK_CHALECOS_ACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALRow, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ADICIONALES As String, ByVal CADUCIDAD As Date, ByVal ESTADO As Integer) As CHALECOSRow
            Dim rowCHALECOSRow As CHALECOSRow = CType(Me.NewRow,CHALECOSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO, ADICIONALES, CADUCIDAD, ESTADO}
            If (Not (parentACTIVO_FIJO_GENERALRowByFK_CHALECOS_ACTIVO_FIJO_GENERAL) Is Nothing) Then
                columnValuesArray(0) = parentACTIVO_FIJO_GENERALRowByFK_CHALECOS_ACTIVO_FIJO_GENERAL(0)
            End If
            rowCHALECOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCHALECOSRow)
            Return rowCHALECOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CHALECOSDataTable = CType(MyBase.Clone,CHALECOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CHALECOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ACTIVO_FIJO = MyBase.Columns("ID_ACTIVO_FIJO")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnESTADO_ACTIVO = MyBase.Columns("ESTADO_ACTIVO")
            Me.columnCOLOR = MyBase.Columns("COLOR")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnANO = MyBase.Columns("ANO")
            Me.columnADICIONALES = MyBase.Columns("ADICIONALES")
            Me.columnCADUCIDAD = MyBase.Columns("CADUCIDAD")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ACTIVO_FIJO = New Global.System.Data.DataColumn("ID_ACTIVO_FIJO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ACTIVO_FIJO)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnESTADO_ACTIVO = New Global.System.Data.DataColumn("ESTADO_ACTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ACTIVO)
            Me.columnCOLOR = New Global.System.Data.DataColumn("COLOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLOR)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnANO = New Global.System.Data.DataColumn("ANO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO)
            Me.columnADICIONALES = New Global.System.Data.DataColumn("ADICIONALES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONALES)
            Me.columnCADUCIDAD = New Global.System.Data.DataColumn("CADUCIDAD", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCADUCIDAD)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_ACTIVO_FIJO.AllowDBNull = false
            Me.columnMARCA.AllowDBNull = false
            Me.columnMARCA.MaxLength = 2147483647
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 2147483647
            Me.columnESTADO_ACTIVO.AllowDBNull = false
            Me.columnESTADO_ACTIVO.MaxLength = 2147483647
            Me.columnCOLOR.AllowDBNull = false
            Me.columnCOLOR.MaxLength = 2147483647
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 2147483647
            Me.columnMATERIAL.AllowDBNull = false
            Me.columnMATERIAL.MaxLength = 2147483647
            Me.columnANO.AllowDBNull = false
            Me.columnADICIONALES.AllowDBNull = false
            Me.columnADICIONALES.MaxLength = 2147483647
            Me.columnCADUCIDAD.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCHALECOSRow() As CHALECOSRow
            Return CType(Me.NewRow,CHALECOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CHALECOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CHALECOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CHALECOSRowChangedEvent) Is Nothing) Then
                RaiseEvent CHALECOSRowChanged(Me, New CHALECOSRowChangeEvent(CType(e.Row,CHALECOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CHALECOSRowChangingEvent) Is Nothing) Then
                RaiseEvent CHALECOSRowChanging(Me, New CHALECOSRowChangeEvent(CType(e.Row,CHALECOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CHALECOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CHALECOSRowDeleted(Me, New CHALECOSRowChangeEvent(CType(e.Row,CHALECOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CHALECOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CHALECOSRowDeleting(Me, New CHALECOSRowChangeEvent(CType(e.Row,CHALECOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCHALECOSRow(ByVal row As CHALECOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsActivosFijosGeneral = New dsActivosFijosGeneral()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CHALECOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ACTIVO_FIJO_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableACTIVO_FIJO_GENERAL As ACTIVO_FIJO_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACTIVO_FIJO_GENERAL = CType(Me.Table,ACTIVO_FIJO_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_PERSONAL() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_PERSONALColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_PERSONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_SUCURSAL() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_SUCURSALColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_GERENCIAS() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_GERENCIASColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_GERENCIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_AREA() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ID_AREAColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ID_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CARPETA() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CARPETAColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CARPETAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONTRATO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CONTRATOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CONTRATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_ACTIVO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_PROVEDOR() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_PROVEDORColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_PROVEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_CUSTODIO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_CUSTODIOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NOMBRE_CUSTODIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RESPONSABLE() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.RESPONSABLEColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.RESPONSABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA() As Date
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_ARANCEL() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CODIGO_ARANCELColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CODIGO_ARANCELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_ORDEN_COMPRA() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NUM_ORDEN_COMPRAColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NUM_ORDEN_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_FACTURA() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.NUM_FACTURAColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.NUM_FACTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_FACTURA() As Decimal
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_FACTURAColumn),Decimal)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_FACTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_ADICIONAL() As Decimal
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_ADICIONALColumn),Decimal)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_ADICIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_RESIDUAL() As Decimal
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_RESIDUALColumn),Decimal)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.VALOR_RESIDUALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_ADQUISICION() As Date
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.FECHA_ADQUISICIONColumn),Date)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.FECHA_ADQUISICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property AÑOS_VIDA_UTIL() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.AÑOS_VIDA_UTILColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.AÑOS_VIDA_UTILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CTA_ACTIVO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CTA_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CTA_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CTA_GASTOS() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CTA_GASTOSColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CTA_GASTOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CTA_DEPRECIACION() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.CTA_DEPRECIACIONColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.CTA_DEPRECIACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.TIPO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.TIPO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MANTENIMIENTO() As String
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.MANTENIMIENTOColumn),String)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_MANTENIMIENTO() As Date
            Get
                Return CType(Me(Me.tableACTIVO_FIJO_GENERAL.FECHA_MANTENIMIENTOColumn),Date)
            End Get
            Set
                Me(Me.tableACTIVO_FIJO_GENERAL.FECHA_MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PERSONALRow() As PERSONALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ACTIVO_FIJO_GENERAL_PERSONAL")),PERSONALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ACTIVO_FIJO_GENERAL_PERSONAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property EMPRESA_GENERALRow() As EMPRESA_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EMPRESA_GENERAL_ACTIVO_FIJO_GENERAL")),EMPRESA_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EMPRESA_GENERAL_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property AREA_GENERALRow() As AREA_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AREA_GENERAL_ACTIVO_FIJO_GENERAL")),AREA_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AREA_GENERAL_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SUCURSAL_GENERALRow() As SUCURSAL_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL")),SUCURSAL_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property GERENCIAS_GENERALRow() As GERENCIAS_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("GERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL")),GERENCIAS_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("GERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetARMASRows() As ARMASRow()
            If (Me.Table.ChildRelations("FK_ARMAS_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New ARMASRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ARMAS_ACTIVO_FIJO_GENERAL")),ARMASRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetCAMARAS_SEGURIDADRows() As CAMARAS_SEGURIDADRow()
            If (Me.Table.ChildRelations("FK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New CAMARAS_SEGURIDADRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL")),CAMARAS_SEGURIDADRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetEQUIPOS_AMBIENTACIONRows() As EQUIPOS_AMBIENTACIONRow()
            If (Me.Table.ChildRelations("FK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New EQUIPOS_AMBIENTACIONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL")),EQUIPOS_AMBIENTACIONRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetEQUIPOS_COCINARows() As EQUIPOS_COCINARow()
            If (Me.Table.ChildRelations("FK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New EQUIPOS_COCINARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL")),EQUIPOS_COCINARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetEQUIPOS_COMPUTORows() As EQUIPOS_COMPUTORow()
            If (Me.Table.ChildRelations("FK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New EQUIPOS_COMPUTORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL")),EQUIPOS_COMPUTORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetEQUIPOS_COMUNICACION_TELEFONIARows() As EQUIPOS_COMUNICACION_TELEFONIARow()
            If (Me.Table.ChildRelations("FK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New EQUIPOS_COMUNICACION_TELEFONIARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL")),EQUIPOS_COMUNICACION_TELEFONIARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetEQUIPOS_OFICINARows() As EQUIPOS_OFICINARow()
            If (Me.Table.ChildRelations("FK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New EQUIPOS_OFICINARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL")),EQUIPOS_OFICINARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetEQUIPOS_SEGURIDAD_INDUSTRIALRows() As EQUIPOS_SEGURIDAD_INDUSTRIALRow()
            If (Me.Table.ChildRelations("FK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New EQUIPOS_SEGURIDAD_INDUSTRIALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL")),EQUIPOS_SEGURIDAD_INDUSTRIALRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetGENERADORESRows() As GENERADORESRow()
            If (Me.Table.ChildRelations("FK_GENERADORES_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New GENERADORESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_GENERADORES_ACTIVO_FIJO_GENERAL")),GENERADORESRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetLIBRO_COLECCIONESRows() As LIBRO_COLECCIONESRow()
            If (Me.Table.ChildRelations("FK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New LIBRO_COLECCIONESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL")),LIBRO_COLECCIONESRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetMUEBLES_OFICINARows() As MUEBLES_OFICINARow()
            If (Me.Table.ChildRelations("FK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New MUEBLES_OFICINARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL")),MUEBLES_OFICINARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetSOFTWARERows() As SOFTWARERow()
            If (Me.Table.ChildRelations("FK_SOFTWARE_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New SOFTWARERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SOFTWARE_ACTIVO_FIJO_GENERAL")),SOFTWARERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetVEHICULOSRows() As VEHICULOSRow()
            If (Me.Table.ChildRelations("FK_VEHICULOS_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New VEHICULOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_VEHICULOS_ACTIVO_FIJO_GENERAL")),VEHICULOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetTERRENOSRows() As TERRENOSRow()
            If (Me.Table.ChildRelations("FK_TERRENOS_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New TERRENOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TERRENOS_ACTIVO_FIJO_GENERAL")),TERRENOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRADIOSRows() As RADIOSRow()
            If (Me.Table.ChildRelations("FK_RADIOS_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New RADIOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RADIOS_ACTIVO_FIJO_GENERAL")),RADIOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetCHALECOSRows() As CHALECOSRow()
            If (Me.Table.ChildRelations("FK_CHALECOS_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New CHALECOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CHALECOS_ACTIVO_FIJO_GENERAL")),CHALECOSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ARMASRow
        Inherits Global.System.Data.DataRow
        
        Private tableARMAS As ARMASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableARMAS = CType(Me.Table,ARMASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableARMAS.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableARMAS.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_PERMISO_GOBIERNO() As String
            Get
                Return CType(Me(Me.tableARMAS.NUM_PERMISO_GOBIERNOColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.NUM_PERMISO_GOBIERNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_PERMISO_COMANDO() As String
            Get
                Return CType(Me(Me.tableARMAS.NUM_PERMISO_COMANDOColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.NUM_PERMISO_COMANDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_TENENCIA_ARMAS() As String
            Get
                Return CType(Me(Me.tableARMAS.NUM_TENENCIA_ARMASColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.NUM_TENENCIA_ARMASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_ACEPTACION_TENENCIA() As Date
            Get
                Return CType(Me(Me.tableARMAS.FEC_ACEPTACION_TENENCIAColumn),Date)
            End Get
            Set
                Me(Me.tableARMAS.FEC_ACEPTACION_TENENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_CADUCIDAD_TENENCIA() As Date
            Get
                Return CType(Me(Me.tableARMAS.FEC_CADUCIDAD_TENENCIAColumn),Date)
            End Get
            Set
                Me(Me.tableARMAS.FEC_CADUCIDAD_TENENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_MATRICULA_ARMA() As String
            Get
                Return CType(Me(Me.tableARMAS.NUM_MATRICULA_ARMAColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.NUM_MATRICULA_ARMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_ACEPTACION_MATRICULA() As Date
            Get
                Return CType(Me(Me.tableARMAS.FEC_ACEPTACION_MATRICULAColumn),Date)
            End Get
            Set
                Me(Me.tableARMAS.FEC_ACEPTACION_MATRICULAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_CADUCIDAD_MATRICULA() As Date
            Get
                Return CType(Me(Me.tableARMAS.FEC_CADUCIDAD_MATRICULAColumn),Date)
            End Get
            Set
                Me(Me.tableARMAS.FEC_CADUCIDAD_MATRICULAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableARMAS.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableARMAS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableARMAS.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableARMAS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ARMAS_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ARMAS_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CAMARAS_SEGURIDADRow
        Inherits Global.System.Data.DataRow
        
        Private tableCAMARAS_SEGURIDAD As CAMARAS_SEGURIDADDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCAMARAS_SEGURIDAD = CType(Me.Table,CAMARAS_SEGURIDADDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.COLORColumn),String)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADICIONALES() As String
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.ADICIONALESColumn),String)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.ADICIONALESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableCAMARAS_SEGURIDAD.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableCAMARAS_SEGURIDAD.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CAMARAS_SEGURIDAD_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EQUIPOS_AMBIENTACIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableEQUIPOS_AMBIENTACION As EQUIPOS_AMBIENTACIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEQUIPOS_AMBIENTACION = CType(Me.Table,EQUIPOS_AMBIENTACIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.COLORColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property AMPERAJE() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.AMPERAJEColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.AMPERAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VOLTAJE() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.VOLTAJEColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.VOLTAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.TIPOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_AMBIENTACION.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_AMBIENTACION.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EQUIPOS_AMBIENTACION_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EQUIPOS_COCINARow
        Inherits Global.System.Data.DataRow
        
        Private tableEQUIPOS_COCINA As EQUIPOS_COCINADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEQUIPOS_COCINA = CType(Me.Table,EQUIPOS_COCINADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.COLORColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_COCINA.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_COCINA.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EQUIPOS_COCINA_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EQUIPOS_COMPUTORow
        Inherits Global.System.Data.DataRow
        
        Private tableEQUIPOS_COMPUTO As EQUIPOS_COMPUTODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEQUIPOS_COMPUTO = CType(Me.Table,EQUIPOS_COMPUTODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_COMPUTO.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMPUTO.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMPUTO.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMPUTO.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMPUTO.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMPUTO.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COMPONENTE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMPUTO.COMPONENTEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMPUTO.COMPONENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_COMPONENTE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMPUTO.ESTADO_COMPONENTEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMPUTO.ESTADO_COMPONENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR_COMPONENTE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMPUTO.COLOR_COMPONENTEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMPUTO.COLOR_COMPONENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_COMPONENTE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMPUTO.CODIGO_COMPONENTEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMPUTO.CODIGO_COMPONENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_COMPUTO.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMPUTO.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EQUIPOS_COMPUTO_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EQUIPOS_COMUNICACION_TELEFONIARow
        Inherits Global.System.Data.DataRow
        
        Private tableEQUIPOS_COMUNICACION_TELEFONIA As EQUIPOS_COMUNICACION_TELEFONIADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEQUIPOS_COMUNICACION_TELEFONIA = CType(Me.Table,EQUIPOS_COMUNICACION_TELEFONIADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.COLORColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property INICIO_PERMISO_FRECUENCIA() As Date
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.INICIO_PERMISO_FRECUENCIAColumn),Date)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.INICIO_PERMISO_FRECUENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FINAL_PERMISO_FRECUENCIA() As Date
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.FINAL_PERMISO_FRECUENCIAColumn),Date)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.FINAL_PERMISO_FRECUENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_COMUNICACION_TELEFONIA.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EQUIPOS_COMUNICACION_TELEFONIA_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EQUIPOS_OFICINARow
        Inherits Global.System.Data.DataRow
        
        Private tableEQUIPOS_OFICINA As EQUIPOS_OFICINADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEQUIPOS_OFICINA = CType(Me.Table,EQUIPOS_OFICINADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.COLORColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_OFICINA.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_OFICINA.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EQUIPOS_OFICINA_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EQUIPOS_SEGURIDAD_INDUSTRIALRow
        Inherits Global.System.Data.DataRow
        
        Private tableEQUIPOS_SEGURIDAD_INDUSTRIAL As EQUIPOS_SEGURIDAD_INDUSTRIALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL = CType(Me.Table,EQUIPOS_SEGURIDAD_INDUSTRIALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.COLORColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADICIONAL() As String
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ADICIONALColumn),String)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ADICIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableEQUIPOS_SEGURIDAD_INDUSTRIAL.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EQUIPOS_SEGURIDAD_INDUSTRIAL_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class GENERADORESRow
        Inherits Global.System.Data.DataRow
        
        Private tableGENERADORES As GENERADORESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGENERADORES = CType(Me.Table,GENERADORESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableGENERADORES.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableGENERADORES.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableGENERADORES.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableGENERADORES.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableGENERADORES.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableGENERADORES.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableGENERADORES.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableGENERADORES.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableGENERADORES.COLORColumn),String)
            End Get
            Set
                Me(Me.tableGENERADORES.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableGENERADORES.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableGENERADORES.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableGENERADORES.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableGENERADORES.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property AMPERAJE() As Integer
            Get
                Return CType(Me(Me.tableGENERADORES.AMPERAJEColumn),Integer)
            End Get
            Set
                Me(Me.tableGENERADORES.AMPERAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VOLTAJE() As Integer
            Get
                Return CType(Me(Me.tableGENERADORES.VOLTAJEColumn),Integer)
            End Get
            Set
                Me(Me.tableGENERADORES.VOLTAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Return CType(Me(Me.tableGENERADORES.TIPOColumn),String)
            End Get
            Set
                Me(Me.tableGENERADORES.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableGENERADORES.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableGENERADORES.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADICIONALES() As String
            Get
                Return CType(Me(Me.tableGENERADORES.ADICIONALESColumn),String)
            End Get
            Set
                Me(Me.tableGENERADORES.ADICIONALESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableGENERADORES.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableGENERADORES.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_GENERADORES_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_GENERADORES_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LIBRO_COLECCIONESRow
        Inherits Global.System.Data.DataRow
        
        Private tableLIBRO_COLECCIONES As LIBRO_COLECCIONESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLIBRO_COLECCIONES = CType(Me.Table,LIBRO_COLECCIONESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableLIBRO_COLECCIONES.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableLIBRO_COLECCIONES.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property EDITORIAL() As String
            Get
                Return CType(Me(Me.tableLIBRO_COLECCIONES.EDITORIALColumn),String)
            End Get
            Set
                Me(Me.tableLIBRO_COLECCIONES.EDITORIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property AUTOR() As String
            Get
                Return CType(Me(Me.tableLIBRO_COLECCIONES.AUTORColumn),String)
            End Get
            Set
                Me(Me.tableLIBRO_COLECCIONES.AUTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TOMOS() As Integer
            Get
                Return CType(Me(Me.tableLIBRO_COLECCIONES.TOMOSColumn),Integer)
            End Get
            Set
                Me(Me.tableLIBRO_COLECCIONES.TOMOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANOS_EDICION() As Integer
            Get
                Return CType(Me(Me.tableLIBRO_COLECCIONES.ANOS_EDICIONColumn),Integer)
            End Get
            Set
                Me(Me.tableLIBRO_COLECCIONES.ANOS_EDICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableLIBRO_COLECCIONES.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableLIBRO_COLECCIONES.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_LIBRO_COLECCIONES_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MUEBLES_OFICINARow
        Inherits Global.System.Data.DataRow
        
        Private tableMUEBLES_OFICINA As MUEBLES_OFICINADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMUEBLES_OFICINA = CType(Me.Table,MUEBLES_OFICINADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableMUEBLES_OFICINA.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableMUEBLES_OFICINA.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableMUEBLES_OFICINA.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableMUEBLES_OFICINA.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableMUEBLES_OFICINA.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableMUEBLES_OFICINA.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableMUEBLES_OFICINA.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableMUEBLES_OFICINA.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableMUEBLES_OFICINA.COLORColumn),String)
            End Get
            Set
                Me(Me.tableMUEBLES_OFICINA.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableMUEBLES_OFICINA.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableMUEBLES_OFICINA.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableMUEBLES_OFICINA.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableMUEBLES_OFICINA.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableMUEBLES_OFICINA.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableMUEBLES_OFICINA.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MUEBLES_OFICINA_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SOFTWARERow
        Inherits Global.System.Data.DataRow
        
        Private tableSOFTWARE As SOFTWAREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSOFTWARE = CType(Me.Table,SOFTWAREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableSOFTWARE.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableSOFTWARE.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DETALLE() As String
            Get
                Return CType(Me(Me.tableSOFTWARE.DETALLEColumn),String)
            End Get
            Set
                Me(Me.tableSOFTWARE.DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VERSION() As String
            Get
                Return CType(Me(Me.tableSOFTWARE.VERSIONColumn),String)
            End Get
            Set
                Me(Me.tableSOFTWARE.VERSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PROVEDOR() As String
            Get
                Return CType(Me(Me.tableSOFTWARE.PROVEDORColumn),String)
            End Get
            Set
                Me(Me.tableSOFTWARE.PROVEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Return CType(Me(Me.tableSOFTWARE.TIPOColumn),String)
            End Get
            Set
                Me(Me.tableSOFTWARE.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableSOFTWARE.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableSOFTWARE.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SOFTWARE_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SOFTWARE_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class VEHICULOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableVEHICULOS As VEHICULOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVEHICULOS = CType(Me.Table,VEHICULOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableVEHICULOS.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableVEHICULOS.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CHASIS() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.CHASISColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.CHASISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PLACAS() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.PLACASColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.PLACASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MOTOR() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.MOTORColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.MOTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CILINDRAJE() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.CILINDRAJEColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.CILINDRAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CAPACIDAD() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.CAPACIDADColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.CAPACIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.TIPOColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.COLORColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO_FABRICACION() As Integer
            Get
                Return CType(Me(Me.tableVEHICULOS.ANO_FABRICACIONColumn),Integer)
            End Get
            Set
                Me(Me.tableVEHICULOS.ANO_FABRICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ASEGURADORA() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.ASEGURADORAColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.ASEGURADORAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SEGURO() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.SEGUROColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.SEGUROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BROKER() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.BROKERColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.BROKERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NRO_POLIZA() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.NRO_POLIZAColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.NRO_POLIZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COSTO_PRIMA() As Decimal
            Get
                Return CType(Me(Me.tableVEHICULOS.COSTO_PRIMAColumn),Decimal)
            End Get
            Set
                Me(Me.tableVEHICULOS.COSTO_PRIMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DISPOSITIVO_SEGURIDAD() As String
            Get
                Return CType(Me(Me.tableVEHICULOS.DISPOSITIVO_SEGURIDADColumn),String)
            End Get
            Set
                Me(Me.tableVEHICULOS.DISPOSITIVO_SEGURIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_INICIO_CONTRATO() As Date
            Get
                Return CType(Me(Me.tableVEHICULOS.FECHA_INICIO_CONTRATOColumn),Date)
            End Get
            Set
                Me(Me.tableVEHICULOS.FECHA_INICIO_CONTRATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_FINAL_CONTRATO() As Date
            Get
                Return CType(Me(Me.tableVEHICULOS.FECHA_FINAL_CONTRATOColumn),Date)
            End Get
            Set
                Me(Me.tableVEHICULOS.FECHA_FINAL_CONTRATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_RENOVACION_CONTRATO() As Date
            Get
                Return CType(Me(Me.tableVEHICULOS.FECHA_RENOVACION_CONTRATOColumn),Date)
            End Get
            Set
                Me(Me.tableVEHICULOS.FECHA_RENOVACION_CONTRATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_INICIO_DIS_SEG() As Date
            Get
                Return CType(Me(Me.tableVEHICULOS.FECHA_INICIO_DIS_SEGColumn),Date)
            End Get
            Set
                Me(Me.tableVEHICULOS.FECHA_INICIO_DIS_SEGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_FINAL_DIS_SEG() As Date
            Get
                Return CType(Me(Me.tableVEHICULOS.FECHA_FINAL_DIS_SEGColumn),Date)
            End Get
            Set
                Me(Me.tableVEHICULOS.FECHA_FINAL_DIS_SEGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_RENOVACION_DIS_SEG() As Date
            Get
                Return CType(Me(Me.tableVEHICULOS.FECHA_RENOVACION_DIS_SEGColumn),Date)
            End Get
            Set
                Me(Me.tableVEHICULOS.FECHA_RENOVACION_DIS_SEGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableVEHICULOS.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableVEHICULOS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SOAT() As Date
            Get
                Return CType(Me(Me.tableVEHICULOS.SOATColumn),Date)
            End Get
            Set
                Me(Me.tableVEHICULOS.SOATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_VEHICULOS_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_VEHICULOS_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TERRENOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTERRENOS As TERRENOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTERRENOS = CType(Me.Table,TERRENOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableTERRENOS.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableTERRENOS.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MEDIDA() As Integer
            Get
                Return CType(Me(Me.tableTERRENOS.MEDIDAColumn),Integer)
            End Get
            Set
                Me(Me.tableTERRENOS.MEDIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UBICACION() As String
            Get
                Return CType(Me(Me.tableTERRENOS.UBICACIONColumn),String)
            End Get
            Set
                Me(Me.tableTERRENOS.UBICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_TERRENO() As String
            Get
                Return CType(Me(Me.tableTERRENOS.ESTADO_TERRENOColumn),String)
            End Get
            Set
                Me(Me.tableTERRENOS.ESTADO_TERRENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableTERRENOS.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableTERRENOS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TERRENOS_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TERRENOS_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PERSONALRow
        Inherits Global.System.Data.DataRow
        
        Private tablePERSONAL As PERSONALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePERSONAL = CType(Me.Table,PERSONALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_PERSONAL() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.ID_PERSONALColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.ID_PERSONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CEDULA() As String
            Get
                Return CType(Me(Me.tablePERSONAL.CEDULAColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.CEDULAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRES() As String
            Get
                Return CType(Me(Me.tablePERSONAL.NOMBRESColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.NOMBRESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property APELLIDOS() As String
            Get
                Return CType(Me(Me.tablePERSONAL.APELLIDOSColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.APELLIDOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PROVINCIA() As String
            Get
                Return CType(Me(Me.tablePERSONAL.PROVINCIAColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.PROVINCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DIRECCION() As String
            Get
                Return CType(Me(Me.tablePERSONAL.DIRECCIONColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_NACIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.FECHA_NACIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_NACIMIENTO' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.FECHA_NACIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SEXO() As String
            Get
                Return CType(Me(Me.tablePERSONAL.SEXOColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.SEXOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CIUDAD() As String
            Get
                Return CType(Me(Me.tablePERSONAL.CIUDADColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SUELDO() As Decimal
            Get
                Return CType(Me(Me.tablePERSONAL.SUELDOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERSONAL.SUELDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LIBRETA_MILITAR() As String
            Get
                Return CType(Me(Me.tablePERSONAL.LIBRETA_MILITARColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.LIBRETA_MILITARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_SANGRE() As String
            Get
                Return CType(Me(Me.tablePERSONAL.TIPO_SANGREColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.TIPO_SANGREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PASAPORTE() As String
            Get
                Return CType(Me(Me.tablePERSONAL.PASAPORTEColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.PASAPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PESO() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.PESOColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.PESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property EDAD() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.EDADColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.EDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PRUEBA_ANTIDROGA() As String
            Get
                Return CType(Me(Me.tablePERSONAL.PRUEBA_ANTIDROGAColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.PRUEBA_ANTIDROGAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_ENTRADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.FECHA_ENTRADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_ENTRADA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.FECHA_ENTRADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_SALIDA() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.FECHA_SALIDAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_SALIDA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.FECHA_SALIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_PERSONAL() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.ESTADO_PERSONALColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.ESTADO_PERSONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_AREA() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.ID_AREAColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.ID_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CARGO_OCUPACIONAL() As Integer
            Get
                Return CType(Me(Me.tablePERSONAL.ID_CARGO_OCUPACIONALColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAL.ID_CARGO_OCUPACIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UBICACION() As String
            Get
                Return CType(Me(Me.tablePERSONAL.UBICACIONColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.UBICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property INSTRUCCION() As String
            Get
                Return CType(Me(Me.tablePERSONAL.INSTRUCCIONColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.INSTRUCCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_CIVIL() As String
            Get
                Return CType(Me(Me.tablePERSONAL.ESTADO_CIVILColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.ESTADO_CIVILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MOVIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.MOVILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MOVIL' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.MOVILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TELEFONO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.TELEFONOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TELEFONO' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.TELEFONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CANTIDAD_HIJOS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.CANTIDAD_HIJOSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD_HIJOS' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.CANTIDAD_HIJOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property HISTORIA_CLINICA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.HISTORIA_CLINICAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HISTORIA_CLINICA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.HISTORIA_CLINICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PARROQUIA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.PARROQUIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PARROQUIA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.PARROQUIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTATURA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.ESTATURAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESTATURA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.ESTATURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DISCAPACIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.DISCAPACIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DISCAPACIDAD' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.DISCAPACIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property EXAMEN_PSICOLOGICO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.EXAMEN_PSICOLOGICOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EXAMEN_PSICOLOGICO' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.EXAMEN_PSICOLOGICOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LUGAR_EXAMEN_PSICOLOGICO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.LUGAR_EXAMEN_PSICOLOGICOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LUGAR_EXAMEN_PSICOLOGICO' de la tabla 'PERSONAL' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.LUGAR_EXAMEN_PSICOLOGICOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CARNET_CONADIS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.CARNET_CONADISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CARNET_CONADIS' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.CARNET_CONADISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATOS_HIJOS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.DATOS_HIJOSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DATOS_HIJOS' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.DATOS_HIJOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATOS_ESPOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.DATOS_ESPOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DATOS_ESPOSA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.DATOS_ESPOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CASA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.CASAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CASA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.CASAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ARRIENDO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.ARRIENDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ARRIENDO' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.ARRIENDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DEUDOR_GARANTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.DEUDOR_GARANTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEUDOR_GARANTE' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.DEUDOR_GARANTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CANTIDAD_DEUDA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.CANTIDAD_DEUDAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD_DEUDA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.CANTIDAD_DEUDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property A_QUIEN_ADEUDA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.A_QUIEN_ADEUDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'A_QUIEN_ADEUDA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.A_QUIEN_ADEUDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TRABAJO_ATERIORMENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.TRABAJO_ATERIORMENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TRABAJO_ATERIORMENTE' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.TRABAJO_ATERIORMENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANTERIOR_TRABAJO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.ANTERIOR_TRABAJOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANTERIOR_TRABAJO' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.ANTERIOR_TRABAJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CARGO_ANTERIOR_TRABAJO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.CARGO_ANTERIOR_TRABAJOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CARGO_ANTERIOR_TRABAJO' de la tabla 'PERSONAL' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.CARGO_ANTERIOR_TRABAJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MOTIVO_SALIDA_TRABAJO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.MOTIVO_SALIDA_TRABAJOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MOTIVO_SALIDA_TRABAJO' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.MOTIVO_SALIDA_TRABAJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ENTRADA_ANTERIOR() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.ENTRADA_ANTERIORColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ENTRADA_ANTERIOR' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.ENTRADA_ANTERIORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SALIDA_ANTERIOR() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.SALIDA_ANTERIORColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALIDA_ANTERIOR' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.SALIDA_ANTERIORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRES_PATRONO_ANTERIOR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.NOMBRES_PATRONO_ANTERIORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRES_PATRONO_ANTERIOR' de la tabla 'PERSONAL' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.NOMBRES_PATRONO_ANTERIORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TELEFONO_PATRONO_ANTERIOR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.TELEFONO_PATRONO_ANTERIORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TELEFONO_PATRONO_ANTERIOR' de la tabla 'PERSONAL' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.TELEFONO_PATRONO_ANTERIORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RECOMENDACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.RECOMENDACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RECOMENDACIONES' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.RECOMENDACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATOS_FAMILIARES() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.DATOS_FAMILIARESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DATOS_FAMILIARES' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.DATOS_FAMILIARESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATOS_EMERGENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.DATOS_EMERGENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DATOS_EMERGENCIA' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.DATOS_EMERGENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FOTO() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.FOTOColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOTO' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.FOTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PERFIL() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.PERFILColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PERFIL' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.PERFILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CARGO_OCUPACIONALRow() As CARGO_OCUPACIONALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PERSONAL_CARGO_OCUPACIONAL")),CARGO_OCUPACIONALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PERSONAL_CARGO_OCUPACIONAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_NACIMIENTONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.FECHA_NACIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_NACIMIENTONull()
            Me(Me.tablePERSONAL.FECHA_NACIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_ENTRADANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.FECHA_ENTRADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_ENTRADANull()
            Me(Me.tablePERSONAL.FECHA_ENTRADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_SALIDANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.FECHA_SALIDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_SALIDANull()
            Me(Me.tablePERSONAL.FECHA_SALIDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMOVILNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.MOVILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMOVILNull()
            Me(Me.tablePERSONAL.MOVILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTELEFONONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.TELEFONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTELEFONONull()
            Me(Me.tablePERSONAL.TELEFONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCANTIDAD_HIJOSNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.CANTIDAD_HIJOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCANTIDAD_HIJOSNull()
            Me(Me.tablePERSONAL.CANTIDAD_HIJOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsHISTORIA_CLINICANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.HISTORIA_CLINICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetHISTORIA_CLINICANull()
            Me(Me.tablePERSONAL.HISTORIA_CLINICAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPARROQUIANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.PARROQUIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPARROQUIANull()
            Me(Me.tablePERSONAL.PARROQUIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsESTATURANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.ESTATURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetESTATURANull()
            Me(Me.tablePERSONAL.ESTATURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDISCAPACIDADNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.DISCAPACIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDISCAPACIDADNull()
            Me(Me.tablePERSONAL.DISCAPACIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsEXAMEN_PSICOLOGICONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.EXAMEN_PSICOLOGICOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetEXAMEN_PSICOLOGICONull()
            Me(Me.tablePERSONAL.EXAMEN_PSICOLOGICOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsLUGAR_EXAMEN_PSICOLOGICONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.LUGAR_EXAMEN_PSICOLOGICOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetLUGAR_EXAMEN_PSICOLOGICONull()
            Me(Me.tablePERSONAL.LUGAR_EXAMEN_PSICOLOGICOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCARNET_CONADISNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.CARNET_CONADISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCARNET_CONADISNull()
            Me(Me.tablePERSONAL.CARNET_CONADISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDATOS_HIJOSNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.DATOS_HIJOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDATOS_HIJOSNull()
            Me(Me.tablePERSONAL.DATOS_HIJOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDATOS_ESPOSANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.DATOS_ESPOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDATOS_ESPOSANull()
            Me(Me.tablePERSONAL.DATOS_ESPOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCASANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.CASAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCASANull()
            Me(Me.tablePERSONAL.CASAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsARRIENDONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.ARRIENDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetARRIENDONull()
            Me(Me.tablePERSONAL.ARRIENDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDEUDOR_GARANTENull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.DEUDOR_GARANTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDEUDOR_GARANTENull()
            Me(Me.tablePERSONAL.DEUDOR_GARANTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCANTIDAD_DEUDANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.CANTIDAD_DEUDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCANTIDAD_DEUDANull()
            Me(Me.tablePERSONAL.CANTIDAD_DEUDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsA_QUIEN_ADEUDANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.A_QUIEN_ADEUDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetA_QUIEN_ADEUDANull()
            Me(Me.tablePERSONAL.A_QUIEN_ADEUDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTRABAJO_ATERIORMENTENull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.TRABAJO_ATERIORMENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTRABAJO_ATERIORMENTENull()
            Me(Me.tablePERSONAL.TRABAJO_ATERIORMENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsANTERIOR_TRABAJONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.ANTERIOR_TRABAJOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetANTERIOR_TRABAJONull()
            Me(Me.tablePERSONAL.ANTERIOR_TRABAJOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCARGO_ANTERIOR_TRABAJONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.CARGO_ANTERIOR_TRABAJOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCARGO_ANTERIOR_TRABAJONull()
            Me(Me.tablePERSONAL.CARGO_ANTERIOR_TRABAJOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMOTIVO_SALIDA_TRABAJONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.MOTIVO_SALIDA_TRABAJOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMOTIVO_SALIDA_TRABAJONull()
            Me(Me.tablePERSONAL.MOTIVO_SALIDA_TRABAJOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsENTRADA_ANTERIORNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.ENTRADA_ANTERIORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetENTRADA_ANTERIORNull()
            Me(Me.tablePERSONAL.ENTRADA_ANTERIORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsSALIDA_ANTERIORNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.SALIDA_ANTERIORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetSALIDA_ANTERIORNull()
            Me(Me.tablePERSONAL.SALIDA_ANTERIORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRES_PATRONO_ANTERIORNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.NOMBRES_PATRONO_ANTERIORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRES_PATRONO_ANTERIORNull()
            Me(Me.tablePERSONAL.NOMBRES_PATRONO_ANTERIORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTELEFONO_PATRONO_ANTERIORNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.TELEFONO_PATRONO_ANTERIORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTELEFONO_PATRONO_ANTERIORNull()
            Me(Me.tablePERSONAL.TELEFONO_PATRONO_ANTERIORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsRECOMENDACIONESNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.RECOMENDACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetRECOMENDACIONESNull()
            Me(Me.tablePERSONAL.RECOMENDACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDATOS_FAMILIARESNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.DATOS_FAMILIARESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDATOS_FAMILIARESNull()
            Me(Me.tablePERSONAL.DATOS_FAMILIARESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDATOS_EMERGENCIANull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.DATOS_EMERGENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDATOS_EMERGENCIANull()
            Me(Me.tablePERSONAL.DATOS_EMERGENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFOTONull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.FOTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFOTONull()
            Me(Me.tablePERSONAL.FOTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPERFILNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.PERFILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPERFILNull()
            Me(Me.tablePERSONAL.PERFILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetACTIVO_FIJO_GENERALRows() As ACTIVO_FIJO_GENERALRow()
            If (Me.Table.ChildRelations("FK_ACTIVO_FIJO_GENERAL_PERSONAL") Is Nothing) Then
                Return New ACTIVO_FIJO_GENERALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ACTIVO_FIJO_GENERAL_PERSONAL")),ACTIVO_FIJO_GENERALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EMPRESA_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableEMPRESA_GENERAL As EMPRESA_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEMPRESA_GENERAL = CType(Me.Table,EMPRESA_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.ID_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.ID_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.CODIGO_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.CODIGO_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_EMPRESA() As String
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.NOMBRE_EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.NOMBRE_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RUC_EMPRESA() As String
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.RUC_EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.RUC_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableEMPRESA_GENERAL.ESTADO_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableEMPRESA_GENERAL.ESTADO_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetACTIVO_FIJO_GENERALRows() As ACTIVO_FIJO_GENERALRow()
            If (Me.Table.ChildRelations("EMPRESA_GENERAL_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New ACTIVO_FIJO_GENERALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("EMPRESA_GENERAL_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AREA_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableAREA_GENERAL As AREA_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAREA_GENERAL = CType(Me.Table,AREA_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_AREA_GENERAL() As Integer
            Get
                Return CType(Me(Me.tableAREA_GENERAL.ID_AREA_GENERALColumn),Integer)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.ID_AREA_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tableAREA_GENERAL.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_AREA() As String
            Get
                Return CType(Me(Me.tableAREA_GENERAL.NOMBRE_AREAColumn),String)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.NOMBRE_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_AREA() As Integer
            Get
                Return CType(Me(Me.tableAREA_GENERAL.ESTADO_AREAColumn),Integer)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.ESTADO_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_GERENCIAS_GENERAL() As Integer
            Get
                Return CType(Me(Me.tableAREA_GENERAL.ID_GERENCIAS_GENERALColumn),Integer)
            End Get
            Set
                Me(Me.tableAREA_GENERAL.ID_GERENCIAS_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetACTIVO_FIJO_GENERALRows() As ACTIVO_FIJO_GENERALRow()
            If (Me.Table.ChildRelations("AREA_GENERAL_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New ACTIVO_FIJO_GENERALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AREA_GENERAL_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SUCURSAL_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableSUCURSAL_GENERAL As SUCURSAL_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSUCURSAL_GENERAL = CType(Me.Table,SUCURSAL_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_SUCURSAL() As Integer
            Get
                Return CType(Me(Me.tableSUCURSAL_GENERAL.ID_SUCURSALColumn),Integer)
            End Get
            Set
                Me(Me.tableSUCURSAL_GENERAL.ID_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_SUCURSAL() As String
            Get
                Return CType(Me(Me.tableSUCURSAL_GENERAL.CODIGO_SUCURSALColumn),String)
            End Get
            Set
                Me(Me.tableSUCURSAL_GENERAL.CODIGO_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_SUCURSAL() As String
            Get
                Return CType(Me(Me.tableSUCURSAL_GENERAL.NOMBRE_SUCURSALColumn),String)
            End Get
            Set
                Me(Me.tableSUCURSAL_GENERAL.NOMBRE_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_SUCURSAL() As Integer
            Get
                Return CType(Me(Me.tableSUCURSAL_GENERAL.ESTADO_SUCURSALColumn),Integer)
            End Get
            Set
                Me(Me.tableSUCURSAL_GENERAL.ESTADO_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_EMPRESA() As Integer
            Get
                Return CType(Me(Me.tableSUCURSAL_GENERAL.ID_EMPRESAColumn),Integer)
            End Get
            Set
                Me(Me.tableSUCURSAL_GENERAL.ID_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetACTIVO_FIJO_GENERALRows() As ACTIVO_FIJO_GENERALRow()
            If (Me.Table.ChildRelations("SUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New ACTIVO_FIJO_GENERALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SUCURSAL_GENERAL_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class GERENCIAS_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableGERENCIAS_GENERAL As GERENCIAS_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGERENCIAS_GENERAL = CType(Me.Table,GERENCIAS_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_GERENCIAS_GENERAL() As Integer
            Get
                Return CType(Me(Me.tableGERENCIAS_GENERAL.ID_GERENCIAS_GENERALColumn),Integer)
            End Get
            Set
                Me(Me.tableGERENCIAS_GENERAL.ID_GERENCIAS_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tableGERENCIAS_GENERAL.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableGERENCIAS_GENERAL.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_GERENCIAS() As String
            Get
                Return CType(Me(Me.tableGERENCIAS_GENERAL.NOMBRE_GERENCIASColumn),String)
            End Get
            Set
                Me(Me.tableGERENCIAS_GENERAL.NOMBRE_GERENCIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_GERENCIAS() As Integer
            Get
                Return CType(Me(Me.tableGERENCIAS_GENERAL.ESTADO_GERENCIASColumn),Integer)
            End Get
            Set
                Me(Me.tableGERENCIAS_GENERAL.ESTADO_GERENCIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_GERENCIA() As Integer
            Get
                Return CType(Me(Me.tableGERENCIAS_GENERAL.ID_GERENCIAColumn),Integer)
            End Get
            Set
                Me(Me.tableGERENCIAS_GENERAL.ID_GERENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetACTIVO_FIJO_GENERALRows() As ACTIVO_FIJO_GENERALRow()
            If (Me.Table.ChildRelations("GERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL") Is Nothing) Then
                Return New ACTIVO_FIJO_GENERALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("GERENCIAS_GENERAL_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CARGO_OCUPACIONALRow
        Inherits Global.System.Data.DataRow
        
        Private tableCARGO_OCUPACIONAL As CARGO_OCUPACIONALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCARGO_OCUPACIONAL = CType(Me.Table,CARGO_OCUPACIONALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CARGO_OCUPACIONAL() As Integer
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.ID_CARGO_OCUPACIONALColumn),Integer)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.ID_CARGO_OCUPACIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_SERIE_OCUPACIONAL() As Integer
            Get
                Return CType(Me(Me.tableCARGO_OCUPACIONAL.ID_SERIE_OCUPACIONALColumn),Integer)
            End Get
            Set
                Me(Me.tableCARGO_OCUPACIONAL.ID_SERIE_OCUPACIONALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPERSONALRows() As PERSONALRow()
            If (Me.Table.ChildRelations("FK_PERSONAL_CARGO_OCUPACIONAL") Is Nothing) Then
                Return New PERSONALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PERSONAL_CARGO_OCUPACIONAL")),PERSONALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RADIOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableRADIOS As RADIOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRADIOS = CType(Me.Table,RADIOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableRADIOS.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableRADIOS.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableRADIOS.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableRADIOS.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableRADIOS.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUM_PERMISO_USO() As String
            Get
                Return CType(Me(Me.tableRADIOS.NUM_PERMISO_USOColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.NUM_PERMISO_USOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_ACEPTACION_PERMISO() As Date
            Get
                Return CType(Me(Me.tableRADIOS.FEC_ACEPTACION_PERMISOColumn),Date)
            End Get
            Set
                Me(Me.tableRADIOS.FEC_ACEPTACION_PERMISOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FEC_CADUCIDAD_PERMISO() As Date
            Get
                Return CType(Me(Me.tableRADIOS.FEC_CADUCIDAD_PERMISOColumn),Date)
            End Get
            Set
                Me(Me.tableRADIOS.FEC_CADUCIDAD_PERMISOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableRADIOS.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableRADIOS.COLORColumn),String)
            End Get
            Set
                Me(Me.tableRADIOS.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableRADIOS.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableRADIOS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RADIOS_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RADIOS_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CHALECOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCHALECOS As CHALECOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCHALECOS = CType(Me.Table,CHALECOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ACTIVO_FIJO() As Integer
            Get
                Return CType(Me(Me.tableCHALECOS.ID_ACTIVO_FIJOColumn),Integer)
            End Get
            Set
                Me(Me.tableCHALECOS.ID_ACTIVO_FIJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Return CType(Me(Me.tableCHALECOS.MARCAColumn),String)
            End Get
            Set
                Me(Me.tableCHALECOS.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableCHALECOS.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableCHALECOS.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ACTIVO() As String
            Get
                Return CType(Me(Me.tableCHALECOS.ESTADO_ACTIVOColumn),String)
            End Get
            Set
                Me(Me.tableCHALECOS.ESTADO_ACTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLOR() As String
            Get
                Return CType(Me(Me.tableCHALECOS.COLORColumn),String)
            End Get
            Set
                Me(Me.tableCHALECOS.COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableCHALECOS.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableCHALECOS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MATERIAL() As String
            Get
                Return CType(Me(Me.tableCHALECOS.MATERIALColumn),String)
            End Get
            Set
                Me(Me.tableCHALECOS.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ANO() As Integer
            Get
                Return CType(Me(Me.tableCHALECOS.ANOColumn),Integer)
            End Get
            Set
                Me(Me.tableCHALECOS.ANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADICIONALES() As String
            Get
                Return CType(Me(Me.tableCHALECOS.ADICIONALESColumn),String)
            End Get
            Set
                Me(Me.tableCHALECOS.ADICIONALESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CADUCIDAD() As Date
            Get
                Return CType(Me(Me.tableCHALECOS.CADUCIDADColumn),Date)
            End Get
            Set
                Me(Me.tableCHALECOS.CADUCIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableCHALECOS.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableCHALECOS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ACTIVO_FIJO_GENERALRow() As ACTIVO_FIJO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CHALECOS_ACTIVO_FIJO_GENERAL")),ACTIVO_FIJO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CHALECOS_ACTIVO_FIJO_GENERAL"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class ACTIVO_FIJO_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACTIVO_FIJO_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As ACTIVO_FIJO_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As ACTIVO_FIJO_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class ARMASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ARMASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As ARMASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As ARMASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CAMARAS_SEGURIDADRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CAMARAS_SEGURIDADRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CAMARAS_SEGURIDADRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CAMARAS_SEGURIDADRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class EQUIPOS_AMBIENTACIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EQUIPOS_AMBIENTACIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As EQUIPOS_AMBIENTACIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As EQUIPOS_AMBIENTACIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class EQUIPOS_COCINARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EQUIPOS_COCINARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As EQUIPOS_COCINARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As EQUIPOS_COCINARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class EQUIPOS_COMPUTORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EQUIPOS_COMPUTORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As EQUIPOS_COMPUTORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As EQUIPOS_COMPUTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class EQUIPOS_COMUNICACION_TELEFONIARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EQUIPOS_COMUNICACION_TELEFONIARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As EQUIPOS_COMUNICACION_TELEFONIARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As EQUIPOS_COMUNICACION_TELEFONIARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class EQUIPOS_OFICINARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EQUIPOS_OFICINARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As EQUIPOS_OFICINARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As EQUIPOS_OFICINARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class EQUIPOS_SEGURIDAD_INDUSTRIALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EQUIPOS_SEGURIDAD_INDUSTRIALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As EQUIPOS_SEGURIDAD_INDUSTRIALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As EQUIPOS_SEGURIDAD_INDUSTRIALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class GENERADORESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GENERADORESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As GENERADORESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As GENERADORESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class LIBRO_COLECCIONESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LIBRO_COLECCIONESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As LIBRO_COLECCIONESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As LIBRO_COLECCIONESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class MUEBLES_OFICINARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MUEBLES_OFICINARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As MUEBLES_OFICINARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As MUEBLES_OFICINARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class SOFTWARERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SOFTWARERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As SOFTWARERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As SOFTWARERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class VEHICULOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VEHICULOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As VEHICULOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As VEHICULOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class TERRENOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TERRENOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As TERRENOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As TERRENOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class PERSONALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PERSONALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As PERSONALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As PERSONALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class EMPRESA_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EMPRESA_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As EMPRESA_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As EMPRESA_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class AREA_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AREA_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As AREA_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As AREA_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class SUCURSAL_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SUCURSAL_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As SUCURSAL_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As SUCURSAL_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class GERENCIAS_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GERENCIAS_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As GERENCIAS_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As GERENCIAS_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CARGO_OCUPACIONALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CARGO_OCUPACIONALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CARGO_OCUPACIONALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CARGO_OCUPACIONALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RADIOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RADIOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RADIOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RADIOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CHALECOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CHALECOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CHALECOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CHALECOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsActivosFijosGeneralTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACTIVO_FIJO_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACTIVO_FIJO_GENERAL"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("ID_PERSONAL", "ID_PERSONAL")
            tableMapping.ColumnMappings.Add("ID_EMPRESA", "ID_EMPRESA")
            tableMapping.ColumnMappings.Add("ID_SUCURSAL", "ID_SUCURSAL")
            tableMapping.ColumnMappings.Add("ID_GERENCIAS", "ID_GERENCIAS")
            tableMapping.ColumnMappings.Add("ID_AREA", "ID_AREA")
            tableMapping.ColumnMappings.Add("CARPETA", "CARPETA")
            tableMapping.ColumnMappings.Add("CONTRATO", "CONTRATO")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("NOMBRE_ACTIVO", "NOMBRE_ACTIVO")
            tableMapping.ColumnMappings.Add("NOMBRE_PROVEDOR", "NOMBRE_PROVEDOR")
            tableMapping.ColumnMappings.Add("NOMBRE_CUSTODIO", "NOMBRE_CUSTODIO")
            tableMapping.ColumnMappings.Add("RESPONSABLE", "RESPONSABLE")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("CODIGO_ARANCEL", "CODIGO_ARANCEL")
            tableMapping.ColumnMappings.Add("NUM_ORDEN_COMPRA", "NUM_ORDEN_COMPRA")
            tableMapping.ColumnMappings.Add("NUM_FACTURA", "NUM_FACTURA")
            tableMapping.ColumnMappings.Add("VALOR_FACTURA", "VALOR_FACTURA")
            tableMapping.ColumnMappings.Add("VALOR_ADICIONAL", "VALOR_ADICIONAL")
            tableMapping.ColumnMappings.Add("VALOR_RESIDUAL", "VALOR_RESIDUAL")
            tableMapping.ColumnMappings.Add("FECHA_ADQUISICION", "FECHA_ADQUISICION")
            tableMapping.ColumnMappings.Add("AÑOS_VIDA_UTIL", "AÑOS_VIDA_UTIL")
            tableMapping.ColumnMappings.Add("CTA_ACTIVO", "CTA_ACTIVO")
            tableMapping.ColumnMappings.Add("CTA_GASTOS", "CTA_GASTOS")
            tableMapping.ColumnMappings.Add("CTA_DEPRECIACION", "CTA_DEPRECIACION")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("TIPO_ACTIVO", "TIPO_ACTIVO")
            tableMapping.ColumnMappings.Add("MANTENIMIENTO", "MANTENIMIENTO")
            tableMapping.ColumnMappings.Add("FECHA_MANTENIMIENTO", "FECHA_MANTENIMIENTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ACTIVO_FIJO_GENERAL] WHERE (([ID_ACTIVO_FIJO] = @Original_ID_A"& _ 
                "CTIVO_FIJO) AND ([ID_PERSONAL] = @Original_ID_PERSONAL) AND ([ID_EMPRESA] = @Ori"& _ 
                "ginal_ID_EMPRESA) AND ([ID_SUCURSAL] = @Original_ID_SUCURSAL) AND ([ID_GERENCIAS"& _ 
                "] = @Original_ID_GERENCIAS) AND ([ID_AREA] = @Original_ID_AREA) AND ([FECHA] = @"& _ 
                "Original_FECHA) AND ([VALOR_FACTURA] = @Original_VALOR_FACTURA) AND ([VALOR_ADIC"& _ 
                "IONAL] = @Original_VALOR_ADICIONAL) AND ([VALOR_RESIDUAL] = @Original_VALOR_RESI"& _ 
                "DUAL) AND ([FECHA_ADQUISICION] = @Original_FECHA_ADQUISICION) AND ([AÑOS_VIDA_UT"& _ 
                "IL] = @Original_AÑOS_VIDA_UTIL) AND ([ESTADO] = @Original_ESTADO) AND ([FECHA_MA"& _ 
                "NTENIMIENTO] = @Original_FECHA_MANTENIMIENTO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_FACTURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_FACTURA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_ADICIONAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_ADICIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_RESIDUAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_RESIDUAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ADQUISICION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ADQUISICION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AÑOS_VIDA_UTIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AÑOS_VIDA_UTIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_MANTENIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ACTIVO_FIJO_GENERAL] ([ID_ACTIVO_FIJO], [ID_PERSONAL], [ID_EMP"& _ 
                "RESA], [ID_SUCURSAL], [ID_GERENCIAS], [ID_AREA], [CARPETA], [CONTRATO], [CODIGO]"& _ 
                ", [NOMBRE_ACTIVO], [NOMBRE_PROVEDOR], [NOMBRE_CUSTODIO], [RESPONSABLE], [FECHA],"& _ 
                " [CODIGO_ARANCEL], [NUM_ORDEN_COMPRA], [NUM_FACTURA], [VALOR_FACTURA], [VALOR_AD"& _ 
                "ICIONAL], [VALOR_RESIDUAL], [FECHA_ADQUISICION], [AÑOS_VIDA_UTIL], [CTA_ACTIVO],"& _ 
                " [CTA_GASTOS], [CTA_DEPRECIACION], [ESTADO], [ESTADO_ACTIVO], [TIPO_ACTIVO], [MA"& _ 
                "NTENIMIENTO], [FECHA_MANTENIMIENTO]) VALUES (@ID_ACTIVO_FIJO, @ID_PERSONAL, @ID_"& _ 
                "EMPRESA, @ID_SUCURSAL, @ID_GERENCIAS, @ID_AREA, @CARPETA, @CONTRATO, @CODIGO, @N"& _ 
                "OMBRE_ACTIVO, @NOMBRE_PROVEDOR, @NOMBRE_CUSTODIO, @RESPONSABLE, @FECHA, @CODIGO_"& _ 
                "ARANCEL, @NUM_ORDEN_COMPRA, @NUM_FACTURA, @VALOR_FACTURA, @VALOR_ADICIONAL, @VAL"& _ 
                "OR_RESIDUAL, @FECHA_ADQUISICION, @AÑOS_VIDA_UTIL, @CTA_ACTIVO, @CTA_GASTOS, @CTA"& _ 
                "_DEPRECIACION, @ESTADO, @ESTADO_ACTIVO, @TIPO_ACTIVO, @MANTENIMIENTO, @FECHA_MAN"& _ 
                "TENIMIENTO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_ACTIVO_FIJO, ID_PERSONAL, ID_EMPRESA, ID_SUCURSAL, ID_GE"& _ 
                "RENCIAS, ID_AREA, CARPETA, CONTRATO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, NOM"& _ 
                "BRE_CUSTODIO, RESPONSABLE, FECHA, CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTURA,"& _ 
                " VALOR_FACTURA, VALOR_ADICIONAL, VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_UT"& _ 
                "IL, CTA_ACTIVO, CTA_GASTOS, CTA_DEPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTIVO"& _ 
                ", MANTENIMIENTO, FECHA_MANTENIMIENTO FROM ACTIVO_FIJO_GENERAL WHERE (ID_ACTIVO_F"& _ 
                "IJO = @ID_ACTIVO_FIJO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARPETA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARPETA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTRATO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTRATO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_PROVEDOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_PROVEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_CUSTODIO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_CUSTODIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESPONSABLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESPONSABLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_ARANCEL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_ARANCEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_ORDEN_COMPRA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_ORDEN_COMPRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_FACTURA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_FACTURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_ADICIONAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_ADICIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_RESIDUAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_RESIDUAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ADQUISICION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ADQUISICION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AÑOS_VIDA_UTIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AÑOS_VIDA_UTIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_GASTOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_GASTOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_DEPRECIACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_DEPRECIACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MANTENIMIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_MANTENIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ACTIVO_FIJO_GENERAL] SET [ID_ACTIVO_FIJO] = @ID_ACTIVO_FIJO, [ID_PE"& _ 
                "RSONAL] = @ID_PERSONAL, [ID_EMPRESA] = @ID_EMPRESA, [ID_SUCURSAL] = @ID_SUCURSAL"& _ 
                ", [ID_GERENCIAS] = @ID_GERENCIAS, [ID_AREA] = @ID_AREA, [CARPETA] = @CARPETA, [C"& _ 
                "ONTRATO] = @CONTRATO, [CODIGO] = @CODIGO, [NOMBRE_ACTIVO] = @NOMBRE_ACTIVO, [NOM"& _ 
                "BRE_PROVEDOR] = @NOMBRE_PROVEDOR, [NOMBRE_CUSTODIO] = @NOMBRE_CUSTODIO, [RESPONS"& _ 
                "ABLE] = @RESPONSABLE, [FECHA] = @FECHA, [CODIGO_ARANCEL] = @CODIGO_ARANCEL, [NUM"& _ 
                "_ORDEN_COMPRA] = @NUM_ORDEN_COMPRA, [NUM_FACTURA] = @NUM_FACTURA, [VALOR_FACTURA"& _ 
                "] = @VALOR_FACTURA, [VALOR_ADICIONAL] = @VALOR_ADICIONAL, [VALOR_RESIDUAL] = @VA"& _ 
                "LOR_RESIDUAL, [FECHA_ADQUISICION] = @FECHA_ADQUISICION, [AÑOS_VIDA_UTIL] = @AÑOS"& _ 
                "_VIDA_UTIL, [CTA_ACTIVO] = @CTA_ACTIVO, [CTA_GASTOS] = @CTA_GASTOS, [CTA_DEPRECI"& _ 
                "ACION] = @CTA_DEPRECIACION, [ESTADO] = @ESTADO, [ESTADO_ACTIVO] = @ESTADO_ACTIVO"& _ 
                ", [TIPO_ACTIVO] = @TIPO_ACTIVO, [MANTENIMIENTO] = @MANTENIMIENTO, [FECHA_MANTENI"& _ 
                "MIENTO] = @FECHA_MANTENIMIENTO WHERE (([ID_ACTIVO_FIJO] = @Original_ID_ACTIVO_FI"& _ 
                "JO) AND ([ID_PERSONAL] = @Original_ID_PERSONAL) AND ([ID_EMPRESA] = @Original_ID"& _ 
                "_EMPRESA) AND ([ID_SUCURSAL] = @Original_ID_SUCURSAL) AND ([ID_GERENCIAS] = @Ori"& _ 
                "ginal_ID_GERENCIAS) AND ([ID_AREA] = @Original_ID_AREA) AND ([FECHA] = @Original"& _ 
                "_FECHA) AND ([VALOR_FACTURA] = @Original_VALOR_FACTURA) AND ([VALOR_ADICIONAL] ="& _ 
                " @Original_VALOR_ADICIONAL) AND ([VALOR_RESIDUAL] = @Original_VALOR_RESIDUAL) AN"& _ 
                "D ([FECHA_ADQUISICION] = @Original_FECHA_ADQUISICION) AND ([AÑOS_VIDA_UTIL] = @O"& _ 
                "riginal_AÑOS_VIDA_UTIL) AND ([ESTADO] = @Original_ESTADO) AND ([FECHA_MANTENIMIE"& _ 
                "NTO] = @Original_FECHA_MANTENIMIENTO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_ACTIVO_FIJO, ID_PERSONAL, ID_"& _ 
                "EMPRESA, ID_SUCURSAL, ID_GERENCIAS, ID_AREA, CARPETA, CONTRATO, CODIGO, NOMBRE_A"& _ 
                "CTIVO, NOMBRE_PROVEDOR, NOMBRE_CUSTODIO, RESPONSABLE, FECHA, CODIGO_ARANCEL, NUM"& _ 
                "_ORDEN_COMPRA, NUM_FACTURA, VALOR_FACTURA, VALOR_ADICIONAL, VALOR_RESIDUAL, FECH"& _ 
                "A_ADQUISICION, AÑOS_VIDA_UTIL, CTA_ACTIVO, CTA_GASTOS, CTA_DEPRECIACION, ESTADO,"& _ 
                " ESTADO_ACTIVO, TIPO_ACTIVO, MANTENIMIENTO, FECHA_MANTENIMIENTO FROM ACTIVO_FIJO"& _ 
                "_GENERAL WHERE (ID_ACTIVO_FIJO = @ID_ACTIVO_FIJO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARPETA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARPETA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTRATO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTRATO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_PROVEDOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_PROVEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_CUSTODIO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_CUSTODIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESPONSABLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESPONSABLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_ARANCEL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_ARANCEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_ORDEN_COMPRA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_ORDEN_COMPRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_FACTURA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_FACTURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_ADICIONAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_ADICIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_RESIDUAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_RESIDUAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ADQUISICION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ADQUISICION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AÑOS_VIDA_UTIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AÑOS_VIDA_UTIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_GASTOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_GASTOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_DEPRECIACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_DEPRECIACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MANTENIMIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_MANTENIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_FACTURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_FACTURA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_ADICIONAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_ADICIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_RESIDUAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_RESIDUAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ADQUISICION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ADQUISICION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AÑOS_VIDA_UTIL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AÑOS_VIDA_UTIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_MANTENIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, ID_PERSONAL, ID_EMPRESA, ID_SUCURSAL, ID_GERENCIAS, ID_ARE"& _ 
                "A, CARPETA, CONTRATO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, NOMBRE_CUSTODIO, R"& _ 
                "ESPONSABLE, FECHA, CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTURA, VALOR_FACTURA,"& _ 
                " VALOR_ADICIONAL, VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_UTIL, CTA_ACTIVO,"& _ 
                " CTA_GASTOS, CTA_DEPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTIVO, MANTENIMIENTO"& _ 
                ", FECHA_MANTENIMIENTO FROM dbo.ACTIVO_FIJO_GENERAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.ACTIVO_FIJO_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.ACTIVO_FIJO_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.ACTIVO_FIJO_GENERALDataTable = New dsActivosFijosGeneral.ACTIVO_FIJO_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.ACTIVO_FIJO_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "ACTIVO_FIJO_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_ACTIVO_FIJO As Integer, ByVal Original_ID_PERSONAL As Integer, ByVal Original_ID_EMPRESA As Integer, ByVal Original_ID_SUCURSAL As Integer, ByVal Original_ID_GERENCIAS As Integer, ByVal Original_ID_AREA As Integer, ByVal Original_FECHA As Date, ByVal Original_VALOR_FACTURA As Decimal, ByVal Original_VALOR_ADICIONAL As Decimal, ByVal Original_VALOR_RESIDUAL As Decimal, ByVal Original_FECHA_ADQUISICION As Date, ByVal Original_AÑOS_VIDA_UTIL As Integer, ByVal Original_ESTADO As Integer, ByVal Original_FECHA_MANTENIMIENTO As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_ACTIVO_FIJO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_PERSONAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ID_EMPRESA,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ID_SUCURSAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ID_GERENCIAS,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_AREA,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FECHA,Date)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_VALOR_FACTURA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_VALOR_ADICIONAL,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_VALOR_RESIDUAL,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FECHA_ADQUISICION,Date)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_AÑOS_VIDA_UTIL,Integer)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_FECHA_MANTENIMIENTO,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID_ACTIVO_FIJO As Integer,  _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal ID_SUCURSAL As Integer,  _
                    ByVal ID_GERENCIAS As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal CARPETA As String,  _
                    ByVal CONTRATO As String,  _
                    ByVal CODIGO As String,  _
                    ByVal NOMBRE_ACTIVO As String,  _
                    ByVal NOMBRE_PROVEDOR As String,  _
                    ByVal NOMBRE_CUSTODIO As String,  _
                    ByVal RESPONSABLE As String,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO_ARANCEL As String,  _
                    ByVal NUM_ORDEN_COMPRA As String,  _
                    ByVal NUM_FACTURA As String,  _
                    ByVal VALOR_FACTURA As Decimal,  _
                    ByVal VALOR_ADICIONAL As Decimal,  _
                    ByVal VALOR_RESIDUAL As Decimal,  _
                    ByVal FECHA_ADQUISICION As Date,  _
                    ByVal AÑOS_VIDA_UTIL As Integer,  _
                    ByVal CTA_ACTIVO As String,  _
                    ByVal CTA_GASTOS As String,  _
                    ByVal CTA_DEPRECIACION As String,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal TIPO_ACTIVO As String,  _
                    ByVal MANTENIMIENTO As String,  _
                    ByVal FECHA_MANTENIMIENTO As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_PERSONAL,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ID_SUCURSAL,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_GERENCIAS,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_AREA,Integer)
            If (CARPETA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CARPETA")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CARPETA,String)
            End If
            If (CONTRATO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONTRATO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CONTRATO,String)
            End If
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(NOMBRE_ACTIVO,String)
            End If
            If (NOMBRE_PROVEDOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_PROVEDOR")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(NOMBRE_PROVEDOR,String)
            End If
            If (NOMBRE_CUSTODIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_CUSTODIO")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(NOMBRE_CUSTODIO,String)
            End If
            If (RESPONSABLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RESPONSABLE")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RESPONSABLE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(FECHA,Date)
            If (CODIGO_ARANCEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_ARANCEL")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CODIGO_ARANCEL,String)
            End If
            If (NUM_ORDEN_COMPRA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_ORDEN_COMPRA")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NUM_ORDEN_COMPRA,String)
            End If
            If (NUM_FACTURA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_FACTURA")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NUM_FACTURA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(VALOR_FACTURA,Decimal)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(VALOR_ADICIONAL,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(VALOR_RESIDUAL,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(FECHA_ADQUISICION,Date)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(AÑOS_VIDA_UTIL,Integer)
            If (CTA_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(CTA_ACTIVO,String)
            End If
            If (CTA_GASTOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_GASTOS")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CTA_GASTOS,String)
            End If
            If (CTA_DEPRECIACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_DEPRECIACION")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(CTA_DEPRECIACION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(ESTADO,Integer)
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (TIPO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(TIPO_ACTIVO,String)
            End If
            If (MANTENIMIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MANTENIMIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(MANTENIMIENTO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(FECHA_MANTENIMIENTO,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_ACTIVO_FIJO As Integer,  _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal ID_SUCURSAL As Integer,  _
                    ByVal ID_GERENCIAS As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal CARPETA As String,  _
                    ByVal CONTRATO As String,  _
                    ByVal CODIGO As String,  _
                    ByVal NOMBRE_ACTIVO As String,  _
                    ByVal NOMBRE_PROVEDOR As String,  _
                    ByVal NOMBRE_CUSTODIO As String,  _
                    ByVal RESPONSABLE As String,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO_ARANCEL As String,  _
                    ByVal NUM_ORDEN_COMPRA As String,  _
                    ByVal NUM_FACTURA As String,  _
                    ByVal VALOR_FACTURA As Decimal,  _
                    ByVal VALOR_ADICIONAL As Decimal,  _
                    ByVal VALOR_RESIDUAL As Decimal,  _
                    ByVal FECHA_ADQUISICION As Date,  _
                    ByVal AÑOS_VIDA_UTIL As Integer,  _
                    ByVal CTA_ACTIVO As String,  _
                    ByVal CTA_GASTOS As String,  _
                    ByVal CTA_DEPRECIACION As String,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal TIPO_ACTIVO As String,  _
                    ByVal MANTENIMIENTO As String,  _
                    ByVal FECHA_MANTENIMIENTO As Date,  _
                    ByVal Original_ID_ACTIVO_FIJO As Integer,  _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_ID_EMPRESA As Integer,  _
                    ByVal Original_ID_SUCURSAL As Integer,  _
                    ByVal Original_ID_GERENCIAS As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_FECHA As Date,  _
                    ByVal Original_VALOR_FACTURA As Decimal,  _
                    ByVal Original_VALOR_ADICIONAL As Decimal,  _
                    ByVal Original_VALOR_RESIDUAL As Decimal,  _
                    ByVal Original_FECHA_ADQUISICION As Date,  _
                    ByVal Original_AÑOS_VIDA_UTIL As Integer,  _
                    ByVal Original_ESTADO As Integer,  _
                    ByVal Original_FECHA_MANTENIMIENTO As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_PERSONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ID_SUCURSAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_GERENCIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_AREA,Integer)
            If (CARPETA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CARPETA")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CARPETA,String)
            End If
            If (CONTRATO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONTRATO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CONTRATO,String)
            End If
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_ACTIVO")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(NOMBRE_ACTIVO,String)
            End If
            If (NOMBRE_PROVEDOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_PROVEDOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(NOMBRE_PROVEDOR,String)
            End If
            If (NOMBRE_CUSTODIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_CUSTODIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(NOMBRE_CUSTODIO,String)
            End If
            If (RESPONSABLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RESPONSABLE")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RESPONSABLE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(FECHA,Date)
            If (CODIGO_ARANCEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_ARANCEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CODIGO_ARANCEL,String)
            End If
            If (NUM_ORDEN_COMPRA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_ORDEN_COMPRA")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(NUM_ORDEN_COMPRA,String)
            End If
            If (NUM_FACTURA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_FACTURA")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NUM_FACTURA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(VALOR_FACTURA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(VALOR_ADICIONAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(VALOR_RESIDUAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(FECHA_ADQUISICION,Date)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(AÑOS_VIDA_UTIL,Integer)
            If (CTA_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_ACTIVO")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(CTA_ACTIVO,String)
            End If
            If (CTA_GASTOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_GASTOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CTA_GASTOS,String)
            End If
            If (CTA_DEPRECIACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CTA_DEPRECIACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(CTA_DEPRECIACION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(ESTADO,Integer)
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (TIPO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_ACTIVO")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(TIPO_ACTIVO,String)
            End If
            If (MANTENIMIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MANTENIMIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(MANTENIMIENTO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(FECHA_MANTENIMIENTO,Date)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_ID_ACTIVO_FIJO,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ID_PERSONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_ID_SUCURSAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ID_GERENCIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_ID_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_VALOR_FACTURA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_VALOR_ADICIONAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_VALOR_RESIDUAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_FECHA_ADQUISICION,Date)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_AÑOS_VIDA_UTIL,Integer)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_FECHA_MANTENIMIENTO,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal ID_EMPRESA As Integer,  _
                    ByVal ID_SUCURSAL As Integer,  _
                    ByVal ID_GERENCIAS As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal CARPETA As String,  _
                    ByVal CONTRATO As String,  _
                    ByVal CODIGO As String,  _
                    ByVal NOMBRE_ACTIVO As String,  _
                    ByVal NOMBRE_PROVEDOR As String,  _
                    ByVal NOMBRE_CUSTODIO As String,  _
                    ByVal RESPONSABLE As String,  _
                    ByVal FECHA As Date,  _
                    ByVal CODIGO_ARANCEL As String,  _
                    ByVal NUM_ORDEN_COMPRA As String,  _
                    ByVal NUM_FACTURA As String,  _
                    ByVal VALOR_FACTURA As Decimal,  _
                    ByVal VALOR_ADICIONAL As Decimal,  _
                    ByVal VALOR_RESIDUAL As Decimal,  _
                    ByVal FECHA_ADQUISICION As Date,  _
                    ByVal AÑOS_VIDA_UTIL As Integer,  _
                    ByVal CTA_ACTIVO As String,  _
                    ByVal CTA_GASTOS As String,  _
                    ByVal CTA_DEPRECIACION As String,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal TIPO_ACTIVO As String,  _
                    ByVal MANTENIMIENTO As String,  _
                    ByVal FECHA_MANTENIMIENTO As Date,  _
                    ByVal Original_ID_ACTIVO_FIJO As Integer,  _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_ID_EMPRESA As Integer,  _
                    ByVal Original_ID_SUCURSAL As Integer,  _
                    ByVal Original_ID_GERENCIAS As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_FECHA As Date,  _
                    ByVal Original_VALOR_FACTURA As Decimal,  _
                    ByVal Original_VALOR_ADICIONAL As Decimal,  _
                    ByVal Original_VALOR_RESIDUAL As Decimal,  _
                    ByVal Original_FECHA_ADQUISICION As Date,  _
                    ByVal Original_AÑOS_VIDA_UTIL As Integer,  _
                    ByVal Original_ESTADO As Integer,  _
                    ByVal Original_FECHA_MANTENIMIENTO As Date) As Integer
            Return Me.Update(Original_ID_ACTIVO_FIJO, ID_PERSONAL, ID_EMPRESA, ID_SUCURSAL, ID_GERENCIAS, ID_AREA, CARPETA, CONTRATO, CODIGO, NOMBRE_ACTIVO, NOMBRE_PROVEDOR, NOMBRE_CUSTODIO, RESPONSABLE, FECHA, CODIGO_ARANCEL, NUM_ORDEN_COMPRA, NUM_FACTURA, VALOR_FACTURA, VALOR_ADICIONAL, VALOR_RESIDUAL, FECHA_ADQUISICION, AÑOS_VIDA_UTIL, CTA_ACTIVO, CTA_GASTOS, CTA_DEPRECIACION, ESTADO, ESTADO_ACTIVO, TIPO_ACTIVO, MANTENIMIENTO, FECHA_MANTENIMIENTO, Original_ID_ACTIVO_FIJO, Original_ID_PERSONAL, Original_ID_EMPRESA, Original_ID_SUCURSAL, Original_ID_GERENCIAS, Original_ID_AREA, Original_FECHA, Original_VALOR_FACTURA, Original_VALOR_ADICIONAL, Original_VALOR_RESIDUAL, Original_FECHA_ADQUISICION, Original_AÑOS_VIDA_UTIL, Original_ESTADO, Original_FECHA_MANTENIMIENTO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ARMASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ARMAS"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("NUM_PERMISO_GOBIERNO", "NUM_PERMISO_GOBIERNO")
            tableMapping.ColumnMappings.Add("NUM_PERMISO_COMANDO", "NUM_PERMISO_COMANDO")
            tableMapping.ColumnMappings.Add("NUM_TENENCIA_ARMAS", "NUM_TENENCIA_ARMAS")
            tableMapping.ColumnMappings.Add("FEC_ACEPTACION_TENENCIA", "FEC_ACEPTACION_TENENCIA")
            tableMapping.ColumnMappings.Add("FEC_CADUCIDAD_TENENCIA", "FEC_CADUCIDAD_TENENCIA")
            tableMapping.ColumnMappings.Add("NUM_MATRICULA_ARMA", "NUM_MATRICULA_ARMA")
            tableMapping.ColumnMappings.Add("FEC_ACEPTACION_MATRICULA", "FEC_ACEPTACION_MATRICULA")
            tableMapping.ColumnMappings.Add("FEC_CADUCIDAD_MATRICULA", "FEC_CADUCIDAD_MATRICULA")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ARMAS] ([ID_ACTIVO_FIJO], [NUM_PERMISO_GOBIERNO], [NUM_PERMISO"& _ 
                "_COMANDO], [NUM_TENENCIA_ARMAS], [FEC_ACEPTACION_TENENCIA], [FEC_CADUCIDAD_TENEN"& _ 
                "CIA], [NUM_MATRICULA_ARMA], [FEC_ACEPTACION_MATRICULA], [FEC_CADUCIDAD_MATRICULA"& _ 
                "], [SERIE], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @NUM_PERMISO_GOBIERNO, @NUM_PERMI"& _ 
                "SO_COMANDO, @NUM_TENENCIA_ARMAS, @FEC_ACEPTACION_TENENCIA, @FEC_CADUCIDAD_TENENC"& _ 
                "IA, @NUM_MATRICULA_ARMA, @FEC_ACEPTACION_MATRICULA, @FEC_CADUCIDAD_MATRICULA, @S"& _ 
                "ERIE, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_PERMISO_GOBIERNO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_PERMISO_GOBIERNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_PERMISO_COMANDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_PERMISO_COMANDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_TENENCIA_ARMAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_TENENCIA_ARMAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_ACEPTACION_TENENCIA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_ACEPTACION_TENENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_CADUCIDAD_TENENCIA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_CADUCIDAD_TENENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_MATRICULA_ARMA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_MATRICULA_ARMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_ACEPTACION_MATRICULA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_ACEPTACION_MATRICULA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_CADUCIDAD_MATRICULA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_CADUCIDAD_MATRICULA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, NUM_PERMISO_GOBIERNO, NUM_PERMISO_COMANDO, NUM_TENENCIA_AR"& _ 
                "MAS, FEC_ACEPTACION_TENENCIA, FEC_CADUCIDAD_TENENCIA, NUM_MATRICULA_ARMA, FEC_AC"& _ 
                "EPTACION_MATRICULA, FEC_CADUCIDAD_MATRICULA, SERIE, ESTADO FROM dbo.ARMAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.ARMASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.ARMASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.ARMASDataTable = New dsActivosFijosGeneral.ARMASDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.ARMASDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "ARMAS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal NUM_PERMISO_GOBIERNO As String, ByVal NUM_PERMISO_COMANDO As String, ByVal NUM_TENENCIA_ARMAS As String, ByVal FEC_ACEPTACION_TENENCIA As Date, ByVal FEC_CADUCIDAD_TENENCIA As Date, ByVal NUM_MATRICULA_ARMA As String, ByVal FEC_ACEPTACION_MATRICULA As Date, ByVal FEC_CADUCIDAD_MATRICULA As Date, ByVal SERIE As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (NUM_PERMISO_GOBIERNO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_PERMISO_GOBIERNO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NUM_PERMISO_GOBIERNO,String)
            End If
            If (NUM_PERMISO_COMANDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_PERMISO_COMANDO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NUM_PERMISO_COMANDO,String)
            End If
            If (NUM_TENENCIA_ARMAS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_TENENCIA_ARMAS")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NUM_TENENCIA_ARMAS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FEC_ACEPTACION_TENENCIA,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(FEC_CADUCIDAD_TENENCIA,Date)
            If (NUM_MATRICULA_ARMA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_MATRICULA_ARMA")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NUM_MATRICULA_ARMA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(FEC_ACEPTACION_MATRICULA,Date)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(FEC_CADUCIDAD_MATRICULA,Date)
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SERIE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CAMARAS_SEGURIDADTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CAMARAS_SEGURIDAD"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("ADICIONALES", "ADICIONALES")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CAMARAS_SEGURIDAD] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [ESTA"& _ 
                "DO_ACTIVO], [COLOR], [SERIE], [MATERIAL], [ANO], [ADICIONALES], [ESTADO]) VALUES"& _ 
                " (@ID_ACTIVO_FIJO, @MARCA, @MODELO, @ESTADO_ACTIVO, @COLOR, @SERIE, @MATERIAL, @"& _ 
                "ANO, @ADICIONALES, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADICIONALES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADICIONALES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO,"& _ 
                " ADICIONALES, ESTADO FROM dbo.CAMARAS_SEGURIDAD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.CAMARAS_SEGURIDADDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.CAMARAS_SEGURIDADDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.CAMARAS_SEGURIDADDataTable = New dsActivosFijosGeneral.CAMARAS_SEGURIDADDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.CAMARAS_SEGURIDADDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "CAMARAS_SEGURIDAD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ADICIONALES As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIE,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ANO,Integer)
            If (ADICIONALES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONALES")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ADICIONALES,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EQUIPOS_AMBIENTACIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EQUIPOS_AMBIENTACION"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("AMPERAJE", "AMPERAJE")
            tableMapping.ColumnMappings.Add("VOLTAJE", "VOLTAJE")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EQUIPOS_AMBIENTACION] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [E"& _ 
                "STADO_ACTIVO], [COLOR], [SERIE], [MATERIAL], [AMPERAJE], [VOLTAJE], [TIPO], [ANO"& _ 
                "], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @MARCA, @MODELO, @ESTADO_ACTIVO, @COLOR, @"& _ 
                "SERIE, @MATERIAL, @AMPERAJE, @VOLTAJE, @TIPO, @ANO, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMPERAJE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMPERAJE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOLTAJE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOLTAJE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, AMPE"& _ 
                "RAJE, VOLTAJE, TIPO, ANO, ESTADO FROM dbo.EQUIPOS_AMBIENTACION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_AMBIENTACIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.EQUIPOS_AMBIENTACIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.EQUIPOS_AMBIENTACIONDataTable = New dsActivosFijosGeneral.EQUIPOS_AMBIENTACIONDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_AMBIENTACIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "EQUIPOS_AMBIENTACION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal AMPERAJE As Integer, ByVal VOLTAJE As Integer, ByVal TIPO As String, ByVal ANO As Integer, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIE,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(AMPERAJE,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(VOLTAJE,Integer)
            If (TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TIPO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ANO,Integer)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EQUIPOS_COCINATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EQUIPOS_COCINA"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EQUIPOS_COCINA] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [ESTADO_"& _ 
                "ACTIVO], [COLOR], [SERIE], [MATERIAL], [ANO], [ESTADO]) VALUES (@ID_ACTIVO_FIJO,"& _ 
                " @MARCA, @MODELO, @ESTADO_ACTIVO, @COLOR, @SERIE, @MATERIAL, @ANO, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO,"& _ 
                " ESTADO FROM dbo.EQUIPOS_COCINA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_COCINADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.EQUIPOS_COCINADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.EQUIPOS_COCINADataTable = New dsActivosFijosGeneral.EQUIPOS_COCINADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_COCINADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "EQUIPOS_COCINA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIE,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ANO,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EQUIPOS_COMPUTOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EQUIPOS_COMPUTO"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("COMPONENTE", "COMPONENTE")
            tableMapping.ColumnMappings.Add("ESTADO_COMPONENTE", "ESTADO_COMPONENTE")
            tableMapping.ColumnMappings.Add("COLOR_COMPONENTE", "COLOR_COMPONENTE")
            tableMapping.ColumnMappings.Add("CODIGO_COMPONENTE", "CODIGO_COMPONENTE")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EQUIPOS_COMPUTO] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [COMPON"& _ 
                "ENTE], [ESTADO_COMPONENTE], [COLOR_COMPONENTE], [CODIGO_COMPONENTE], [ESTADO]) V"& _ 
                "ALUES (@ID_ACTIVO_FIJO, @MARCA, @MODELO, @COMPONENTE, @ESTADO_COMPONENTE, @COLOR"& _ 
                "_COMPONENTE, @CODIGO_COMPONENTE, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPONENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPONENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_COMPONENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_COMPONENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR_COMPONENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR_COMPONENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_COMPONENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_COMPONENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, COMPONENTE, ESTADO_COMPONENTE, COLOR_COMPON"& _ 
                "ENTE, CODIGO_COMPONENTE, ESTADO FROM dbo.EQUIPOS_COMPUTO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_COMPUTODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.EQUIPOS_COMPUTODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.EQUIPOS_COMPUTODataTable = New dsActivosFijosGeneral.EQUIPOS_COMPUTODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_COMPUTODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "EQUIPOS_COMPUTO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal COMPONENTE As String, ByVal ESTADO_COMPONENTE As String, ByVal COLOR_COMPONENTE As String, ByVal CODIGO_COMPONENTE As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (COMPONENTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COMPONENTE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COMPONENTE,String)
            End If
            If (ESTADO_COMPONENTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_COMPONENTE")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ESTADO_COMPONENTE,String)
            End If
            If (COLOR_COMPONENTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR_COMPONENTE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(COLOR_COMPONENTE,String)
            End If
            If (CODIGO_COMPONENTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_COMPONENTE")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CODIGO_COMPONENTE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EQUIPOS_COMUNICACION_TELEFONIATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EQUIPOS_COMUNICACION_TELEFONIA"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("INICIO_PERMISO_FRECUENCIA", "INICIO_PERMISO_FRECUENCIA")
            tableMapping.ColumnMappings.Add("FINAL_PERMISO_FRECUENCIA", "FINAL_PERMISO_FRECUENCIA")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EQUIPOS_COMUNICACION_TELEFONIA] ([ID_ACTIVO_FIJO], [MARCA], [M"& _ 
                "ODELO], [ESTADO_ACTIVO], [COLOR], [SERIE], [MATERIAL], [ANO], [INICIO_PERMISO_FR"& _ 
                "ECUENCIA], [FINAL_PERMISO_FRECUENCIA], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @MARCA"& _ 
                ", @MODELO, @ESTADO_ACTIVO, @COLOR, @SERIE, @MATERIAL, @ANO, @INICIO_PERMISO_FREC"& _ 
                "UENCIA, @FINAL_PERMISO_FRECUENCIA, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INICIO_PERMISO_FRECUENCIA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INICIO_PERMISO_FRECUENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAL_PERMISO_FRECUENCIA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAL_PERMISO_FRECUENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO,"& _ 
                " INICIO_PERMISO_FRECUENCIA, FINAL_PERMISO_FRECUENCIA, ESTADO FROM dbo.EQUIPOS_CO"& _ 
                "MUNICACION_TELEFONIA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_COMUNICACION_TELEFONIADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.EQUIPOS_COMUNICACION_TELEFONIADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.EQUIPOS_COMUNICACION_TELEFONIADataTable = New dsActivosFijosGeneral.EQUIPOS_COMUNICACION_TELEFONIADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_COMUNICACION_TELEFONIADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "EQUIPOS_COMUNICACION_TELEFONIA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal INICIO_PERMISO_FRECUENCIA As Date, ByVal FINAL_PERMISO_FRECUENCIA As Date, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIE,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ANO,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(INICIO_PERMISO_FRECUENCIA,Date)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(FINAL_PERMISO_FRECUENCIA,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EQUIPOS_OFICINATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EQUIPOS_OFICINA"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EQUIPOS_OFICINA] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [ESTADO"& _ 
                "_ACTIVO], [COLOR], [SERIE], [MATERIAL], [ANO], [ESTADO]) VALUES (@ID_ACTIVO_FIJO"& _ 
                ", @MARCA, @MODELO, @ESTADO_ACTIVO, @COLOR, @SERIE, @MATERIAL, @ANO, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO,"& _ 
                " ESTADO FROM dbo.EQUIPOS_OFICINA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_OFICINADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.EQUIPOS_OFICINADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.EQUIPOS_OFICINADataTable = New dsActivosFijosGeneral.EQUIPOS_OFICINADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_OFICINADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "EQUIPOS_OFICINA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIE,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ANO,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EQUIPOS_SEGURIDAD_INDUSTRIAL"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("ADICIONAL", "ADICIONAL")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EQUIPOS_SEGURIDAD_INDUSTRIAL] ([ID_ACTIVO_FIJO], [MARCA], [MOD"& _ 
                "ELO], [ESTADO_ACTIVO], [COLOR], [SERIE], [MATERIAL], [ANO], [ADICIONAL], [ESTADO"& _ 
                "]) VALUES (@ID_ACTIVO_FIJO, @MARCA, @MODELO, @ESTADO_ACTIVO, @COLOR, @SERIE, @MA"& _ 
                "TERIAL, @ANO, @ADICIONAL, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADICIONAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADICIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO,"& _ 
                " ADICIONAL, ESTADO FROM dbo.EQUIPOS_SEGURIDAD_INDUSTRIAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_SEGURIDAD_INDUSTRIALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.EQUIPOS_SEGURIDAD_INDUSTRIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.EQUIPOS_SEGURIDAD_INDUSTRIALDataTable = New dsActivosFijosGeneral.EQUIPOS_SEGURIDAD_INDUSTRIALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.EQUIPOS_SEGURIDAD_INDUSTRIALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "EQUIPOS_SEGURIDAD_INDUSTRIAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ADICIONAL As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIE,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ANO,Integer)
            If (ADICIONAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONAL")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ADICIONAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GENERADORESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GENERADORES"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("AMPERAJE", "AMPERAJE")
            tableMapping.ColumnMappings.Add("VOLTAJE", "VOLTAJE")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("ADICIONALES", "ADICIONALES")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[GENERADORES] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [ESTADO_ACT"& _ 
                "IVO], [COLOR], [SERIE], [MATERIAL], [AMPERAJE], [VOLTAJE], [TIPO], [ANO], [ADICI"& _ 
                "ONALES], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @MARCA, @MODELO, @ESTADO_ACTIVO, @CO"& _ 
                "LOR, @SERIE, @MATERIAL, @AMPERAJE, @VOLTAJE, @TIPO, @ANO, @ADICIONALES, @ESTADO)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMPERAJE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMPERAJE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOLTAJE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOLTAJE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADICIONALES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADICIONALES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, AMPE"& _ 
                "RAJE, VOLTAJE, TIPO, ANO, ADICIONALES, ESTADO FROM dbo.GENERADORES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.GENERADORESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.GENERADORESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.GENERADORESDataTable = New dsActivosFijosGeneral.GENERADORESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.GENERADORESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "GENERADORES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal AMPERAJE As Integer, ByVal VOLTAJE As Integer, ByVal TIPO As String, ByVal ANO As Integer, ByVal ADICIONALES As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIE,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(AMPERAJE,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(VOLTAJE,Integer)
            If (TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TIPO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ANO,Integer)
            If (ADICIONALES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONALES")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ADICIONALES,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LIBRO_COLECCIONESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LIBRO_COLECCIONES"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("EDITORIAL", "EDITORIAL")
            tableMapping.ColumnMappings.Add("AUTOR", "AUTOR")
            tableMapping.ColumnMappings.Add("TOMOS", "TOMOS")
            tableMapping.ColumnMappings.Add("ANOS_EDICION", "ANOS_EDICION")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LIBRO_COLECCIONES] ([ID_ACTIVO_FIJO], [EDITORIAL], [AUTOR], [T"& _ 
                "OMOS], [ANOS_EDICION], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @EDITORIAL, @AUTOR, @T"& _ 
                "OMOS, @ANOS_EDICION, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EDITORIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDITORIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AUTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AUTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOMOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOMOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANOS_EDICION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANOS_EDICION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, EDITORIAL, AUTOR, TOMOS, ANOS_EDICION, ESTADO FROM dbo.LIB"& _ 
                "RO_COLECCIONES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.LIBRO_COLECCIONESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.LIBRO_COLECCIONESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.LIBRO_COLECCIONESDataTable = New dsActivosFijosGeneral.LIBRO_COLECCIONESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.LIBRO_COLECCIONESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "LIBRO_COLECCIONES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal EDITORIAL As String, ByVal AUTOR As String, ByVal TOMOS As Integer, ByVal ANOS_EDICION As Integer, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (EDITORIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EDITORIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(EDITORIAL,String)
            End If
            If (AUTOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AUTOR")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AUTOR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(TOMOS,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ANOS_EDICION,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MUEBLES_OFICINATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MUEBLES_OFICINA"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MUEBLES_OFICINA] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [ESTADO"& _ 
                "_ACTIVO], [COLOR], [MATERIAL], [ANO], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @MARCA,"& _ 
                " @MODELO, @ESTADO_ACTIVO, @COLOR, @MATERIAL, @ANO, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, MATERIAL, ANO, ESTADO"& _ 
                " FROM dbo.MUEBLES_OFICINA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.MUEBLES_OFICINADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.MUEBLES_OFICINADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.MUEBLES_OFICINADataTable = New dsActivosFijosGeneral.MUEBLES_OFICINADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.MUEBLES_OFICINADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "MUEBLES_OFICINA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(ANO,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SOFTWARETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SOFTWARE"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("DETALLE", "DETALLE")
            tableMapping.ColumnMappings.Add("VERSION", "VERSION")
            tableMapping.ColumnMappings.Add("PROVEDOR", "PROVEDOR")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SOFTWARE] ([ID_ACTIVO_FIJO], [DETALLE], [VERSION], [PROVEDOR],"& _ 
                " [TIPO], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @DETALLE, @VERSION, @PROVEDOR, @TIPO"& _ 
                ", @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETALLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETALLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERSION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVEDOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVEDOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, DETALLE, VERSION, PROVEDOR, TIPO, ESTADO FROM dbo.SOFTWARE"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.SOFTWAREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.SOFTWAREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.SOFTWAREDataTable = New dsActivosFijosGeneral.SOFTWAREDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.SOFTWAREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "SOFTWARE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal DETALLE As String, ByVal VERSION As String, ByVal PROVEDOR As String, ByVal TIPO As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (DETALLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DETALLE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DETALLE,String)
            End If
            If (VERSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VERSION")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(VERSION,String)
            End If
            If (PROVEDOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVEDOR")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PROVEDOR,String)
            End If
            If (TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TIPO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VEHICULOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VEHICULOS"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("CHASIS", "CHASIS")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("PLACAS", "PLACAS")
            tableMapping.ColumnMappings.Add("MOTOR", "MOTOR")
            tableMapping.ColumnMappings.Add("CILINDRAJE", "CILINDRAJE")
            tableMapping.ColumnMappings.Add("CAPACIDAD", "CAPACIDAD")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("ANO_FABRICACION", "ANO_FABRICACION")
            tableMapping.ColumnMappings.Add("ASEGURADORA", "ASEGURADORA")
            tableMapping.ColumnMappings.Add("SEGURO", "SEGURO")
            tableMapping.ColumnMappings.Add("BROKER", "BROKER")
            tableMapping.ColumnMappings.Add("NRO_POLIZA", "NRO_POLIZA")
            tableMapping.ColumnMappings.Add("COSTO_PRIMA", "COSTO_PRIMA")
            tableMapping.ColumnMappings.Add("DISPOSITIVO_SEGURIDAD", "DISPOSITIVO_SEGURIDAD")
            tableMapping.ColumnMappings.Add("FECHA_INICIO_CONTRATO", "FECHA_INICIO_CONTRATO")
            tableMapping.ColumnMappings.Add("FECHA_FINAL_CONTRATO", "FECHA_FINAL_CONTRATO")
            tableMapping.ColumnMappings.Add("FECHA_RENOVACION_CONTRATO", "FECHA_RENOVACION_CONTRATO")
            tableMapping.ColumnMappings.Add("FECHA_INICIO_DIS_SEG", "FECHA_INICIO_DIS_SEG")
            tableMapping.ColumnMappings.Add("FECHA_FINAL_DIS_SEG", "FECHA_FINAL_DIS_SEG")
            tableMapping.ColumnMappings.Add("FECHA_RENOVACION_DIS_SEG", "FECHA_RENOVACION_DIS_SEG")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            tableMapping.ColumnMappings.Add("SOAT", "SOAT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VEHICULOS] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [SERIE], [CHA"& _ 
                "SIS], [ESTADO_ACTIVO], [PLACAS], [MOTOR], [CILINDRAJE], [CAPACIDAD], [TIPO], [CO"& _ 
                "LOR], [ANO_FABRICACION], [ASEGURADORA], [SEGURO], [BROKER], [NRO_POLIZA], [COSTO"& _ 
                "_PRIMA], [DISPOSITIVO_SEGURIDAD], [FECHA_INICIO_CONTRATO], [FECHA_FINAL_CONTRATO"& _ 
                "], [FECHA_RENOVACION_CONTRATO], [FECHA_INICIO_DIS_SEG], [FECHA_FINAL_DIS_SEG], ["& _ 
                "FECHA_RENOVACION_DIS_SEG], [ESTADO], [SOAT]) VALUES (@ID_ACTIVO_FIJO, @MARCA, @M"& _ 
                "ODELO, @SERIE, @CHASIS, @ESTADO_ACTIVO, @PLACAS, @MOTOR, @CILINDRAJE, @CAPACIDAD"& _ 
                ", @TIPO, @COLOR, @ANO_FABRICACION, @ASEGURADORA, @SEGURO, @BROKER, @NRO_POLIZA, "& _ 
                "@COSTO_PRIMA, @DISPOSITIVO_SEGURIDAD, @FECHA_INICIO_CONTRATO, @FECHA_FINAL_CONTR"& _ 
                "ATO, @FECHA_RENOVACION_CONTRATO, @FECHA_INICIO_DIS_SEG, @FECHA_FINAL_DIS_SEG, @F"& _ 
                "ECHA_RENOVACION_DIS_SEG, @ESTADO, @SOAT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHASIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHASIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLACAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLACAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CILINDRAJE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CILINDRAJE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAPACIDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAPACIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO_FABRICACION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO_FABRICACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASEGURADORA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASEGURADORA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEGURO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEGURO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BROKER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BROKER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_POLIZA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_POLIZA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSTO_PRIMA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "COSTO_PRIMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISPOSITIVO_SEGURIDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISPOSITIVO_SEGURIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_INICIO_CONTRATO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_CONTRATO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_FINAL_CONTRATO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FINAL_CONTRATO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_RENOVACION_CONTRATO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_RENOVACION_CONTRATO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_INICIO_DIS_SEG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO_DIS_SEG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_FINAL_DIS_SEG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_FINAL_DIS_SEG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_RENOVACION_DIS_SEG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_RENOVACION_DIS_SEG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOAT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, SERIE, CHASIS, ESTADO_ACTIVO, PLACAS, MOTOR"& _ 
                ", CILINDRAJE, CAPACIDAD, TIPO, COLOR, ANO_FABRICACION, ASEGURADORA, SEGURO, BROK"& _ 
                "ER, NRO_POLIZA, COSTO_PRIMA, DISPOSITIVO_SEGURIDAD, FECHA_INICIO_CONTRATO, FECHA"& _ 
                "_FINAL_CONTRATO, FECHA_RENOVACION_CONTRATO, FECHA_INICIO_DIS_SEG, FECHA_FINAL_DI"& _ 
                "S_SEG, FECHA_RENOVACION_DIS_SEG, ESTADO, SOAT FROM dbo.VEHICULOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.VEHICULOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.VEHICULOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.VEHICULOSDataTable = New dsActivosFijosGeneral.VEHICULOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.VEHICULOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "VEHICULOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID_ACTIVO_FIJO As Integer,  _
                    ByVal MARCA As String,  _
                    ByVal MODELO As String,  _
                    ByVal SERIE As String,  _
                    ByVal CHASIS As String,  _
                    ByVal ESTADO_ACTIVO As String,  _
                    ByVal PLACAS As String,  _
                    ByVal MOTOR As String,  _
                    ByVal CILINDRAJE As String,  _
                    ByVal CAPACIDAD As String,  _
                    ByVal TIPO As String,  _
                    ByVal COLOR As String,  _
                    ByVal ANO_FABRICACION As Integer,  _
                    ByVal ASEGURADORA As String,  _
                    ByVal SEGURO As String,  _
                    ByVal BROKER As String,  _
                    ByVal NRO_POLIZA As String,  _
                    ByVal COSTO_PRIMA As Decimal,  _
                    ByVal DISPOSITIVO_SEGURIDAD As String,  _
                    ByVal FECHA_INICIO_CONTRATO As Date,  _
                    ByVal FECHA_FINAL_CONTRATO As Date,  _
                    ByVal FECHA_RENOVACION_CONTRATO As Date,  _
                    ByVal FECHA_INICIO_DIS_SEG As Date,  _
                    ByVal FECHA_FINAL_DIS_SEG As Date,  _
                    ByVal FECHA_RENOVACION_DIS_SEG As Date,  _
                    ByVal ESTADO As Integer,  _
                    ByVal SOAT As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SERIE,String)
            End If
            If (CHASIS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CHASIS")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CHASIS,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (PLACAS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLACAS")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PLACAS,String)
            End If
            If (MOTOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MOTOR")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MOTOR,String)
            End If
            If (CILINDRAJE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CILINDRAJE")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CILINDRAJE,String)
            End If
            If (CAPACIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CAPACIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CAPACIDAD,String)
            End If
            If (TIPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(TIPO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(COLOR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ANO_FABRICACION,Integer)
            If (ASEGURADORA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ASEGURADORA")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ASEGURADORA,String)
            End If
            If (SEGURO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SEGURO")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SEGURO,String)
            End If
            If (BROKER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BROKER")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(BROKER,String)
            End If
            If (NRO_POLIZA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NRO_POLIZA")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NRO_POLIZA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(COSTO_PRIMA,Decimal)
            If (DISPOSITIVO_SEGURIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DISPOSITIVO_SEGURIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(DISPOSITIVO_SEGURIDAD,String)
            End If
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(FECHA_INICIO_CONTRATO,Date)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(FECHA_FINAL_CONTRATO,Date)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(FECHA_RENOVACION_CONTRATO,Date)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(FECHA_INICIO_DIS_SEG,Date)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(FECHA_FINAL_DIS_SEG,Date)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(FECHA_RENOVACION_DIS_SEG,Date)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(ESTADO,Integer)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(SOAT,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TERRENOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TERRENOS"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MEDIDA", "MEDIDA")
            tableMapping.ColumnMappings.Add("UBICACION", "UBICACION")
            tableMapping.ColumnMappings.Add("ESTADO_TERRENO", "ESTADO_TERRENO")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TERRENOS] ([ID_ACTIVO_FIJO], [MEDIDA], [UBICACION], [ESTADO_TE"& _ 
                "RRENO], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @MEDIDA, @UBICACION, @ESTADO_TERRENO,"& _ 
                " @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDIDA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDIDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UBICACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UBICACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_TERRENO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_TERRENO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MEDIDA, UBICACION, ESTADO_TERRENO, ESTADO FROM dbo.TERRENO"& _ 
                "S"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.TERRENOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.TERRENOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.TERRENOSDataTable = New dsActivosFijosGeneral.TERRENOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.TERRENOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "TERRENOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MEDIDA As Integer, ByVal UBICACION As String, ByVal ESTADO_TERRENO As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MEDIDA,Integer)
            If (UBICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UBICACION")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UBICACION,String)
            End If
            If (ESTADO_TERRENO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_TERRENO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_TERRENO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PERSONALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PERSONAL"
            tableMapping.ColumnMappings.Add("ID_PERSONAL", "ID_PERSONAL")
            tableMapping.ColumnMappings.Add("CEDULA", "CEDULA")
            tableMapping.ColumnMappings.Add("NOMBRES", "NOMBRES")
            tableMapping.ColumnMappings.Add("APELLIDOS", "APELLIDOS")
            tableMapping.ColumnMappings.Add("PROVINCIA", "PROVINCIA")
            tableMapping.ColumnMappings.Add("DIRECCION", "DIRECCION")
            tableMapping.ColumnMappings.Add("FECHA_NACIMIENTO", "FECHA_NACIMIENTO")
            tableMapping.ColumnMappings.Add("SEXO", "SEXO")
            tableMapping.ColumnMappings.Add("CIUDAD", "CIUDAD")
            tableMapping.ColumnMappings.Add("SUELDO", "SUELDO")
            tableMapping.ColumnMappings.Add("LIBRETA_MILITAR", "LIBRETA_MILITAR")
            tableMapping.ColumnMappings.Add("TIPO_SANGRE", "TIPO_SANGRE")
            tableMapping.ColumnMappings.Add("PASAPORTE", "PASAPORTE")
            tableMapping.ColumnMappings.Add("PESO", "PESO")
            tableMapping.ColumnMappings.Add("EDAD", "EDAD")
            tableMapping.ColumnMappings.Add("PRUEBA_ANTIDROGA", "PRUEBA_ANTIDROGA")
            tableMapping.ColumnMappings.Add("FECHA_ENTRADA", "FECHA_ENTRADA")
            tableMapping.ColumnMappings.Add("FECHA_SALIDA", "FECHA_SALIDA")
            tableMapping.ColumnMappings.Add("ESTADO_PERSONAL", "ESTADO_PERSONAL")
            tableMapping.ColumnMappings.Add("ID_AREA", "ID_AREA")
            tableMapping.ColumnMappings.Add("ID_CARGO_OCUPACIONAL", "ID_CARGO_OCUPACIONAL")
            tableMapping.ColumnMappings.Add("UBICACION", "UBICACION")
            tableMapping.ColumnMappings.Add("INSTRUCCION", "INSTRUCCION")
            tableMapping.ColumnMappings.Add("ESTADO_CIVIL", "ESTADO_CIVIL")
            tableMapping.ColumnMappings.Add("MOVIL", "MOVIL")
            tableMapping.ColumnMappings.Add("TELEFONO", "TELEFONO")
            tableMapping.ColumnMappings.Add("CANTIDAD_HIJOS", "CANTIDAD_HIJOS")
            tableMapping.ColumnMappings.Add("HISTORIA_CLINICA", "HISTORIA_CLINICA")
            tableMapping.ColumnMappings.Add("PARROQUIA", "PARROQUIA")
            tableMapping.ColumnMappings.Add("ESTATURA", "ESTATURA")
            tableMapping.ColumnMappings.Add("DISCAPACIDAD", "DISCAPACIDAD")
            tableMapping.ColumnMappings.Add("EXAMEN_PSICOLOGICO", "EXAMEN_PSICOLOGICO")
            tableMapping.ColumnMappings.Add("LUGAR_EXAMEN_PSICOLOGICO", "LUGAR_EXAMEN_PSICOLOGICO")
            tableMapping.ColumnMappings.Add("CARNET_CONADIS", "CARNET_CONADIS")
            tableMapping.ColumnMappings.Add("DATOS_HIJOS", "DATOS_HIJOS")
            tableMapping.ColumnMappings.Add("DATOS_ESPOSA", "DATOS_ESPOSA")
            tableMapping.ColumnMappings.Add("CASA", "CASA")
            tableMapping.ColumnMappings.Add("ARRIENDO", "ARRIENDO")
            tableMapping.ColumnMappings.Add("DEUDOR_GARANTE", "DEUDOR_GARANTE")
            tableMapping.ColumnMappings.Add("CANTIDAD_DEUDA", "CANTIDAD_DEUDA")
            tableMapping.ColumnMappings.Add("A_QUIEN_ADEUDA", "A_QUIEN_ADEUDA")
            tableMapping.ColumnMappings.Add("TRABAJO_ATERIORMENTE", "TRABAJO_ATERIORMENTE")
            tableMapping.ColumnMappings.Add("ANTERIOR_TRABAJO", "ANTERIOR_TRABAJO")
            tableMapping.ColumnMappings.Add("CARGO_ANTERIOR_TRABAJO", "CARGO_ANTERIOR_TRABAJO")
            tableMapping.ColumnMappings.Add("MOTIVO_SALIDA_TRABAJO", "MOTIVO_SALIDA_TRABAJO")
            tableMapping.ColumnMappings.Add("ENTRADA_ANTERIOR", "ENTRADA_ANTERIOR")
            tableMapping.ColumnMappings.Add("SALIDA_ANTERIOR", "SALIDA_ANTERIOR")
            tableMapping.ColumnMappings.Add("NOMBRES_PATRONO_ANTERIOR", "NOMBRES_PATRONO_ANTERIOR")
            tableMapping.ColumnMappings.Add("TELEFONO_PATRONO_ANTERIOR", "TELEFONO_PATRONO_ANTERIOR")
            tableMapping.ColumnMappings.Add("RECOMENDACIONES", "RECOMENDACIONES")
            tableMapping.ColumnMappings.Add("DATOS_FAMILIARES", "DATOS_FAMILIARES")
            tableMapping.ColumnMappings.Add("DATOS_EMERGENCIA", "DATOS_EMERGENCIA")
            tableMapping.ColumnMappings.Add("FOTO", "FOTO")
            tableMapping.ColumnMappings.Add("PERFIL", "PERFIL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PERSONAL] WHERE (([ID_PERSONAL] = @Original_ID_PERSONAL) AND ("& _ 
                "[CEDULA] = @Original_CEDULA) AND ((@IsNull_FECHA_NACIMIENTO = 1 AND [FECHA_NACIM"& _ 
                "IENTO] IS NULL) OR ([FECHA_NACIMIENTO] = @Original_FECHA_NACIMIENTO)) AND ([SEXO"& _ 
                "] = @Original_SEXO) AND ([SUELDO] = @Original_SUELDO) AND ([LIBRETA_MILITAR] = @"& _ 
                "Original_LIBRETA_MILITAR) AND ([TIPO_SANGRE] = @Original_TIPO_SANGRE) AND ([PASA"& _ 
                "PORTE] = @Original_PASAPORTE) AND ([PESO] = @Original_PESO) AND ([EDAD] = @Origi"& _ 
                "nal_EDAD) AND ([PRUEBA_ANTIDROGA] = @Original_PRUEBA_ANTIDROGA) AND ((@IsNull_FE"& _ 
                "CHA_ENTRADA = 1 AND [FECHA_ENTRADA] IS NULL) OR ([FECHA_ENTRADA] = @Original_FEC"& _ 
                "HA_ENTRADA)) AND ((@IsNull_FECHA_SALIDA = 1 AND [FECHA_SALIDA] IS NULL) OR ([FEC"& _ 
                "HA_SALIDA] = @Original_FECHA_SALIDA)) AND ([ESTADO_PERSONAL] = @Original_ESTADO_"& _ 
                "PERSONAL) AND ([ID_AREA] = @Original_ID_AREA) AND ([ID_CARGO_OCUPACIONAL] = @Ori"& _ 
                "ginal_ID_CARGO_OCUPACIONAL) AND ([ESTADO_CIVIL] = @Original_ESTADO_CIVIL) AND (("& _ 
                "@IsNull_CANTIDAD_HIJOS = 1 AND [CANTIDAD_HIJOS] IS NULL) OR ([CANTIDAD_HIJOS] = "& _ 
                "@Original_CANTIDAD_HIJOS)) AND ((@IsNull_ESTATURA = 1 AND [ESTATURA] IS NULL) OR"& _ 
                " ([ESTATURA] = @Original_ESTATURA)) AND ((@IsNull_CANTIDAD_DEUDA = 1 AND [CANTID"& _ 
                "AD_DEUDA] IS NULL) OR ([CANTIDAD_DEUDA] = @Original_CANTIDAD_DEUDA)) AND ((@IsNu"& _ 
                "ll_ENTRADA_ANTERIOR = 1 AND [ENTRADA_ANTERIOR] IS NULL) OR ([ENTRADA_ANTERIOR] ="& _ 
                " @Original_ENTRADA_ANTERIOR)) AND ((@IsNull_SALIDA_ANTERIOR = 1 AND [SALIDA_ANTE"& _ 
                "RIOR] IS NULL) OR ([SALIDA_ANTERIOR] = @Original_SALIDA_ANTERIOR)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEDULA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEDULA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_NACIMIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_NACIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUELDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUELDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIBRETA_MILITAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIBRETA_MILITAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIPO_SANGRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_SANGRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PASAPORTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PASAPORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PESO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PESO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDAD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRUEBA_ANTIDROGA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRUEBA_ANTIDROGA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_ENTRADA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ENTRADA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_SALIDA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_SALIDA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_CIVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CIVIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CANTIDAD_HIJOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD_HIJOS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CANTIDAD_HIJOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD_HIJOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ESTATURA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTATURA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTATURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ESTATURA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CANTIDAD_DEUDA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD_DEUDA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CANTIDAD_DEUDA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CANTIDAD_DEUDA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENTRADA_ANTERIOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRADA_ANTERIOR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENTRADA_ANTERIOR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRADA_ANTERIOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SALIDA_ANTERIOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALIDA_ANTERIOR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SALIDA_ANTERIOR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALIDA_ANTERIOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PERSONAL] ([ID_PERSONAL], [CEDULA], [NOMBRES], [APELLIDOS], [P"& _ 
                "ROVINCIA], [DIRECCION], [FECHA_NACIMIENTO], [SEXO], [CIUDAD], [SUELDO], [LIBRETA"& _ 
                "_MILITAR], [TIPO_SANGRE], [PASAPORTE], [PESO], [EDAD], [PRUEBA_ANTIDROGA], [FECH"& _ 
                "A_ENTRADA], [FECHA_SALIDA], [ESTADO_PERSONAL], [ID_AREA], [ID_CARGO_OCUPACIONAL]"& _ 
                ", [UBICACION], [INSTRUCCION], [ESTADO_CIVIL], [MOVIL], [TELEFONO], [CANTIDAD_HIJ"& _ 
                "OS], [HISTORIA_CLINICA], [PARROQUIA], [ESTATURA], [DISCAPACIDAD], [EXAMEN_PSICOL"& _ 
                "OGICO], [LUGAR_EXAMEN_PSICOLOGICO], [CARNET_CONADIS], [DATOS_HIJOS], [DATOS_ESPO"& _ 
                "SA], [CASA], [ARRIENDO], [DEUDOR_GARANTE], [CANTIDAD_DEUDA], [A_QUIEN_ADEUDA], ["& _ 
                "TRABAJO_ATERIORMENTE], [ANTERIOR_TRABAJO], [CARGO_ANTERIOR_TRABAJO], [MOTIVO_SAL"& _ 
                "IDA_TRABAJO], [ENTRADA_ANTERIOR], [SALIDA_ANTERIOR], [NOMBRES_PATRONO_ANTERIOR],"& _ 
                " [TELEFONO_PATRONO_ANTERIOR], [RECOMENDACIONES], [DATOS_FAMILIARES], [DATOS_EMER"& _ 
                "GENCIA], [FOTO], [PERFIL]) VALUES (@ID_PERSONAL, @CEDULA, @NOMBRES, @APELLIDOS, "& _ 
                "@PROVINCIA, @DIRECCION, @FECHA_NACIMIENTO, @SEXO, @CIUDAD, @SUELDO, @LIBRETA_MIL"& _ 
                "ITAR, @TIPO_SANGRE, @PASAPORTE, @PESO, @EDAD, @PRUEBA_ANTIDROGA, @FECHA_ENTRADA,"& _ 
                " @FECHA_SALIDA, @ESTADO_PERSONAL, @ID_AREA, @ID_CARGO_OCUPACIONAL, @UBICACION, @"& _ 
                "INSTRUCCION, @ESTADO_CIVIL, @MOVIL, @TELEFONO, @CANTIDAD_HIJOS, @HISTORIA_CLINIC"& _ 
                "A, @PARROQUIA, @ESTATURA, @DISCAPACIDAD, @EXAMEN_PSICOLOGICO, @LUGAR_EXAMEN_PSIC"& _ 
                "OLOGICO, @CARNET_CONADIS, @DATOS_HIJOS, @DATOS_ESPOSA, @CASA, @ARRIENDO, @DEUDOR"& _ 
                "_GARANTE, @CANTIDAD_DEUDA, @A_QUIEN_ADEUDA, @TRABAJO_ATERIORMENTE, @ANTERIOR_TRA"& _ 
                "BAJO, @CARGO_ANTERIOR_TRABAJO, @MOTIVO_SALIDA_TRABAJO, @ENTRADA_ANTERIOR, @SALID"& _ 
                "A_ANTERIOR, @NOMBRES_PATRONO_ANTERIOR, @TELEFONO_PATRONO_ANTERIOR, @RECOMENDACIO"& _ 
                "NES, @DATOS_FAMILIARES, @DATOS_EMERGENCIA, @FOTO, @PERFIL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PERSONAL,"& _ 
                " CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIMIENTO, SEXO, CIUDA"& _ 
                "D, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD, PRUEBA_ANTIDROGA"& _ 
                ", FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, ID_CARGO_OCUPACIONAL, U"& _ 
                "BICACION, INSTRUCCION, ESTADO_CIVIL, MOVIL, TELEFONO, CANTIDAD_HIJOS, HISTORIA_C"& _ 
                "LINICA, PARROQUIA, ESTATURA, DISCAPACIDAD, EXAMEN_PSICOLOGICO, LUGAR_EXAMEN_PSIC"& _ 
                "OLOGICO, CARNET_CONADIS, DATOS_HIJOS, DATOS_ESPOSA, CASA, ARRIENDO, DEUDOR_GARAN"& _ 
                "TE, CANTIDAD_DEUDA, A_QUIEN_ADEUDA, TRABAJO_ATERIORMENTE, ANTERIOR_TRABAJO, CARG"& _ 
                "O_ANTERIOR_TRABAJO, MOTIVO_SALIDA_TRABAJO, ENTRADA_ANTERIOR, SALIDA_ANTERIOR, NO"& _ 
                "MBRES_PATRONO_ANTERIOR, TELEFONO_PATRONO_ANTERIOR, RECOMENDACIONES, DATOS_FAMILI"& _ 
                "ARES, DATOS_EMERGENCIA, FOTO, PERFIL FROM PERSONAL WHERE (ID_PERSONAL = @ID_PERS"& _ 
                "ONAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEDULA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEDULA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@APELLIDOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "APELLIDOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCIA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_NACIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CIUDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CIUDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUELDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUELDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIBRETA_MILITAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIBRETA_MILITAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_SANGRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_SANGRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PASAPORTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PASAPORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PESO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PESO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRUEBA_ANTIDROGA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRUEBA_ANTIDROGA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ENTRADA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_SALIDA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UBICACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UBICACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUCCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUCCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_CIVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CIVIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOVIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TELEFONO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CANTIDAD_HIJOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD_HIJOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HISTORIA_CLINICA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HISTORIA_CLINICA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARROQUIA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARROQUIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTATURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ESTATURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCAPACIDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCAPACIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXAMEN_PSICOLOGICO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXAMEN_PSICOLOGICO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LUGAR_EXAMEN_PSICOLOGICO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LUGAR_EXAMEN_PSICOLOGICO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARNET_CONADIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARNET_CONADIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATOS_HIJOS", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATOS_HIJOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATOS_ESPOSA", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATOS_ESPOSA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CASA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CASA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ARRIENDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ARRIENDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEUDOR_GARANTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEUDOR_GARANTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CANTIDAD_DEUDA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CANTIDAD_DEUDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@A_QUIEN_ADEUDA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "A_QUIEN_ADEUDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRABAJO_ATERIORMENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRABAJO_ATERIORMENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANTERIOR_TRABAJO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANTERIOR_TRABAJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARGO_ANTERIOR_TRABAJO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARGO_ANTERIOR_TRABAJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOTIVO_SALIDA_TRABAJO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOTIVO_SALIDA_TRABAJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENTRADA_ANTERIOR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRADA_ANTERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALIDA_ANTERIOR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALIDA_ANTERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRES_PATRONO_ANTERIOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRES_PATRONO_ANTERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TELEFONO_PATRONO_ANTERIOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEFONO_PATRONO_ANTERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECOMENDACIONES", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECOMENDACIONES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATOS_FAMILIARES", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATOS_FAMILIARES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATOS_EMERGENCIA", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATOS_EMERGENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOTO", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERFIL", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERFIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PERSONAL] SET [ID_PERSONAL] = @ID_PERSONAL, [CEDULA] = @CEDULA, [NO"& _ 
                "MBRES] = @NOMBRES, [APELLIDOS] = @APELLIDOS, [PROVINCIA] = @PROVINCIA, [DIRECCIO"& _ 
                "N] = @DIRECCION, [FECHA_NACIMIENTO] = @FECHA_NACIMIENTO, [SEXO] = @SEXO, [CIUDAD"& _ 
                "] = @CIUDAD, [SUELDO] = @SUELDO, [LIBRETA_MILITAR] = @LIBRETA_MILITAR, [TIPO_SAN"& _ 
                "GRE] = @TIPO_SANGRE, [PASAPORTE] = @PASAPORTE, [PESO] = @PESO, [EDAD] = @EDAD, ["& _ 
                "PRUEBA_ANTIDROGA] = @PRUEBA_ANTIDROGA, [FECHA_ENTRADA] = @FECHA_ENTRADA, [FECHA_"& _ 
                "SALIDA] = @FECHA_SALIDA, [ESTADO_PERSONAL] = @ESTADO_PERSONAL, [ID_AREA] = @ID_A"& _ 
                "REA, [ID_CARGO_OCUPACIONAL] = @ID_CARGO_OCUPACIONAL, [UBICACION] = @UBICACION, ["& _ 
                "INSTRUCCION] = @INSTRUCCION, [ESTADO_CIVIL] = @ESTADO_CIVIL, [MOVIL] = @MOVIL, ["& _ 
                "TELEFONO] = @TELEFONO, [CANTIDAD_HIJOS] = @CANTIDAD_HIJOS, [HISTORIA_CLINICA] = "& _ 
                "@HISTORIA_CLINICA, [PARROQUIA] = @PARROQUIA, [ESTATURA] = @ESTATURA, [DISCAPACID"& _ 
                "AD] = @DISCAPACIDAD, [EXAMEN_PSICOLOGICO] = @EXAMEN_PSICOLOGICO, [LUGAR_EXAMEN_P"& _ 
                "SICOLOGICO] = @LUGAR_EXAMEN_PSICOLOGICO, [CARNET_CONADIS] = @CARNET_CONADIS, [DA"& _ 
                "TOS_HIJOS] = @DATOS_HIJOS, [DATOS_ESPOSA] = @DATOS_ESPOSA, [CASA] = @CASA, [ARRI"& _ 
                "ENDO] = @ARRIENDO, [DEUDOR_GARANTE] = @DEUDOR_GARANTE, [CANTIDAD_DEUDA] = @CANTI"& _ 
                "DAD_DEUDA, [A_QUIEN_ADEUDA] = @A_QUIEN_ADEUDA, [TRABAJO_ATERIORMENTE] = @TRABAJO"& _ 
                "_ATERIORMENTE, [ANTERIOR_TRABAJO] = @ANTERIOR_TRABAJO, [CARGO_ANTERIOR_TRABAJO] "& _ 
                "= @CARGO_ANTERIOR_TRABAJO, [MOTIVO_SALIDA_TRABAJO] = @MOTIVO_SALIDA_TRABAJO, [EN"& _ 
                "TRADA_ANTERIOR] = @ENTRADA_ANTERIOR, [SALIDA_ANTERIOR] = @SALIDA_ANTERIOR, [NOMB"& _ 
                "RES_PATRONO_ANTERIOR] = @NOMBRES_PATRONO_ANTERIOR, [TELEFONO_PATRONO_ANTERIOR] ="& _ 
                " @TELEFONO_PATRONO_ANTERIOR, [RECOMENDACIONES] = @RECOMENDACIONES, [DATOS_FAMILI"& _ 
                "ARES] = @DATOS_FAMILIARES, [DATOS_EMERGENCIA] = @DATOS_EMERGENCIA, [FOTO] = @FOT"& _ 
                "O, [PERFIL] = @PERFIL WHERE (([ID_PERSONAL] = @Original_ID_PERSONAL) AND ([CEDUL"& _ 
                "A] = @Original_CEDULA) AND ((@IsNull_FECHA_NACIMIENTO = 1 AND [FECHA_NACIMIENTO]"& _ 
                " IS NULL) OR ([FECHA_NACIMIENTO] = @Original_FECHA_NACIMIENTO)) AND ([SEXO] = @O"& _ 
                "riginal_SEXO) AND ([SUELDO] = @Original_SUELDO) AND ([LIBRETA_MILITAR] = @Origin"& _ 
                "al_LIBRETA_MILITAR) AND ([TIPO_SANGRE] = @Original_TIPO_SANGRE) AND ([PASAPORTE]"& _ 
                " = @Original_PASAPORTE) AND ([PESO] = @Original_PESO) AND ([EDAD] = @Original_ED"& _ 
                "AD) AND ([PRUEBA_ANTIDROGA] = @Original_PRUEBA_ANTIDROGA) AND ((@IsNull_FECHA_EN"& _ 
                "TRADA = 1 AND [FECHA_ENTRADA] IS NULL) OR ([FECHA_ENTRADA] = @Original_FECHA_ENT"& _ 
                "RADA)) AND ((@IsNull_FECHA_SALIDA = 1 AND [FECHA_SALIDA] IS NULL) OR ([FECHA_SAL"& _ 
                "IDA] = @Original_FECHA_SALIDA)) AND ([ESTADO_PERSONAL] = @Original_ESTADO_PERSON"& _ 
                "AL) AND ([ID_AREA] = @Original_ID_AREA) AND ([ID_CARGO_OCUPACIONAL] = @Original_"& _ 
                "ID_CARGO_OCUPACIONAL) AND ([ESTADO_CIVIL] = @Original_ESTADO_CIVIL) AND ((@IsNul"& _ 
                "l_CANTIDAD_HIJOS = 1 AND [CANTIDAD_HIJOS] IS NULL) OR ([CANTIDAD_HIJOS] = @Origi"& _ 
                "nal_CANTIDAD_HIJOS)) AND ((@IsNull_ESTATURA = 1 AND [ESTATURA] IS NULL) OR ([EST"& _ 
                "ATURA] = @Original_ESTATURA)) AND ((@IsNull_CANTIDAD_DEUDA = 1 AND [CANTIDAD_DEU"& _ 
                "DA] IS NULL) OR ([CANTIDAD_DEUDA] = @Original_CANTIDAD_DEUDA)) AND ((@IsNull_ENT"& _ 
                "RADA_ANTERIOR = 1 AND [ENTRADA_ANTERIOR] IS NULL) OR ([ENTRADA_ANTERIOR] = @Orig"& _ 
                "inal_ENTRADA_ANTERIOR)) AND ((@IsNull_SALIDA_ANTERIOR = 1 AND [SALIDA_ANTERIOR] "& _ 
                "IS NULL) OR ([SALIDA_ANTERIOR] = @Original_SALIDA_ANTERIOR)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PERSON"& _ 
                "AL, CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIMIENTO, SEXO, CI"& _ 
                "UDAD, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD, PRUEBA_ANTIDR"& _ 
                "OGA, FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, ID_CARGO_OCUPACIONAL"& _ 
                ", UBICACION, INSTRUCCION, ESTADO_CIVIL, MOVIL, TELEFONO, CANTIDAD_HIJOS, HISTORI"& _ 
                "A_CLINICA, PARROQUIA, ESTATURA, DISCAPACIDAD, EXAMEN_PSICOLOGICO, LUGAR_EXAMEN_P"& _ 
                "SICOLOGICO, CARNET_CONADIS, DATOS_HIJOS, DATOS_ESPOSA, CASA, ARRIENDO, DEUDOR_GA"& _ 
                "RANTE, CANTIDAD_DEUDA, A_QUIEN_ADEUDA, TRABAJO_ATERIORMENTE, ANTERIOR_TRABAJO, C"& _ 
                "ARGO_ANTERIOR_TRABAJO, MOTIVO_SALIDA_TRABAJO, ENTRADA_ANTERIOR, SALIDA_ANTERIOR,"& _ 
                " NOMBRES_PATRONO_ANTERIOR, TELEFONO_PATRONO_ANTERIOR, RECOMENDACIONES, DATOS_FAM"& _ 
                "ILIARES, DATOS_EMERGENCIA, FOTO, PERFIL FROM PERSONAL WHERE (ID_PERSONAL = @ID_P"& _ 
                "ERSONAL)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEDULA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEDULA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@APELLIDOS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "APELLIDOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCIA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_NACIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CIUDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CIUDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUELDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUELDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIBRETA_MILITAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIBRETA_MILITAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_SANGRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_SANGRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PASAPORTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PASAPORTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PESO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PESO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRUEBA_ANTIDROGA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRUEBA_ANTIDROGA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ENTRADA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_SALIDA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_PERSONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UBICACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UBICACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSTRUCCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSTRUCCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_CIVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CIVIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOVIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TELEFONO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CANTIDAD_HIJOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD_HIJOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HISTORIA_CLINICA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HISTORIA_CLINICA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARROQUIA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARROQUIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTATURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ESTATURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCAPACIDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCAPACIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXAMEN_PSICOLOGICO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXAMEN_PSICOLOGICO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LUGAR_EXAMEN_PSICOLOGICO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LUGAR_EXAMEN_PSICOLOGICO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARNET_CONADIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARNET_CONADIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATOS_HIJOS", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATOS_HIJOS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATOS_ESPOSA", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATOS_ESPOSA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CASA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CASA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ARRIENDO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ARRIENDO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEUDOR_GARANTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEUDOR_GARANTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CANTIDAD_DEUDA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CANTIDAD_DEUDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@A_QUIEN_ADEUDA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "A_QUIEN_ADEUDA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRABAJO_ATERIORMENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRABAJO_ATERIORMENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANTERIOR_TRABAJO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANTERIOR_TRABAJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARGO_ANTERIOR_TRABAJO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CARGO_ANTERIOR_TRABAJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOTIVO_SALIDA_TRABAJO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOTIVO_SALIDA_TRABAJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENTRADA_ANTERIOR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRADA_ANTERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALIDA_ANTERIOR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALIDA_ANTERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRES_PATRONO_ANTERIOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRES_PATRONO_ANTERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TELEFONO_PATRONO_ANTERIOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TELEFONO_PATRONO_ANTERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECOMENDACIONES", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECOMENDACIONES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATOS_FAMILIARES", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATOS_FAMILIARES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATOS_EMERGENCIA", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATOS_EMERGENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOTO", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERFIL", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERFIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEDULA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEDULA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_NACIMIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_NACIMIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_NACIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUELDO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUELDO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIBRETA_MILITAR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIBRETA_MILITAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIPO_SANGRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_SANGRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PASAPORTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PASAPORTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PESO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PESO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EDAD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDAD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRUEBA_ANTIDROGA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRUEBA_ANTIDROGA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_ENTRADA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ENTRADA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ENTRADA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_SALIDA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_SALIDA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_SALIDA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_PERSONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_PERSONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_CIVIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_CIVIL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CANTIDAD_HIJOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD_HIJOS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CANTIDAD_HIJOS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD_HIJOS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ESTATURA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTATURA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTATURA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ESTATURA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CANTIDAD_DEUDA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD_DEUDA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CANTIDAD_DEUDA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CANTIDAD_DEUDA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENTRADA_ANTERIOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRADA_ANTERIOR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENTRADA_ANTERIOR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRADA_ANTERIOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SALIDA_ANTERIOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALIDA_ANTERIOR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SALIDA_ANTERIOR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALIDA_ANTERIOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_PERSONAL, CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIM"& _ 
                "IENTO, SEXO, CIUDAD, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD"& _ 
                ", PRUEBA_ANTIDROGA, FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, ID_CA"& _ 
                "RGO_OCUPACIONAL, UBICACION, INSTRUCCION, ESTADO_CIVIL, MOVIL, TELEFONO, CANTIDAD"& _ 
                "_HIJOS, HISTORIA_CLINICA, PARROQUIA, ESTATURA, DISCAPACIDAD, EXAMEN_PSICOLOGICO,"& _ 
                " LUGAR_EXAMEN_PSICOLOGICO, CARNET_CONADIS, DATOS_HIJOS, DATOS_ESPOSA, CASA, ARRI"& _ 
                "ENDO, DEUDOR_GARANTE, CANTIDAD_DEUDA, A_QUIEN_ADEUDA, TRABAJO_ATERIORMENTE, ANTE"& _ 
                "RIOR_TRABAJO, CARGO_ANTERIOR_TRABAJO, MOTIVO_SALIDA_TRABAJO, ENTRADA_ANTERIOR, S"& _ 
                "ALIDA_ANTERIOR, NOMBRES_PATRONO_ANTERIOR, TELEFONO_PATRONO_ANTERIOR, RECOMENDACI"& _ 
                "ONES, DATOS_FAMILIARES, DATOS_EMERGENCIA, FOTO, PERFIL FROM dbo.PERSONAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.PERSONALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.PERSONALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.PERSONALDataTable = New dsActivosFijosGeneral.PERSONALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.PERSONALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "PERSONAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_CEDULA As String,  _
                    ByVal Original_FECHA_NACIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEXO As String,  _
                    ByVal Original_SUELDO As Decimal,  _
                    ByVal Original_LIBRETA_MILITAR As String,  _
                    ByVal Original_TIPO_SANGRE As String,  _
                    ByVal Original_PASAPORTE As String,  _
                    ByVal Original_PESO As Integer,  _
                    ByVal Original_EDAD As Integer,  _
                    ByVal Original_PRUEBA_ANTIDROGA As String,  _
                    ByVal Original_FECHA_ENTRADA As Global.System.Nullable(Of Date),  _
                    ByVal Original_FECHA_SALIDA As Global.System.Nullable(Of Date),  _
                    ByVal Original_ESTADO_PERSONAL As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal Original_ESTADO_CIVIL As String,  _
                    ByVal Original_CANTIDAD_HIJOS As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ESTATURA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CANTIDAD_DEUDA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ENTRADA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal Original_SALIDA_ANTERIOR As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_PERSONAL,Integer)
            If (Original_CEDULA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CEDULA")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CEDULA,String)
            End If
            If (Original_FECHA_NACIMIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_NACIMIENTO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SEXO")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SEXO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SUELDO,Decimal)
            If (Original_LIBRETA_MILITAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LIBRETA_MILITAR")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LIBRETA_MILITAR,String)
            End If
            If (Original_TIPO_SANGRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIPO_SANGRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TIPO_SANGRE,String)
            End If
            If (Original_PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASAPORTE")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PASAPORTE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PESO,Integer)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_EDAD,Integer)
            If (Original_PRUEBA_ANTIDROGA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRUEBA_ANTIDROGA")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_PRUEBA_ANTIDROGA,String)
            End If
            If (Original_FECHA_ENTRADA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_FECHA_ENTRADA.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_FECHA_SALIDA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_FECHA_SALIDA.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ESTADO_PERSONAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_ID_AREA,Integer)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ID_CARGO_OCUPACIONAL,Integer)
            If (Original_ESTADO_CIVIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESTADO_CIVIL")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ESTADO_CIVIL,String)
            End If
            If (Original_CANTIDAD_HIJOS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_CANTIDAD_HIJOS.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_ESTATURA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_ESTATURA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_CANTIDAD_DEUDA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_CANTIDAD_DEUDA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_ENTRADA_ANTERIOR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_ENTRADA_ANTERIOR.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_SALIDA_ANTERIOR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_SALIDA_ANTERIOR.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal CEDULA As String,  _
                    ByVal NOMBRES As String,  _
                    ByVal APELLIDOS As String,  _
                    ByVal PROVINCIA As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal FECHA_NACIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal SEXO As String,  _
                    ByVal CIUDAD As String,  _
                    ByVal SUELDO As Decimal,  _
                    ByVal LIBRETA_MILITAR As String,  _
                    ByVal TIPO_SANGRE As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal PESO As Integer,  _
                    ByVal EDAD As Integer,  _
                    ByVal PRUEBA_ANTIDROGA As String,  _
                    ByVal FECHA_ENTRADA As Global.System.Nullable(Of Date),  _
                    ByVal FECHA_SALIDA As Global.System.Nullable(Of Date),  _
                    ByVal ESTADO_PERSONAL As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal UBICACION As String,  _
                    ByVal INSTRUCCION As String,  _
                    ByVal ESTADO_CIVIL As String,  _
                    ByVal MOVIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal CANTIDAD_HIJOS As Global.System.Nullable(Of Integer),  _
                    ByVal HISTORIA_CLINICA As String,  _
                    ByVal PARROQUIA As String,  _
                    ByVal ESTATURA As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCAPACIDAD As String,  _
                    ByVal EXAMEN_PSICOLOGICO As String,  _
                    ByVal LUGAR_EXAMEN_PSICOLOGICO As String,  _
                    ByVal CARNET_CONADIS As String,  _
                    ByVal DATOS_HIJOS As String,  _
                    ByVal DATOS_ESPOSA As String,  _
                    ByVal CASA As String,  _
                    ByVal ARRIENDO As String,  _
                    ByVal DEUDOR_GARANTE As String,  _
                    ByVal CANTIDAD_DEUDA As Global.System.Nullable(Of Decimal),  _
                    ByVal A_QUIEN_ADEUDA As String,  _
                    ByVal TRABAJO_ATERIORMENTE As String,  _
                    ByVal ANTERIOR_TRABAJO As String,  _
                    ByVal CARGO_ANTERIOR_TRABAJO As String,  _
                    ByVal MOTIVO_SALIDA_TRABAJO As String,  _
                    ByVal ENTRADA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal SALIDA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal NOMBRES_PATRONO_ANTERIOR As String,  _
                    ByVal TELEFONO_PATRONO_ANTERIOR As String,  _
                    ByVal RECOMENDACIONES As String,  _
                    ByVal DATOS_FAMILIARES As String,  _
                    ByVal DATOS_EMERGENCIA As String,  _
                    ByVal FOTO() As Byte,  _
                    ByVal PERFIL() As Byte) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_PERSONAL,Integer)
            If (CEDULA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CEDULA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CEDULA,String)
            End If
            If (NOMBRES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRES")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NOMBRES,String)
            End If
            If (APELLIDOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDOS")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(APELLIDOS,String)
            End If
            If (PROVINCIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVINCIA")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PROVINCIA,String)
            End If
            If (DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DIRECCION")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DIRECCION,String)
            End If
            If (FECHA_NACIMIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FECHA_NACIMIENTO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SEXO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SEXO,String)
            End If
            If (CIUDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIUDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CIUDAD,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(SUELDO,Decimal)
            If (LIBRETA_MILITAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LIBRETA_MILITAR")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LIBRETA_MILITAR,String)
            End If
            If (TIPO_SANGRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_SANGRE")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(TIPO_SANGRE,String)
            End If
            If (PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASAPORTE")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PASAPORTE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(PESO,Integer)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(EDAD,Integer)
            If (PRUEBA_ANTIDROGA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRUEBA_ANTIDROGA")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PRUEBA_ANTIDROGA,String)
            End If
            If (FECHA_ENTRADA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(FECHA_ENTRADA.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FECHA_SALIDA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FECHA_SALIDA.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(ESTADO_PERSONAL,Integer)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(ID_AREA,Integer)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(ID_CARGO_OCUPACIONAL,Integer)
            If (UBICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UBICACION")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(UBICACION,String)
            End If
            If (INSTRUCCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSTRUCCION")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(INSTRUCCION,String)
            End If
            If (ESTADO_CIVIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_CIVIL")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(ESTADO_CIVIL,String)
            End If
            If (MOVIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(MOVIL,String)
            End If
            If (TELEFONO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(TELEFONO,String)
            End If
            If (CANTIDAD_HIJOS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(CANTIDAD_HIJOS.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (HISTORIA_CLINICA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(HISTORIA_CLINICA,String)
            End If
            If (PARROQUIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(PARROQUIA,String)
            End If
            If (ESTATURA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(ESTATURA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (DISCAPACIDAD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(DISCAPACIDAD,String)
            End If
            If (EXAMEN_PSICOLOGICO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(EXAMEN_PSICOLOGICO,String)
            End If
            If (LUGAR_EXAMEN_PSICOLOGICO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(LUGAR_EXAMEN_PSICOLOGICO,String)
            End If
            If (CARNET_CONADIS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(CARNET_CONADIS,String)
            End If
            If (DATOS_HIJOS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(DATOS_HIJOS,String)
            End If
            If (DATOS_ESPOSA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(DATOS_ESPOSA,String)
            End If
            If (CASA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(CASA,String)
            End If
            If (ARRIENDO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(ARRIENDO,String)
            End If
            If (DEUDOR_GARANTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(DEUDOR_GARANTE,String)
            End If
            If (CANTIDAD_DEUDA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(CANTIDAD_DEUDA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (A_QUIEN_ADEUDA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(A_QUIEN_ADEUDA,String)
            End If
            If (TRABAJO_ATERIORMENTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(TRABAJO_ATERIORMENTE,String)
            End If
            If (ANTERIOR_TRABAJO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(ANTERIOR_TRABAJO,String)
            End If
            If (CARGO_ANTERIOR_TRABAJO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(CARGO_ANTERIOR_TRABAJO,String)
            End If
            If (MOTIVO_SALIDA_TRABAJO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(MOTIVO_SALIDA_TRABAJO,String)
            End If
            If (ENTRADA_ANTERIOR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(ENTRADA_ANTERIOR.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (SALIDA_ANTERIOR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(SALIDA_ANTERIOR.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (NOMBRES_PATRONO_ANTERIOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(NOMBRES_PATRONO_ANTERIOR,String)
            End If
            If (TELEFONO_PATRONO_ANTERIOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(TELEFONO_PATRONO_ANTERIOR,String)
            End If
            If (RECOMENDACIONES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(RECOMENDACIONES,String)
            End If
            If (DATOS_FAMILIARES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(DATOS_FAMILIARES,String)
            End If
            If (DATOS_EMERGENCIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(DATOS_EMERGENCIA,String)
            End If
            If (FOTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(FOTO,Byte())
            End If
            If (PERFIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(PERFIL,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_PERSONAL As Integer,  _
                    ByVal CEDULA As String,  _
                    ByVal NOMBRES As String,  _
                    ByVal APELLIDOS As String,  _
                    ByVal PROVINCIA As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal FECHA_NACIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal SEXO As String,  _
                    ByVal CIUDAD As String,  _
                    ByVal SUELDO As Decimal,  _
                    ByVal LIBRETA_MILITAR As String,  _
                    ByVal TIPO_SANGRE As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal PESO As Integer,  _
                    ByVal EDAD As Integer,  _
                    ByVal PRUEBA_ANTIDROGA As String,  _
                    ByVal FECHA_ENTRADA As Global.System.Nullable(Of Date),  _
                    ByVal FECHA_SALIDA As Global.System.Nullable(Of Date),  _
                    ByVal ESTADO_PERSONAL As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal UBICACION As String,  _
                    ByVal INSTRUCCION As String,  _
                    ByVal ESTADO_CIVIL As String,  _
                    ByVal MOVIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal CANTIDAD_HIJOS As Global.System.Nullable(Of Integer),  _
                    ByVal HISTORIA_CLINICA As String,  _
                    ByVal PARROQUIA As String,  _
                    ByVal ESTATURA As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCAPACIDAD As String,  _
                    ByVal EXAMEN_PSICOLOGICO As String,  _
                    ByVal LUGAR_EXAMEN_PSICOLOGICO As String,  _
                    ByVal CARNET_CONADIS As String,  _
                    ByVal DATOS_HIJOS As String,  _
                    ByVal DATOS_ESPOSA As String,  _
                    ByVal CASA As String,  _
                    ByVal ARRIENDO As String,  _
                    ByVal DEUDOR_GARANTE As String,  _
                    ByVal CANTIDAD_DEUDA As Global.System.Nullable(Of Decimal),  _
                    ByVal A_QUIEN_ADEUDA As String,  _
                    ByVal TRABAJO_ATERIORMENTE As String,  _
                    ByVal ANTERIOR_TRABAJO As String,  _
                    ByVal CARGO_ANTERIOR_TRABAJO As String,  _
                    ByVal MOTIVO_SALIDA_TRABAJO As String,  _
                    ByVal ENTRADA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal SALIDA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal NOMBRES_PATRONO_ANTERIOR As String,  _
                    ByVal TELEFONO_PATRONO_ANTERIOR As String,  _
                    ByVal RECOMENDACIONES As String,  _
                    ByVal DATOS_FAMILIARES As String,  _
                    ByVal DATOS_EMERGENCIA As String,  _
                    ByVal FOTO() As Byte,  _
                    ByVal PERFIL() As Byte,  _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_CEDULA As String,  _
                    ByVal Original_FECHA_NACIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEXO As String,  _
                    ByVal Original_SUELDO As Decimal,  _
                    ByVal Original_LIBRETA_MILITAR As String,  _
                    ByVal Original_TIPO_SANGRE As String,  _
                    ByVal Original_PASAPORTE As String,  _
                    ByVal Original_PESO As Integer,  _
                    ByVal Original_EDAD As Integer,  _
                    ByVal Original_PRUEBA_ANTIDROGA As String,  _
                    ByVal Original_FECHA_ENTRADA As Global.System.Nullable(Of Date),  _
                    ByVal Original_FECHA_SALIDA As Global.System.Nullable(Of Date),  _
                    ByVal Original_ESTADO_PERSONAL As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal Original_ESTADO_CIVIL As String,  _
                    ByVal Original_CANTIDAD_HIJOS As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ESTATURA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CANTIDAD_DEUDA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ENTRADA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal Original_SALIDA_ANTERIOR As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_PERSONAL,Integer)
            If (CEDULA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CEDULA")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CEDULA,String)
            End If
            If (NOMBRES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRES")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NOMBRES,String)
            End If
            If (APELLIDOS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDOS")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(APELLIDOS,String)
            End If
            If (PROVINCIA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVINCIA")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PROVINCIA,String)
            End If
            If (DIRECCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DIRECCION,String)
            End If
            If (FECHA_NACIMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FECHA_NACIMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SEXO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SEXO,String)
            End If
            If (CIUDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIUDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CIUDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SUELDO,Decimal)
            If (LIBRETA_MILITAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LIBRETA_MILITAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LIBRETA_MILITAR,String)
            End If
            If (TIPO_SANGRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_SANGRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(TIPO_SANGRE,String)
            End If
            If (PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASAPORTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PASAPORTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PESO,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(EDAD,Integer)
            If (PRUEBA_ANTIDROGA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRUEBA_ANTIDROGA")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PRUEBA_ANTIDROGA,String)
            End If
            If (FECHA_ENTRADA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(FECHA_ENTRADA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FECHA_SALIDA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(FECHA_SALIDA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ESTADO_PERSONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ID_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(ID_CARGO_OCUPACIONAL,Integer)
            If (UBICACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UBICACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(UBICACION,String)
            End If
            If (INSTRUCCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSTRUCCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(INSTRUCCION,String)
            End If
            If (ESTADO_CIVIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_CIVIL")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ESTADO_CIVIL,String)
            End If
            If (MOVIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(MOVIL,String)
            End If
            If (TELEFONO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(TELEFONO,String)
            End If
            If (CANTIDAD_HIJOS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(CANTIDAD_HIJOS.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (HISTORIA_CLINICA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(HISTORIA_CLINICA,String)
            End If
            If (PARROQUIA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(PARROQUIA,String)
            End If
            If (ESTATURA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(ESTATURA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (DISCAPACIDAD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(DISCAPACIDAD,String)
            End If
            If (EXAMEN_PSICOLOGICO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(EXAMEN_PSICOLOGICO,String)
            End If
            If (LUGAR_EXAMEN_PSICOLOGICO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(LUGAR_EXAMEN_PSICOLOGICO,String)
            End If
            If (CARNET_CONADIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(CARNET_CONADIS,String)
            End If
            If (DATOS_HIJOS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(DATOS_HIJOS,String)
            End If
            If (DATOS_ESPOSA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(DATOS_ESPOSA,String)
            End If
            If (CASA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(CASA,String)
            End If
            If (ARRIENDO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(ARRIENDO,String)
            End If
            If (DEUDOR_GARANTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(DEUDOR_GARANTE,String)
            End If
            If (CANTIDAD_DEUDA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(CANTIDAD_DEUDA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (A_QUIEN_ADEUDA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(A_QUIEN_ADEUDA,String)
            End If
            If (TRABAJO_ATERIORMENTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(TRABAJO_ATERIORMENTE,String)
            End If
            If (ANTERIOR_TRABAJO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(ANTERIOR_TRABAJO,String)
            End If
            If (CARGO_ANTERIOR_TRABAJO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(CARGO_ANTERIOR_TRABAJO,String)
            End If
            If (MOTIVO_SALIDA_TRABAJO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(MOTIVO_SALIDA_TRABAJO,String)
            End If
            If (ENTRADA_ANTERIOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(ENTRADA_ANTERIOR.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (SALIDA_ANTERIOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(SALIDA_ANTERIOR.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (NOMBRES_PATRONO_ANTERIOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(NOMBRES_PATRONO_ANTERIOR,String)
            End If
            If (TELEFONO_PATRONO_ANTERIOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(TELEFONO_PATRONO_ANTERIOR,String)
            End If
            If (RECOMENDACIONES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(RECOMENDACIONES,String)
            End If
            If (DATOS_FAMILIARES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(DATOS_FAMILIARES,String)
            End If
            If (DATOS_EMERGENCIA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(DATOS_EMERGENCIA,String)
            End If
            If (FOTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(FOTO,Byte())
            End If
            If (PERFIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(PERFIL,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_ID_PERSONAL,Integer)
            If (Original_CEDULA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CEDULA")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_CEDULA,String)
            End If
            If (Original_FECHA_NACIMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_FECHA_NACIMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SEXO")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_SEXO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_SUELDO,Decimal)
            If (Original_LIBRETA_MILITAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LIBRETA_MILITAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_LIBRETA_MILITAR,String)
            End If
            If (Original_TIPO_SANGRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIPO_SANGRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_TIPO_SANGRE,String)
            End If
            If (Original_PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASAPORTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_PASAPORTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_PESO,Integer)
            Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_EDAD,Integer)
            If (Original_PRUEBA_ANTIDROGA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRUEBA_ANTIDROGA")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_PRUEBA_ANTIDROGA,String)
            End If
            If (Original_FECHA_ENTRADA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_FECHA_ENTRADA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_FECHA_SALIDA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_FECHA_SALIDA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_ESTADO_PERSONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_ID_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_ID_CARGO_OCUPACIONAL,Integer)
            If (Original_ESTADO_CIVIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESTADO_CIVIL")
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_ESTADO_CIVIL,String)
            End If
            If (Original_CANTIDAD_HIJOS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_CANTIDAD_HIJOS.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_ESTATURA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_ESTATURA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_CANTIDAD_DEUDA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_CANTIDAD_DEUDA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_ENTRADA_ANTERIOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_ENTRADA_ANTERIOR.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_SALIDA_ANTERIOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_SALIDA_ANTERIOR.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CEDULA As String,  _
                    ByVal NOMBRES As String,  _
                    ByVal APELLIDOS As String,  _
                    ByVal PROVINCIA As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal FECHA_NACIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal SEXO As String,  _
                    ByVal CIUDAD As String,  _
                    ByVal SUELDO As Decimal,  _
                    ByVal LIBRETA_MILITAR As String,  _
                    ByVal TIPO_SANGRE As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal PESO As Integer,  _
                    ByVal EDAD As Integer,  _
                    ByVal PRUEBA_ANTIDROGA As String,  _
                    ByVal FECHA_ENTRADA As Global.System.Nullable(Of Date),  _
                    ByVal FECHA_SALIDA As Global.System.Nullable(Of Date),  _
                    ByVal ESTADO_PERSONAL As Integer,  _
                    ByVal ID_AREA As Integer,  _
                    ByVal ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal UBICACION As String,  _
                    ByVal INSTRUCCION As String,  _
                    ByVal ESTADO_CIVIL As String,  _
                    ByVal MOVIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal CANTIDAD_HIJOS As Global.System.Nullable(Of Integer),  _
                    ByVal HISTORIA_CLINICA As String,  _
                    ByVal PARROQUIA As String,  _
                    ByVal ESTATURA As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCAPACIDAD As String,  _
                    ByVal EXAMEN_PSICOLOGICO As String,  _
                    ByVal LUGAR_EXAMEN_PSICOLOGICO As String,  _
                    ByVal CARNET_CONADIS As String,  _
                    ByVal DATOS_HIJOS As String,  _
                    ByVal DATOS_ESPOSA As String,  _
                    ByVal CASA As String,  _
                    ByVal ARRIENDO As String,  _
                    ByVal DEUDOR_GARANTE As String,  _
                    ByVal CANTIDAD_DEUDA As Global.System.Nullable(Of Decimal),  _
                    ByVal A_QUIEN_ADEUDA As String,  _
                    ByVal TRABAJO_ATERIORMENTE As String,  _
                    ByVal ANTERIOR_TRABAJO As String,  _
                    ByVal CARGO_ANTERIOR_TRABAJO As String,  _
                    ByVal MOTIVO_SALIDA_TRABAJO As String,  _
                    ByVal ENTRADA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal SALIDA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal NOMBRES_PATRONO_ANTERIOR As String,  _
                    ByVal TELEFONO_PATRONO_ANTERIOR As String,  _
                    ByVal RECOMENDACIONES As String,  _
                    ByVal DATOS_FAMILIARES As String,  _
                    ByVal DATOS_EMERGENCIA As String,  _
                    ByVal FOTO() As Byte,  _
                    ByVal PERFIL() As Byte,  _
                    ByVal Original_ID_PERSONAL As Integer,  _
                    ByVal Original_CEDULA As String,  _
                    ByVal Original_FECHA_NACIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEXO As String,  _
                    ByVal Original_SUELDO As Decimal,  _
                    ByVal Original_LIBRETA_MILITAR As String,  _
                    ByVal Original_TIPO_SANGRE As String,  _
                    ByVal Original_PASAPORTE As String,  _
                    ByVal Original_PESO As Integer,  _
                    ByVal Original_EDAD As Integer,  _
                    ByVal Original_PRUEBA_ANTIDROGA As String,  _
                    ByVal Original_FECHA_ENTRADA As Global.System.Nullable(Of Date),  _
                    ByVal Original_FECHA_SALIDA As Global.System.Nullable(Of Date),  _
                    ByVal Original_ESTADO_PERSONAL As Integer,  _
                    ByVal Original_ID_AREA As Integer,  _
                    ByVal Original_ID_CARGO_OCUPACIONAL As Integer,  _
                    ByVal Original_ESTADO_CIVIL As String,  _
                    ByVal Original_CANTIDAD_HIJOS As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ESTATURA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CANTIDAD_DEUDA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ENTRADA_ANTERIOR As Global.System.Nullable(Of Date),  _
                    ByVal Original_SALIDA_ANTERIOR As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_ID_PERSONAL, CEDULA, NOMBRES, APELLIDOS, PROVINCIA, DIRECCION, FECHA_NACIMIENTO, SEXO, CIUDAD, SUELDO, LIBRETA_MILITAR, TIPO_SANGRE, PASAPORTE, PESO, EDAD, PRUEBA_ANTIDROGA, FECHA_ENTRADA, FECHA_SALIDA, ESTADO_PERSONAL, ID_AREA, ID_CARGO_OCUPACIONAL, UBICACION, INSTRUCCION, ESTADO_CIVIL, MOVIL, TELEFONO, CANTIDAD_HIJOS, HISTORIA_CLINICA, PARROQUIA, ESTATURA, DISCAPACIDAD, EXAMEN_PSICOLOGICO, LUGAR_EXAMEN_PSICOLOGICO, CARNET_CONADIS, DATOS_HIJOS, DATOS_ESPOSA, CASA, ARRIENDO, DEUDOR_GARANTE, CANTIDAD_DEUDA, A_QUIEN_ADEUDA, TRABAJO_ATERIORMENTE, ANTERIOR_TRABAJO, CARGO_ANTERIOR_TRABAJO, MOTIVO_SALIDA_TRABAJO, ENTRADA_ANTERIOR, SALIDA_ANTERIOR, NOMBRES_PATRONO_ANTERIOR, TELEFONO_PATRONO_ANTERIOR, RECOMENDACIONES, DATOS_FAMILIARES, DATOS_EMERGENCIA, FOTO, PERFIL, Original_ID_PERSONAL, Original_CEDULA, Original_FECHA_NACIMIENTO, Original_SEXO, Original_SUELDO, Original_LIBRETA_MILITAR, Original_TIPO_SANGRE, Original_PASAPORTE, Original_PESO, Original_EDAD, Original_PRUEBA_ANTIDROGA, Original_FECHA_ENTRADA, Original_FECHA_SALIDA, Original_ESTADO_PERSONAL, Original_ID_AREA, Original_ID_CARGO_OCUPACIONAL, Original_ESTADO_CIVIL, Original_CANTIDAD_HIJOS, Original_ESTATURA, Original_CANTIDAD_DEUDA, Original_ENTRADA_ANTERIOR, Original_SALIDA_ANTERIOR)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EMPRESA_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EMPRESA_GENERAL"
            tableMapping.ColumnMappings.Add("ID_EMPRESA", "ID_EMPRESA")
            tableMapping.ColumnMappings.Add("CODIGO_EMPRESA", "CODIGO_EMPRESA")
            tableMapping.ColumnMappings.Add("NOMBRE_EMPRESA", "NOMBRE_EMPRESA")
            tableMapping.ColumnMappings.Add("RUC_EMPRESA", "RUC_EMPRESA")
            tableMapping.ColumnMappings.Add("ESTADO_EMPRESA", "ESTADO_EMPRESA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[EMPRESA_GENERAL] WHERE (([ID_EMPRESA] = @Original_ID_EMPRESA) "& _ 
                "AND ([CODIGO_EMPRESA] = @Original_CODIGO_EMPRESA) AND ([RUC_EMPRESA] = @Original"& _ 
                "_RUC_EMPRESA) AND ([ESTADO_EMPRESA] = @Original_ESTADO_EMPRESA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CODIGO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RUC_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EMPRESA_GENERAL] ([ID_EMPRESA], [CODIGO_EMPRESA], [NOMBRE_EMPR"& _ 
                "ESA], [RUC_EMPRESA], [ESTADO_EMPRESA]) VALUES (@ID_EMPRESA, @CODIGO_EMPRESA, @NO"& _ 
                "MBRE_EMPRESA, @RUC_EMPRESA, @ESTADO_EMPRESA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_EMPRESA, CODIGO_EMPRESA"& _ 
                ", NOMBRE_EMPRESA, RUC_EMPRESA, ESTADO_EMPRESA FROM EMPRESA_GENERAL WHERE (ID_EMP"& _ 
                "RESA = @ID_EMPRESA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUC_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[EMPRESA_GENERAL] SET [ID_EMPRESA] = @ID_EMPRESA, [CODIGO_EMPRESA] ="& _ 
                " @CODIGO_EMPRESA, [NOMBRE_EMPRESA] = @NOMBRE_EMPRESA, [RUC_EMPRESA] = @RUC_EMPRE"& _ 
                "SA, [ESTADO_EMPRESA] = @ESTADO_EMPRESA WHERE (([ID_EMPRESA] = @Original_ID_EMPRE"& _ 
                "SA) AND ([CODIGO_EMPRESA] = @Original_CODIGO_EMPRESA) AND ([RUC_EMPRESA] = @Orig"& _ 
                "inal_RUC_EMPRESA) AND ([ESTADO_EMPRESA] = @Original_ESTADO_EMPRESA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID"& _ 
                "_EMPRESA, CODIGO_EMPRESA, NOMBRE_EMPRESA, RUC_EMPRESA, ESTADO_EMPRESA FROM EMPRE"& _ 
                "SA_GENERAL WHERE (ID_EMPRESA = @ID_EMPRESA)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUC_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CODIGO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RUC_EMPRESA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUC_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_EMPRESA, CODIGO_EMPRESA, NOMBRE_EMPRESA, RUC_EMPRESA, ESTADO_EMPRESA FR"& _ 
                "OM dbo.EMPRESA_GENERAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.EMPRESA_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.EMPRESA_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.EMPRESA_GENERALDataTable = New dsActivosFijosGeneral.EMPRESA_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.EMPRESA_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "EMPRESA_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_EMPRESA As Integer, ByVal Original_CODIGO_EMPRESA As Integer, ByVal Original_RUC_EMPRESA As String, ByVal Original_ESTADO_EMPRESA As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_EMPRESA,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_EMPRESA,Integer)
            If (Original_RUC_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RUC_EMPRESA")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RUC_EMPRESA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ESTADO_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_EMPRESA As Integer, ByVal CODIGO_EMPRESA As Integer, ByVal NOMBRE_EMPRESA As String, ByVal RUC_EMPRESA As String, ByVal ESTADO_EMPRESA As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_EMPRESA,Integer)
            If (NOMBRE_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_EMPRESA")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NOMBRE_EMPRESA,String)
            End If
            If (RUC_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RUC_EMPRESA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RUC_EMPRESA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ESTADO_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_EMPRESA As Integer, ByVal CODIGO_EMPRESA As Integer, ByVal NOMBRE_EMPRESA As String, ByVal RUC_EMPRESA As String, ByVal ESTADO_EMPRESA As Integer, ByVal Original_ID_EMPRESA As Integer, ByVal Original_CODIGO_EMPRESA As Integer, ByVal Original_RUC_EMPRESA As String, ByVal Original_ESTADO_EMPRESA As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_EMPRESA,Integer)
            If (NOMBRE_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_EMPRESA")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NOMBRE_EMPRESA,String)
            End If
            If (RUC_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RUC_EMPRESA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RUC_EMPRESA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ESTADO_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CODIGO_EMPRESA,Integer)
            If (Original_RUC_EMPRESA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RUC_EMPRESA")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_RUC_EMPRESA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ESTADO_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_EMPRESA As Integer, ByVal NOMBRE_EMPRESA As String, ByVal RUC_EMPRESA As String, ByVal ESTADO_EMPRESA As Integer, ByVal Original_ID_EMPRESA As Integer, ByVal Original_CODIGO_EMPRESA As Integer, ByVal Original_RUC_EMPRESA As String, ByVal Original_ESTADO_EMPRESA As Integer) As Integer
            Return Me.Update(Original_ID_EMPRESA, CODIGO_EMPRESA, NOMBRE_EMPRESA, RUC_EMPRESA, ESTADO_EMPRESA, Original_ID_EMPRESA, Original_CODIGO_EMPRESA, Original_RUC_EMPRESA, Original_ESTADO_EMPRESA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AREA_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AREA_GENERAL"
            tableMapping.ColumnMappings.Add("ID_AREA_GENERAL", "ID_AREA_GENERAL")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("NOMBRE_AREA", "NOMBRE_AREA")
            tableMapping.ColumnMappings.Add("ESTADO_AREA", "ESTADO_AREA")
            tableMapping.ColumnMappings.Add("ID_GERENCIAS_GENERAL", "ID_GERENCIAS_GENERAL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AREA_GENERAL] WHERE (([ID_AREA_GENERAL] = @Original_ID_AREA_GE"& _ 
                "NERAL) AND ([ESTADO_AREA] = @Original_ESTADO_AREA) AND ([ID_GERENCIAS_GENERAL] ="& _ 
                " @Original_ID_GERENCIAS_GENERAL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AREA_GENERAL] ([ID_AREA_GENERAL], [CODIGO], [NOMBRE_AREA], [ES"& _ 
                "TADO_AREA], [ID_GERENCIAS_GENERAL]) VALUES (@ID_AREA_GENERAL, @CODIGO, @NOMBRE_A"& _ 
                "REA, @ESTADO_AREA, @ID_GERENCIAS_GENERAL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_AREA_GENERAL, CODIGO, NOMB"& _ 
                "RE_AREA, ESTADO_AREA, ID_GERENCIAS_GENERAL FROM AREA_GENERAL WHERE (ID_AREA_GENE"& _ 
                "RAL = @ID_AREA_GENERAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_AREA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AREA_GENERAL] SET [ID_AREA_GENERAL] = @ID_AREA_GENERAL, [CODIGO] = "& _ 
                "@CODIGO, [NOMBRE_AREA] = @NOMBRE_AREA, [ESTADO_AREA] = @ESTADO_AREA, [ID_GERENCI"& _ 
                "AS_GENERAL] = @ID_GERENCIAS_GENERAL WHERE (([ID_AREA_GENERAL] = @Original_ID_ARE"& _ 
                "A_GENERAL) AND ([ESTADO_AREA] = @Original_ESTADO_AREA) AND ([ID_GERENCIAS_GENERA"& _ 
                "L] = @Original_ID_GERENCIAS_GENERAL));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_AREA_GENERAL, CODIGO, NOMBRE_A"& _ 
                "REA, ESTADO_AREA, ID_GERENCIAS_GENERAL FROM AREA_GENERAL WHERE (ID_AREA_GENERAL "& _ 
                "= @ID_AREA_GENERAL)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_AREA_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_AREA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_AREA_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_AREA_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_AREA_GENERAL, CODIGO, NOMBRE_AREA, ESTADO_AREA, ID_GERENCIAS_GENERAL FR"& _ 
                "OM dbo.AREA_GENERAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.AREA_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.AREA_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.AREA_GENERALDataTable = New dsActivosFijosGeneral.AREA_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.AREA_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "AREA_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_AREA_GENERAL As Integer, ByVal Original_ESTADO_AREA As Integer, ByVal Original_ID_GERENCIAS_GENERAL As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_AREA_GENERAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ESTADO_AREA,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ID_GERENCIAS_GENERAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_AREA_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_AREA As String, ByVal ESTADO_AREA As Integer, ByVal ID_GERENCIAS_GENERAL As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_AREA_GENERAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_AREA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_AREA")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NOMBRE_AREA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_AREA,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_GERENCIAS_GENERAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_AREA_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_AREA As String, ByVal ESTADO_AREA As Integer, ByVal ID_GERENCIAS_GENERAL As Integer, ByVal Original_ID_AREA_GENERAL As Integer, ByVal Original_ESTADO_AREA As Integer, ByVal Original_ID_GERENCIAS_GENERAL As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_AREA_GENERAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_AREA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_AREA")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NOMBRE_AREA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ESTADO_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_GERENCIAS_GENERAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_AREA_GENERAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ESTADO_AREA,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_GERENCIAS_GENERAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO As String, ByVal NOMBRE_AREA As String, ByVal ESTADO_AREA As Integer, ByVal ID_GERENCIAS_GENERAL As Integer, ByVal Original_ID_AREA_GENERAL As Integer, ByVal Original_ESTADO_AREA As Integer, ByVal Original_ID_GERENCIAS_GENERAL As Integer) As Integer
            Return Me.Update(Original_ID_AREA_GENERAL, CODIGO, NOMBRE_AREA, ESTADO_AREA, ID_GERENCIAS_GENERAL, Original_ID_AREA_GENERAL, Original_ESTADO_AREA, Original_ID_GERENCIAS_GENERAL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SUCURSAL_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SUCURSAL_GENERAL"
            tableMapping.ColumnMappings.Add("ID_SUCURSAL", "ID_SUCURSAL")
            tableMapping.ColumnMappings.Add("CODIGO_SUCURSAL", "CODIGO_SUCURSAL")
            tableMapping.ColumnMappings.Add("NOMBRE_SUCURSAL", "NOMBRE_SUCURSAL")
            tableMapping.ColumnMappings.Add("ESTADO_SUCURSAL", "ESTADO_SUCURSAL")
            tableMapping.ColumnMappings.Add("ID_EMPRESA", "ID_EMPRESA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SUCURSAL_GENERAL] WHERE (([ID_SUCURSAL] = @Original_ID_SUCURSA"& _ 
                "L) AND ([ESTADO_SUCURSAL] = @Original_ESTADO_SUCURSAL) AND ([ID_EMPRESA] = @Orig"& _ 
                "inal_ID_EMPRESA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SUCURSAL_GENERAL] ([ID_SUCURSAL], [CODIGO_SUCURSAL], [NOMBRE_S"& _ 
                "UCURSAL], [ESTADO_SUCURSAL], [ID_EMPRESA]) VALUES (@ID_SUCURSAL, @CODIGO_SUCURSA"& _ 
                "L, @NOMBRE_SUCURSAL, @ESTADO_SUCURSAL, @ID_EMPRESA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_SUCURSAL, CODIGO"& _ 
                "_SUCURSAL, NOMBRE_SUCURSAL, ESTADO_SUCURSAL, ID_EMPRESA FROM SUCURSAL_GENERAL WH"& _ 
                "ERE (ID_SUCURSAL = @ID_SUCURSAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_SUCURSAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_SUCURSAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SUCURSAL_GENERAL] SET [ID_SUCURSAL] = @ID_SUCURSAL, [CODIGO_SUCURSA"& _ 
                "L] = @CODIGO_SUCURSAL, [NOMBRE_SUCURSAL] = @NOMBRE_SUCURSAL, [ESTADO_SUCURSAL] ="& _ 
                " @ESTADO_SUCURSAL, [ID_EMPRESA] = @ID_EMPRESA WHERE (([ID_SUCURSAL] = @Original_"& _ 
                "ID_SUCURSAL) AND ([ESTADO_SUCURSAL] = @Original_ESTADO_SUCURSAL) AND ([ID_EMPRES"& _ 
                "A] = @Original_ID_EMPRESA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_SUCURSAL, CODIGO_SUCURSAL, NOMBRE_SUCURS"& _ 
                "AL, ESTADO_SUCURSAL, ID_EMPRESA FROM SUCURSAL_GENERAL WHERE (ID_SUCURSAL = @ID_S"& _ 
                "UCURSAL)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_SUCURSAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_SUCURSAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_SUCURSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_EMPRESA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_SUCURSAL, CODIGO_SUCURSAL, NOMBRE_SUCURSAL, ESTADO_SUCURSAL, ID_EMPRESA"& _ 
                " FROM dbo.SUCURSAL_GENERAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.SUCURSAL_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.SUCURSAL_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.SUCURSAL_GENERALDataTable = New dsActivosFijosGeneral.SUCURSAL_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.SUCURSAL_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "SUCURSAL_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_SUCURSAL As Integer, ByVal Original_ESTADO_SUCURSAL As Integer, ByVal Original_ID_EMPRESA As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_SUCURSAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ESTADO_SUCURSAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_SUCURSAL As Integer, ByVal CODIGO_SUCURSAL As String, ByVal NOMBRE_SUCURSAL As String, ByVal ESTADO_SUCURSAL As Integer, ByVal ID_EMPRESA As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_SUCURSAL,Integer)
            If (CODIGO_SUCURSAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_SUCURSAL")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_SUCURSAL,String)
            End If
            If (NOMBRE_SUCURSAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_SUCURSAL")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NOMBRE_SUCURSAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_SUCURSAL,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_SUCURSAL As Integer, ByVal CODIGO_SUCURSAL As String, ByVal NOMBRE_SUCURSAL As String, ByVal ESTADO_SUCURSAL As Integer, ByVal ID_EMPRESA As Integer, ByVal Original_ID_SUCURSAL As Integer, ByVal Original_ESTADO_SUCURSAL As Integer, ByVal Original_ID_EMPRESA As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_SUCURSAL,Integer)
            If (CODIGO_SUCURSAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_SUCURSAL")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_SUCURSAL,String)
            End If
            If (NOMBRE_SUCURSAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_SUCURSAL")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NOMBRE_SUCURSAL,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ESTADO_SUCURSAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_EMPRESA,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_SUCURSAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ESTADO_SUCURSAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_EMPRESA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_SUCURSAL As String, ByVal NOMBRE_SUCURSAL As String, ByVal ESTADO_SUCURSAL As Integer, ByVal ID_EMPRESA As Integer, ByVal Original_ID_SUCURSAL As Integer, ByVal Original_ESTADO_SUCURSAL As Integer, ByVal Original_ID_EMPRESA As Integer) As Integer
            Return Me.Update(Original_ID_SUCURSAL, CODIGO_SUCURSAL, NOMBRE_SUCURSAL, ESTADO_SUCURSAL, ID_EMPRESA, Original_ID_SUCURSAL, Original_ESTADO_SUCURSAL, Original_ID_EMPRESA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GERENCIAS_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GERENCIAS_GENERAL"
            tableMapping.ColumnMappings.Add("ID_GERENCIAS_GENERAL", "ID_GERENCIAS_GENERAL")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("NOMBRE_GERENCIAS", "NOMBRE_GERENCIAS")
            tableMapping.ColumnMappings.Add("ESTADO_GERENCIAS", "ESTADO_GERENCIAS")
            tableMapping.ColumnMappings.Add("ID_GERENCIA", "ID_GERENCIA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[GERENCIAS_GENERAL] WHERE (([ID_GERENCIAS_GENERAL] = @Original_"& _ 
                "ID_GERENCIAS_GENERAL) AND ([ESTADO_GERENCIAS] = @Original_ESTADO_GERENCIAS) AND "& _ 
                "([ID_GERENCIA] = @Original_ID_GERENCIA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_GERENCIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[GERENCIAS_GENERAL] ([ID_GERENCIAS_GENERAL], [CODIGO], [NOMBRE_"& _ 
                "GERENCIAS], [ESTADO_GERENCIAS], [ID_GERENCIA]) VALUES (@ID_GERENCIAS_GENERAL, @C"& _ 
                "ODIGO, @NOMBRE_GERENCIAS, @ESTADO_GERENCIAS, @ID_GERENCIA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_GERENCIAS"& _ 
                "_GENERAL, CODIGO, NOMBRE_GERENCIAS, ESTADO_GERENCIAS, ID_GERENCIA FROM GERENCIAS"& _ 
                "_GENERAL WHERE (ID_GERENCIAS_GENERAL = @ID_GERENCIAS_GENERAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_GERENCIAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_GERENCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_GERENCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[GERENCIAS_GENERAL] SET [ID_GERENCIAS_GENERAL] = @ID_GERENCIAS_GENER"& _ 
                "AL, [CODIGO] = @CODIGO, [NOMBRE_GERENCIAS] = @NOMBRE_GERENCIAS, [ESTADO_GERENCIA"& _ 
                "S] = @ESTADO_GERENCIAS, [ID_GERENCIA] = @ID_GERENCIA WHERE (([ID_GERENCIAS_GENER"& _ 
                "AL] = @Original_ID_GERENCIAS_GENERAL) AND ([ESTADO_GERENCIAS] = @Original_ESTADO"& _ 
                "_GERENCIAS) AND ([ID_GERENCIA] = @Original_ID_GERENCIA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_GERENCIAS_G"& _ 
                "ENERAL, CODIGO, NOMBRE_GERENCIAS, ESTADO_GERENCIAS, ID_GERENCIA FROM GERENCIAS_G"& _ 
                "ENERAL WHERE (ID_GERENCIAS_GENERAL = @ID_GERENCIAS_GENERAL)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_GERENCIAS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_GERENCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_GERENCIAS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_GERENCIA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIAS_GENERAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIAS_GENERAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_GERENCIAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_GERENCIAS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_GERENCIA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_GERENCIA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_GERENCIAS_GENERAL, CODIGO, NOMBRE_GERENCIAS, ESTADO_GERENCIAS, ID_GEREN"& _ 
                "CIA FROM dbo.GERENCIAS_GENERAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.GERENCIAS_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.GERENCIAS_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.GERENCIAS_GENERALDataTable = New dsActivosFijosGeneral.GERENCIAS_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.GERENCIAS_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "GERENCIAS_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_GERENCIAS_GENERAL As Integer, ByVal Original_ESTADO_GERENCIAS As Integer, ByVal Original_ID_GERENCIA As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_GERENCIAS_GENERAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ESTADO_GERENCIAS,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ID_GERENCIA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_GERENCIAS_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_GERENCIAS As String, ByVal ESTADO_GERENCIAS As Integer, ByVal ID_GERENCIA As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_GERENCIAS_GENERAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_GERENCIAS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_GERENCIAS")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NOMBRE_GERENCIAS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_GERENCIAS,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_GERENCIA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_GERENCIAS_GENERAL As Integer, ByVal CODIGO As String, ByVal NOMBRE_GERENCIAS As String, ByVal ESTADO_GERENCIAS As Integer, ByVal ID_GERENCIA As Integer, ByVal Original_ID_GERENCIAS_GENERAL As Integer, ByVal Original_ESTADO_GERENCIAS As Integer, ByVal Original_ID_GERENCIA As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_GERENCIAS_GENERAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (NOMBRE_GERENCIAS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_GERENCIAS")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NOMBRE_GERENCIAS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ESTADO_GERENCIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_GERENCIA,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_GERENCIAS_GENERAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ESTADO_GERENCIAS,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_GERENCIA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO As String, ByVal NOMBRE_GERENCIAS As String, ByVal ESTADO_GERENCIAS As Integer, ByVal ID_GERENCIA As Integer, ByVal Original_ID_GERENCIAS_GENERAL As Integer, ByVal Original_ESTADO_GERENCIAS As Integer, ByVal Original_ID_GERENCIA As Integer) As Integer
            Return Me.Update(Original_ID_GERENCIAS_GENERAL, CODIGO, NOMBRE_GERENCIAS, ESTADO_GERENCIAS, ID_GERENCIA, Original_ID_GERENCIAS_GENERAL, Original_ESTADO_GERENCIAS, Original_ID_GERENCIA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CARGO_OCUPACIONALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CARGO_OCUPACIONAL"
            tableMapping.ColumnMappings.Add("ID_CARGO_OCUPACIONAL", "ID_CARGO_OCUPACIONAL")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            tableMapping.ColumnMappings.Add("ID_SERIE_OCUPACIONAL", "ID_SERIE_OCUPACIONAL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CARGO_OCUPACIONAL] WHERE (([ID_CARGO_OCUPACIONAL] = @Original_"& _ 
                "ID_CARGO_OCUPACIONAL) AND ([ESTADO] = @Original_ESTADO) AND ([ID_SERIE_OCUPACION"& _ 
                "AL] = @Original_ID_SERIE_OCUPACIONAL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SERIE_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SERIE_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CARGO_OCUPACIONAL] ([ID_CARGO_OCUPACIONAL], [CODIGO], [DESCRIP"& _ 
                "CION], [ESTADO], [ID_SERIE_OCUPACIONAL]) VALUES (@ID_CARGO_OCUPACIONAL, @CODIGO,"& _ 
                " @DESCRIPCION, @ESTADO, @ID_SERIE_OCUPACIONAL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CARGO_OCUPACIONAL, CO"& _ 
                "DIGO, DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL FROM CARGO_OCUPACIONAL WHERE (ID"& _ 
                "_CARGO_OCUPACIONAL = @ID_CARGO_OCUPACIONAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SERIE_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SERIE_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CARGO_OCUPACIONAL] SET [ID_CARGO_OCUPACIONAL] = @ID_CARGO_OCUPACION"& _ 
                "AL, [CODIGO] = @CODIGO, [DESCRIPCION] = @DESCRIPCION, [ESTADO] = @ESTADO, [ID_SE"& _ 
                "RIE_OCUPACIONAL] = @ID_SERIE_OCUPACIONAL WHERE (([ID_CARGO_OCUPACIONAL] = @Origi"& _ 
                "nal_ID_CARGO_OCUPACIONAL) AND ([ESTADO] = @Original_ESTADO) AND ([ID_SERIE_OCUPA"& _ 
                "CIONAL] = @Original_ID_SERIE_OCUPACIONAL));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CARGO_OCUPACIONAL, CODIGO"& _ 
                ", DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL FROM CARGO_OCUPACIONAL WHERE (ID_CAR"& _ 
                "GO_OCUPACIONAL = @ID_CARGO_OCUPACIONAL)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SERIE_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SERIE_OCUPACIONAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_CARGO_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_CARGO_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_SERIE_OCUPACIONAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_SERIE_OCUPACIONAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_CARGO_OCUPACIONAL, CODIGO, DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL FR"& _ 
                "OM dbo.CARGO_OCUPACIONAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.CARGO_OCUPACIONALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.CARGO_OCUPACIONALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.CARGO_OCUPACIONALDataTable = New dsActivosFijosGeneral.CARGO_OCUPACIONALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.CARGO_OCUPACIONALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "CARGO_OCUPACIONAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_CARGO_OCUPACIONAL As Integer, ByVal Original_ESTADO As Integer, ByVal Original_ID_SERIE_OCUPACIONAL As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_CARGO_OCUPACIONAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ID_SERIE_OCUPACIONAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_CARGO_OCUPACIONAL As Integer, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal ESTADO As Integer, ByVal ID_SERIE_OCUPACIONAL As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_CARGO_OCUPACIONAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_SERIE_OCUPACIONAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_CARGO_OCUPACIONAL As Integer, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal ESTADO As Integer, ByVal ID_SERIE_OCUPACIONAL As Integer, ByVal Original_ID_CARGO_OCUPACIONAL As Integer, ByVal Original_ESTADO As Integer, ByVal Original_ID_SERIE_OCUPACIONAL As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_CARGO_OCUPACIONAL,Integer)
            If (CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_SERIE_OCUPACIONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_CARGO_OCUPACIONAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ESTADO,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_SERIE_OCUPACIONAL,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal ESTADO As Integer, ByVal ID_SERIE_OCUPACIONAL As Integer, ByVal Original_ID_CARGO_OCUPACIONAL As Integer, ByVal Original_ESTADO As Integer, ByVal Original_ID_SERIE_OCUPACIONAL As Integer) As Integer
            Return Me.Update(Original_ID_CARGO_OCUPACIONAL, CODIGO, DESCRIPCION, ESTADO, ID_SERIE_OCUPACIONAL, Original_ID_CARGO_OCUPACIONAL, Original_ESTADO, Original_ID_SERIE_OCUPACIONAL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RADIOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RADIOS"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("NUM_PERMISO_USO", "NUM_PERMISO_USO")
            tableMapping.ColumnMappings.Add("FEC_ACEPTACION_PERMISO", "FEC_ACEPTACION_PERMISO")
            tableMapping.ColumnMappings.Add("FEC_CADUCIDAD_PERMISO", "FEC_CADUCIDAD_PERMISO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RADIOS] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [SERIE], [NUM_PE"& _ 
                "RMISO_USO], [FEC_ACEPTACION_PERMISO], [FEC_CADUCIDAD_PERMISO], [ESTADO_ACTIVO], "& _ 
                "[COLOR], [ESTADO]) VALUES (@ID_ACTIVO_FIJO, @MARCA, @MODELO, @SERIE, @NUM_PERMIS"& _ 
                "O_USO, @FEC_ACEPTACION_PERMISO, @FEC_CADUCIDAD_PERMISO, @ESTADO_ACTIVO, @COLOR, "& _ 
                "@ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_PERMISO_USO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_PERMISO_USO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_ACEPTACION_PERMISO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_ACEPTACION_PERMISO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEC_CADUCIDAD_PERMISO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEC_CADUCIDAD_PERMISO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, SERIE, NUM_PERMISO_USO, FEC_ACEPTACION_PERM"& _ 
                "ISO, FEC_CADUCIDAD_PERMISO, ESTADO_ACTIVO, COLOR, ESTADO FROM dbo.RADIOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.RADIOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.RADIOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.RADIOSDataTable = New dsActivosFijosGeneral.RADIOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.RADIOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "RADIOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal SERIE As String, ByVal NUM_PERMISO_USO As String, ByVal FEC_ACEPTACION_PERMISO As Date, ByVal FEC_CADUCIDAD_PERMISO As Date, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SERIE,String)
            End If
            If (NUM_PERMISO_USO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NUM_PERMISO_USO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NUM_PERMISO_USO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(FEC_ACEPTACION_PERMISO,Date)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(FEC_CADUCIDAD_PERMISO,Date)
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COLOR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CHALECOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CHALECOS"
            tableMapping.ColumnMappings.Add("ID_ACTIVO_FIJO", "ID_ACTIVO_FIJO")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("ESTADO_ACTIVO", "ESTADO_ACTIVO")
            tableMapping.ColumnMappings.Add("COLOR", "COLOR")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("ANO", "ANO")
            tableMapping.ColumnMappings.Add("ADICIONALES", "ADICIONALES")
            tableMapping.ColumnMappings.Add("CADUCIDAD", "CADUCIDAD")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CHALECOS] ([ID_ACTIVO_FIJO], [MARCA], [MODELO], [ESTADO_ACTIVO"& _ 
                "], [COLOR], [SERIE], [MATERIAL], [ANO], [ADICIONALES], [CADUCIDAD], [ESTADO]) VA"& _ 
                "LUES (@ID_ACTIVO_FIJO, @MARCA, @MODELO, @ESTADO_ACTIVO, @COLOR, @SERIE, @MATERIA"& _ 
                "L, @ANO, @ADICIONALES, @CADUCIDAD, @ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ACTIVO_FIJO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ACTIVO_FIJO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARCA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ACTIVO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ACTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADICIONALES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADICIONALES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CADUCIDAD", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CADUCIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ACTIVO_FIJO, MARCA, MODELO, ESTADO_ACTIVO, COLOR, SERIE, MATERIAL, ANO,"& _ 
                " ADICIONALES, CADUCIDAD, ESTADO FROM dbo.CHALECOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsActivosFijosGeneral.CHALECOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsActivosFijosGeneral.CHALECOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsActivosFijosGeneral.CHALECOSDataTable = New dsActivosFijosGeneral.CHALECOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsActivosFijosGeneral.CHALECOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsActivosFijosGeneral) As Integer
            Return Me.Adapter.Update(dataSet, "CHALECOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_ACTIVO_FIJO As Integer, ByVal MARCA As String, ByVal MODELO As String, ByVal ESTADO_ACTIVO As String, ByVal COLOR As String, ByVal SERIE As String, ByVal MATERIAL As String, ByVal ANO As Integer, ByVal ADICIONALES As String, ByVal CADUCIDAD As Date, ByVal ESTADO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ACTIVO_FIJO,Integer)
            If (MARCA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARCA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MARCA,String)
            End If
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODELO,String)
            End If
            If (ESTADO_ACTIVO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_ACTIVO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ESTADO_ACTIVO,String)
            End If
            If (COLOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLOR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLOR,String)
            End If
            If (SERIE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIE,String)
            End If
            If (MATERIAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MATERIAL")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MATERIAL,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ANO,Integer)
            If (ADICIONALES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONALES")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ADICIONALES,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(CADUCIDAD,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ESTADO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _aCTIVO_FIJO_GENERALTableAdapter As ACTIVO_FIJO_GENERALTableAdapter
        
        Private _aRMASTableAdapter As ARMASTableAdapter
        
        Private _cAMARAS_SEGURIDADTableAdapter As CAMARAS_SEGURIDADTableAdapter
        
        Private _eQUIPOS_AMBIENTACIONTableAdapter As EQUIPOS_AMBIENTACIONTableAdapter
        
        Private _eQUIPOS_COCINATableAdapter As EQUIPOS_COCINATableAdapter
        
        Private _eQUIPOS_COMPUTOTableAdapter As EQUIPOS_COMPUTOTableAdapter
        
        Private _eQUIPOS_COMUNICACION_TELEFONIATableAdapter As EQUIPOS_COMUNICACION_TELEFONIATableAdapter
        
        Private _eQUIPOS_OFICINATableAdapter As EQUIPOS_OFICINATableAdapter
        
        Private _eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter As EQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter
        
        Private _gENERADORESTableAdapter As GENERADORESTableAdapter
        
        Private _lIBRO_COLECCIONESTableAdapter As LIBRO_COLECCIONESTableAdapter
        
        Private _mUEBLES_OFICINATableAdapter As MUEBLES_OFICINATableAdapter
        
        Private _sOFTWARETableAdapter As SOFTWARETableAdapter
        
        Private _vEHICULOSTableAdapter As VEHICULOSTableAdapter
        
        Private _tERRENOSTableAdapter As TERRENOSTableAdapter
        
        Private _pERSONALTableAdapter As PERSONALTableAdapter
        
        Private _eMPRESA_GENERALTableAdapter As EMPRESA_GENERALTableAdapter
        
        Private _aREA_GENERALTableAdapter As AREA_GENERALTableAdapter
        
        Private _sUCURSAL_GENERALTableAdapter As SUCURSAL_GENERALTableAdapter
        
        Private _gERENCIAS_GENERALTableAdapter As GERENCIAS_GENERALTableAdapter
        
        Private _cARGO_OCUPACIONALTableAdapter As CARGO_OCUPACIONALTableAdapter
        
        Private _rADIOSTableAdapter As RADIOSTableAdapter
        
        Private _cHALECOSTableAdapter As CHALECOSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ACTIVO_FIJO_GENERALTableAdapter() As ACTIVO_FIJO_GENERALTableAdapter
            Get
                Return Me._aCTIVO_FIJO_GENERALTableAdapter
            End Get
            Set
                Me._aCTIVO_FIJO_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ARMASTableAdapter() As ARMASTableAdapter
            Get
                Return Me._aRMASTableAdapter
            End Get
            Set
                Me._aRMASTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CAMARAS_SEGURIDADTableAdapter() As CAMARAS_SEGURIDADTableAdapter
            Get
                Return Me._cAMARAS_SEGURIDADTableAdapter
            End Get
            Set
                Me._cAMARAS_SEGURIDADTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EQUIPOS_AMBIENTACIONTableAdapter() As EQUIPOS_AMBIENTACIONTableAdapter
            Get
                Return Me._eQUIPOS_AMBIENTACIONTableAdapter
            End Get
            Set
                Me._eQUIPOS_AMBIENTACIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EQUIPOS_COCINATableAdapter() As EQUIPOS_COCINATableAdapter
            Get
                Return Me._eQUIPOS_COCINATableAdapter
            End Get
            Set
                Me._eQUIPOS_COCINATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EQUIPOS_COMPUTOTableAdapter() As EQUIPOS_COMPUTOTableAdapter
            Get
                Return Me._eQUIPOS_COMPUTOTableAdapter
            End Get
            Set
                Me._eQUIPOS_COMPUTOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EQUIPOS_COMUNICACION_TELEFONIATableAdapter() As EQUIPOS_COMUNICACION_TELEFONIATableAdapter
            Get
                Return Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter
            End Get
            Set
                Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EQUIPOS_OFICINATableAdapter() As EQUIPOS_OFICINATableAdapter
            Get
                Return Me._eQUIPOS_OFICINATableAdapter
            End Get
            Set
                Me._eQUIPOS_OFICINATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter() As EQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter
            Get
                Return Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter
            End Get
            Set
                Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property GENERADORESTableAdapter() As GENERADORESTableAdapter
            Get
                Return Me._gENERADORESTableAdapter
            End Get
            Set
                Me._gENERADORESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LIBRO_COLECCIONESTableAdapter() As LIBRO_COLECCIONESTableAdapter
            Get
                Return Me._lIBRO_COLECCIONESTableAdapter
            End Get
            Set
                Me._lIBRO_COLECCIONESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MUEBLES_OFICINATableAdapter() As MUEBLES_OFICINATableAdapter
            Get
                Return Me._mUEBLES_OFICINATableAdapter
            End Get
            Set
                Me._mUEBLES_OFICINATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SOFTWARETableAdapter() As SOFTWARETableAdapter
            Get
                Return Me._sOFTWARETableAdapter
            End Get
            Set
                Me._sOFTWARETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VEHICULOSTableAdapter() As VEHICULOSTableAdapter
            Get
                Return Me._vEHICULOSTableAdapter
            End Get
            Set
                Me._vEHICULOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TERRENOSTableAdapter() As TERRENOSTableAdapter
            Get
                Return Me._tERRENOSTableAdapter
            End Get
            Set
                Me._tERRENOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PERSONALTableAdapter() As PERSONALTableAdapter
            Get
                Return Me._pERSONALTableAdapter
            End Get
            Set
                Me._pERSONALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EMPRESA_GENERALTableAdapter() As EMPRESA_GENERALTableAdapter
            Get
                Return Me._eMPRESA_GENERALTableAdapter
            End Get
            Set
                Me._eMPRESA_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AREA_GENERALTableAdapter() As AREA_GENERALTableAdapter
            Get
                Return Me._aREA_GENERALTableAdapter
            End Get
            Set
                Me._aREA_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SUCURSAL_GENERALTableAdapter() As SUCURSAL_GENERALTableAdapter
            Get
                Return Me._sUCURSAL_GENERALTableAdapter
            End Get
            Set
                Me._sUCURSAL_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property GERENCIAS_GENERALTableAdapter() As GERENCIAS_GENERALTableAdapter
            Get
                Return Me._gERENCIAS_GENERALTableAdapter
            End Get
            Set
                Me._gERENCIAS_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CARGO_OCUPACIONALTableAdapter() As CARGO_OCUPACIONALTableAdapter
            Get
                Return Me._cARGO_OCUPACIONALTableAdapter
            End Get
            Set
                Me._cARGO_OCUPACIONALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RADIOSTableAdapter() As RADIOSTableAdapter
            Get
                Return Me._rADIOSTableAdapter
            End Get
            Set
                Me._rADIOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CHALECOSTableAdapter() As CHALECOSTableAdapter
            Get
                Return Me._cHALECOSTableAdapter
            End Get
            Set
                Me._cHALECOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aCTIVO_FIJO_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aCTIVO_FIJO_GENERALTableAdapter.Connection
                End If
                If ((Not (Me._aRMASTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aRMASTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aRMASTableAdapter.Connection
                End If
                If ((Not (Me._cAMARAS_SEGURIDADTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cAMARAS_SEGURIDADTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cAMARAS_SEGURIDADTableAdapter.Connection
                End If
                If ((Not (Me._eQUIPOS_AMBIENTACIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eQUIPOS_AMBIENTACIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eQUIPOS_AMBIENTACIONTableAdapter.Connection
                End If
                If ((Not (Me._eQUIPOS_COCINATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eQUIPOS_COCINATableAdapter.Connection) Is Nothing)) Then
                    Return Me._eQUIPOS_COCINATableAdapter.Connection
                End If
                If ((Not (Me._eQUIPOS_COMPUTOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eQUIPOS_COMPUTOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eQUIPOS_COMPUTOTableAdapter.Connection
                End If
                If ((Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Connection) Is Nothing)) Then
                    Return Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Connection
                End If
                If ((Not (Me._eQUIPOS_OFICINATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eQUIPOS_OFICINATableAdapter.Connection) Is Nothing)) Then
                    Return Me._eQUIPOS_OFICINATableAdapter.Connection
                End If
                If ((Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Connection
                End If
                If ((Not (Me._gENERADORESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._gENERADORESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._gENERADORESTableAdapter.Connection
                End If
                If ((Not (Me._lIBRO_COLECCIONESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lIBRO_COLECCIONESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lIBRO_COLECCIONESTableAdapter.Connection
                End If
                If ((Not (Me._mUEBLES_OFICINATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mUEBLES_OFICINATableAdapter.Connection) Is Nothing)) Then
                    Return Me._mUEBLES_OFICINATableAdapter.Connection
                End If
                If ((Not (Me._sOFTWARETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sOFTWARETableAdapter.Connection) Is Nothing)) Then
                    Return Me._sOFTWARETableAdapter.Connection
                End If
                If ((Not (Me._vEHICULOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vEHICULOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vEHICULOSTableAdapter.Connection
                End If
                If ((Not (Me._tERRENOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tERRENOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tERRENOSTableAdapter.Connection
                End If
                If ((Not (Me._pERSONALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pERSONALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pERSONALTableAdapter.Connection
                End If
                If ((Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eMPRESA_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eMPRESA_GENERALTableAdapter.Connection
                End If
                If ((Not (Me._aREA_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aREA_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aREA_GENERALTableAdapter.Connection
                End If
                If ((Not (Me._sUCURSAL_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sUCURSAL_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sUCURSAL_GENERALTableAdapter.Connection
                End If
                If ((Not (Me._gERENCIAS_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._gERENCIAS_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._gERENCIAS_GENERALTableAdapter.Connection
                End If
                If ((Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cARGO_OCUPACIONALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cARGO_OCUPACIONALTableAdapter.Connection
                End If
                If ((Not (Me._rADIOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rADIOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rADIOSTableAdapter.Connection
                End If
                If ((Not (Me._cHALECOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cHALECOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cHALECOSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cAMARAS_SEGURIDADTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eQUIPOS_AMBIENTACIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eQUIPOS_COCINATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eQUIPOS_COMPUTOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eQUIPOS_OFICINATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._gENERADORESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lIBRO_COLECCIONESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mUEBLES_OFICINATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sOFTWARETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vEHICULOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tERRENOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sUCURSAL_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._gERENCIAS_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cHALECOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsActivosFijosGeneral, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CARGO_OCUPACIONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cARGO_OCUPACIONALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._gERENCIAS_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.GERENCIAS_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._gERENCIAS_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sUCURSAL_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SUCURSAL_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sUCURSAL_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AREA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aREA_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EMPRESA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eMPRESA_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ACTIVO_FIJO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aCTIVO_FIJO_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tERRENOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TERRENOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tERRENOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vEHICULOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VEHICULOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vEHICULOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sOFTWARETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SOFTWARE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sOFTWARETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RADIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rADIOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mUEBLES_OFICINATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MUEBLES_OFICINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mUEBLES_OFICINATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._gENERADORESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.GENERADORES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._gENERADORESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_SEGURIDAD_INDUSTRIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_OFICINATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_OFICINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eQUIPOS_OFICINATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COMUNICACION_TELEFONIA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COMPUTOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COMPUTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COMPUTOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COCINATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COCINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COCINATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_AMBIENTACIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_AMBIENTACION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eQUIPOS_AMBIENTACIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cAMARAS_SEGURIDADTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CAMARAS_SEGURIDAD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cAMARAS_SEGURIDADTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ARMAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aRMASTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lIBRO_COLECCIONESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LIBRO_COLECCIONES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lIBRO_COLECCIONESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cHALECOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CHALECOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cHALECOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsActivosFijosGeneral, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CARGO_OCUPACIONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cARGO_OCUPACIONALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._gERENCIAS_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.GERENCIAS_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._gERENCIAS_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sUCURSAL_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SUCURSAL_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sUCURSAL_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AREA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aREA_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EMPRESA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eMPRESA_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ACTIVO_FIJO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aCTIVO_FIJO_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tERRENOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TERRENOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tERRENOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vEHICULOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VEHICULOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vEHICULOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sOFTWARETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SOFTWARE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sOFTWARETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RADIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rADIOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mUEBLES_OFICINATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MUEBLES_OFICINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mUEBLES_OFICINATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._gENERADORESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.GENERADORES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._gENERADORESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_SEGURIDAD_INDUSTRIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_OFICINATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_OFICINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eQUIPOS_OFICINATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COMUNICACION_TELEFONIA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COMPUTOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COMPUTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COMPUTOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COCINATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COCINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COCINATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_AMBIENTACIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_AMBIENTACION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eQUIPOS_AMBIENTACIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cAMARAS_SEGURIDADTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CAMARAS_SEGURIDAD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cAMARAS_SEGURIDADTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ARMAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aRMASTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lIBRO_COLECCIONESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LIBRO_COLECCIONES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lIBRO_COLECCIONESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cHALECOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CHALECOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cHALECOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsActivosFijosGeneral, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cHALECOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CHALECOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cHALECOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lIBRO_COLECCIONESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LIBRO_COLECCIONES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lIBRO_COLECCIONESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ARMAS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aRMASTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cAMARAS_SEGURIDADTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CAMARAS_SEGURIDAD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cAMARAS_SEGURIDADTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_AMBIENTACIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_AMBIENTACION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eQUIPOS_AMBIENTACIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COCINATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COCINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COCINATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COMPUTOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COMPUTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COMPUTOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_COMUNICACION_TELEFONIA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_OFICINATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_OFICINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eQUIPOS_OFICINATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EQUIPOS_SEGURIDAD_INDUSTRIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._gENERADORESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.GENERADORES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._gENERADORESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mUEBLES_OFICINATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MUEBLES_OFICINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mUEBLES_OFICINATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RADIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rADIOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sOFTWARETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SOFTWARE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sOFTWARETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vEHICULOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VEHICULOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vEHICULOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tERRENOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TERRENOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tERRENOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ACTIVO_FIJO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aCTIVO_FIJO_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EMPRESA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eMPRESA_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AREA_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aREA_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sUCURSAL_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SUCURSAL_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sUCURSAL_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._gERENCIAS_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.GERENCIAS_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._gERENCIAS_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CARGO_OCUPACIONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cARGO_OCUPACIONALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsActivosFijosGeneral) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aCTIVO_FIJO_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aRMASTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aRMASTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cAMARAS_SEGURIDADTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cAMARAS_SEGURIDADTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eQUIPOS_AMBIENTACIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eQUIPOS_AMBIENTACIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eQUIPOS_COCINATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eQUIPOS_COCINATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eQUIPOS_COMPUTOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eQUIPOS_COMPUTOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eQUIPOS_OFICINATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eQUIPOS_OFICINATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._gENERADORESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._gENERADORESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._lIBRO_COLECCIONESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lIBRO_COLECCIONESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._mUEBLES_OFICINATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mUEBLES_OFICINATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._sOFTWARETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sOFTWARETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._vEHICULOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vEHICULOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._tERRENOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tERRENOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._pERSONALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pERSONALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eMPRESA_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aREA_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aREA_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._sUCURSAL_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sUCURSAL_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._gERENCIAS_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._gERENCIAS_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cARGO_OCUPACIONALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._rADIOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rADIOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cHALECOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cHALECOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aCTIVO_FIJO_GENERALTableAdapter, Me._aCTIVO_FIJO_GENERALTableAdapter.Connection)
                    Me._aCTIVO_FIJO_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aCTIVO_FIJO_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aCTIVO_FIJO_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aCTIVO_FIJO_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aCTIVO_FIJO_GENERALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aRMASTableAdapter, Me._aRMASTableAdapter.Connection)
                    Me._aRMASTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aRMASTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aRMASTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aRMASTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aRMASTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cAMARAS_SEGURIDADTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cAMARAS_SEGURIDADTableAdapter, Me._cAMARAS_SEGURIDADTableAdapter.Connection)
                    Me._cAMARAS_SEGURIDADTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cAMARAS_SEGURIDADTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cAMARAS_SEGURIDADTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cAMARAS_SEGURIDADTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cAMARAS_SEGURIDADTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eQUIPOS_AMBIENTACIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eQUIPOS_AMBIENTACIONTableAdapter, Me._eQUIPOS_AMBIENTACIONTableAdapter.Connection)
                    Me._eQUIPOS_AMBIENTACIONTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_AMBIENTACIONTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eQUIPOS_AMBIENTACIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eQUIPOS_AMBIENTACIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eQUIPOS_AMBIENTACIONTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eQUIPOS_COCINATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eQUIPOS_COCINATableAdapter, Me._eQUIPOS_COCINATableAdapter.Connection)
                    Me._eQUIPOS_COCINATableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_COCINATableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eQUIPOS_COCINATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eQUIPOS_COCINATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eQUIPOS_COCINATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eQUIPOS_COMPUTOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eQUIPOS_COMPUTOTableAdapter, Me._eQUIPOS_COMPUTOTableAdapter.Connection)
                    Me._eQUIPOS_COMPUTOTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_COMPUTOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eQUIPOS_COMPUTOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eQUIPOS_COMPUTOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eQUIPOS_COMPUTOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter, Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Connection)
                    Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eQUIPOS_OFICINATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eQUIPOS_OFICINATableAdapter, Me._eQUIPOS_OFICINATableAdapter.Connection)
                    Me._eQUIPOS_OFICINATableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_OFICINATableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eQUIPOS_OFICINATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eQUIPOS_OFICINATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eQUIPOS_OFICINATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter, Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Connection)
                    Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._gENERADORESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._gENERADORESTableAdapter, Me._gENERADORESTableAdapter.Connection)
                    Me._gENERADORESTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._gENERADORESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._gENERADORESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._gENERADORESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._gENERADORESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lIBRO_COLECCIONESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lIBRO_COLECCIONESTableAdapter, Me._lIBRO_COLECCIONESTableAdapter.Connection)
                    Me._lIBRO_COLECCIONESTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._lIBRO_COLECCIONESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._lIBRO_COLECCIONESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lIBRO_COLECCIONESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lIBRO_COLECCIONESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mUEBLES_OFICINATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mUEBLES_OFICINATableAdapter, Me._mUEBLES_OFICINATableAdapter.Connection)
                    Me._mUEBLES_OFICINATableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mUEBLES_OFICINATableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mUEBLES_OFICINATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mUEBLES_OFICINATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mUEBLES_OFICINATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sOFTWARETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sOFTWARETableAdapter, Me._sOFTWARETableAdapter.Connection)
                    Me._sOFTWARETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sOFTWARETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sOFTWARETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sOFTWARETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sOFTWARETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vEHICULOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vEHICULOSTableAdapter, Me._vEHICULOSTableAdapter.Connection)
                    Me._vEHICULOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vEHICULOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vEHICULOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vEHICULOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vEHICULOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tERRENOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tERRENOSTableAdapter, Me._tERRENOSTableAdapter.Connection)
                    Me._tERRENOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tERRENOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tERRENOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tERRENOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tERRENOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pERSONALTableAdapter, Me._pERSONALTableAdapter.Connection)
                    Me._pERSONALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pERSONALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pERSONALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pERSONALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pERSONALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eMPRESA_GENERALTableAdapter, Me._eMPRESA_GENERALTableAdapter.Connection)
                    Me._eMPRESA_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eMPRESA_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eMPRESA_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eMPRESA_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eMPRESA_GENERALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aREA_GENERALTableAdapter, Me._aREA_GENERALTableAdapter.Connection)
                    Me._aREA_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aREA_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aREA_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aREA_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aREA_GENERALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sUCURSAL_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sUCURSAL_GENERALTableAdapter, Me._sUCURSAL_GENERALTableAdapter.Connection)
                    Me._sUCURSAL_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sUCURSAL_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sUCURSAL_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sUCURSAL_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sUCURSAL_GENERALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._gERENCIAS_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._gERENCIAS_GENERALTableAdapter, Me._gERENCIAS_GENERALTableAdapter.Connection)
                    Me._gERENCIAS_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._gERENCIAS_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._gERENCIAS_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._gERENCIAS_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._gERENCIAS_GENERALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cARGO_OCUPACIONALTableAdapter, Me._cARGO_OCUPACIONALTableAdapter.Connection)
                    Me._cARGO_OCUPACIONALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cARGO_OCUPACIONALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cARGO_OCUPACIONALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cARGO_OCUPACIONALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cARGO_OCUPACIONALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rADIOSTableAdapter, Me._rADIOSTableAdapter.Connection)
                    Me._rADIOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rADIOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rADIOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rADIOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rADIOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cHALECOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cHALECOSTableAdapter, Me._cHALECOSTableAdapter.Connection)
                    Me._cHALECOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cHALECOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cHALECOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cHALECOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cHALECOSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._aCTIVO_FIJO_GENERALTableAdapter) Is Nothing) Then
                    Me._aCTIVO_FIJO_GENERALTableAdapter.Connection = CType(revertConnections(Me._aCTIVO_FIJO_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aCTIVO_FIJO_GENERALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aRMASTableAdapter) Is Nothing) Then
                    Me._aRMASTableAdapter.Connection = CType(revertConnections(Me._aRMASTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aRMASTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cAMARAS_SEGURIDADTableAdapter) Is Nothing) Then
                    Me._cAMARAS_SEGURIDADTableAdapter.Connection = CType(revertConnections(Me._cAMARAS_SEGURIDADTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cAMARAS_SEGURIDADTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eQUIPOS_AMBIENTACIONTableAdapter) Is Nothing) Then
                    Me._eQUIPOS_AMBIENTACIONTableAdapter.Connection = CType(revertConnections(Me._eQUIPOS_AMBIENTACIONTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_AMBIENTACIONTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eQUIPOS_COCINATableAdapter) Is Nothing) Then
                    Me._eQUIPOS_COCINATableAdapter.Connection = CType(revertConnections(Me._eQUIPOS_COCINATableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_COCINATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eQUIPOS_COMPUTOTableAdapter) Is Nothing) Then
                    Me._eQUIPOS_COMPUTOTableAdapter.Connection = CType(revertConnections(Me._eQUIPOS_COMPUTOTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_COMPUTOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter) Is Nothing) Then
                    Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Connection = CType(revertConnections(Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_COMUNICACION_TELEFONIATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eQUIPOS_OFICINATableAdapter) Is Nothing) Then
                    Me._eQUIPOS_OFICINATableAdapter.Connection = CType(revertConnections(Me._eQUIPOS_OFICINATableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_OFICINATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter) Is Nothing) Then
                    Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Connection = CType(revertConnections(Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eQUIPOS_SEGURIDAD_INDUSTRIALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._gENERADORESTableAdapter) Is Nothing) Then
                    Me._gENERADORESTableAdapter.Connection = CType(revertConnections(Me._gENERADORESTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._gENERADORESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lIBRO_COLECCIONESTableAdapter) Is Nothing) Then
                    Me._lIBRO_COLECCIONESTableAdapter.Connection = CType(revertConnections(Me._lIBRO_COLECCIONESTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._lIBRO_COLECCIONESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mUEBLES_OFICINATableAdapter) Is Nothing) Then
                    Me._mUEBLES_OFICINATableAdapter.Connection = CType(revertConnections(Me._mUEBLES_OFICINATableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mUEBLES_OFICINATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sOFTWARETableAdapter) Is Nothing) Then
                    Me._sOFTWARETableAdapter.Connection = CType(revertConnections(Me._sOFTWARETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sOFTWARETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vEHICULOSTableAdapter) Is Nothing) Then
                    Me._vEHICULOSTableAdapter.Connection = CType(revertConnections(Me._vEHICULOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vEHICULOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tERRENOSTableAdapter) Is Nothing) Then
                    Me._tERRENOSTableAdapter.Connection = CType(revertConnections(Me._tERRENOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tERRENOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    Me._pERSONALTableAdapter.Connection = CType(revertConnections(Me._pERSONALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pERSONALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eMPRESA_GENERALTableAdapter) Is Nothing) Then
                    Me._eMPRESA_GENERALTableAdapter.Connection = CType(revertConnections(Me._eMPRESA_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eMPRESA_GENERALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aREA_GENERALTableAdapter) Is Nothing) Then
                    Me._aREA_GENERALTableAdapter.Connection = CType(revertConnections(Me._aREA_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aREA_GENERALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sUCURSAL_GENERALTableAdapter) Is Nothing) Then
                    Me._sUCURSAL_GENERALTableAdapter.Connection = CType(revertConnections(Me._sUCURSAL_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sUCURSAL_GENERALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._gERENCIAS_GENERALTableAdapter) Is Nothing) Then
                    Me._gERENCIAS_GENERALTableAdapter.Connection = CType(revertConnections(Me._gERENCIAS_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._gERENCIAS_GENERALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cARGO_OCUPACIONALTableAdapter) Is Nothing) Then
                    Me._cARGO_OCUPACIONALTableAdapter.Connection = CType(revertConnections(Me._cARGO_OCUPACIONALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cARGO_OCUPACIONALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rADIOSTableAdapter) Is Nothing) Then
                    Me._rADIOSTableAdapter.Connection = CType(revertConnections(Me._rADIOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rADIOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cHALECOSTableAdapter) Is Nothing) Then
                    Me._cHALECOSTableAdapter.Connection = CType(revertConnections(Me._cHALECOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cHALECOSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
