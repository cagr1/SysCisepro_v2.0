'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsProveedores"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsProveedores
    Inherits Global.System.Data.DataSet
    
    Private tableseleccionarProveedoresPorIdSecuencial As seleccionarProveedoresPorIdSecuencialDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("seleccionarProveedoresPorIdSecuencial")) Is Nothing) Then
                MyBase.Tables.Add(New seleccionarProveedoresPorIdSecuencialDataTable(ds.Tables("seleccionarProveedoresPorIdSecuencial")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property seleccionarProveedoresPorIdSecuencial() As seleccionarProveedoresPorIdSecuencialDataTable
        Get
            Return Me.tableseleccionarProveedoresPorIdSecuencial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsProveedores = CType(MyBase.Clone,dsProveedores)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("seleccionarProveedoresPorIdSecuencial")) Is Nothing) Then
                MyBase.Tables.Add(New seleccionarProveedoresPorIdSecuencialDataTable(ds.Tables("seleccionarProveedoresPorIdSecuencial")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableseleccionarProveedoresPorIdSecuencial = CType(MyBase.Tables("seleccionarProveedoresPorIdSecuencial"),seleccionarProveedoresPorIdSecuencialDataTable)
        If (initTable = true) Then
            If (Not (Me.tableseleccionarProveedoresPorIdSecuencial) Is Nothing) Then
                Me.tableseleccionarProveedoresPorIdSecuencial.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsProveedores"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsProveedores.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableseleccionarProveedoresPorIdSecuencial = New seleccionarProveedoresPorIdSecuencialDataTable()
        MyBase.Tables.Add(Me.tableseleccionarProveedoresPorIdSecuencial)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeseleccionarProveedoresPorIdSecuencial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsProveedores = New dsProveedores()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub seleccionarProveedoresPorIdSecuencialRowChangeEventHandler(ByVal sender As Object, ByVal e As seleccionarProveedoresPorIdSecuencialRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class seleccionarProveedoresPorIdSecuencialDataTable
        Inherits Global.System.Data.TypedTableBase(Of seleccionarProveedoresPorIdSecuencialRow)
        
        Private columnID_SECUENCIAL_ITEM As Global.System.Data.DataColumn
        
        Private columnCODIGO_SECUENCIAL_ITEM As Global.System.Data.DataColumn
        
        Private columnNOMBRE_SECUENCIAL_ITEM As Global.System.Data.DataColumn
        
        Private columnFECHA_SECUENCIAL_ITEM As Global.System.Data.DataColumn
        
        Private columnID_MARCA As Global.System.Data.DataColumn
        
        Private columnID_MODELO As Global.System.Data.DataColumn
        
        Private columnID_MATERIAL As Global.System.Data.DataColumn
        
        Private columnID_COLOR As Global.System.Data.DataColumn
        
        Private columnID_UNIDAD_MEDIDA As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnESTADO_SECUENCIAL_ITEM As Global.System.Data.DataColumn
        
        Private columnID_LOTE As Global.System.Data.DataColumn
        
        Private columnID_SECUENCIAL_ITEM1 As Global.System.Data.DataColumn
        
        Private columnID_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnID_PROVEEDOR_GENERAL1 As Global.System.Data.DataColumn
        
        Private columnFECHA_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnRUC_CI_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnRAZON_SOCIAL_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnNOMBRE_COMERCIAL_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnTIPO_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnCONTABILIDAD_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnCONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnDIRECCION_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnID_CIUDAD As Global.System.Data.DataColumn
        
        Private columnTELEFONO_1_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnTELEFONO_2_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnEMAIL_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        Private columnESTADO_PROVEEDOR_GENERAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "seleccionarProveedoresPorIdSecuencial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_SECUENCIAL_ITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SECUENCIAL_ITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_SECUENCIAL_ITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_SECUENCIAL_ITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_SECUENCIAL_ITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_SECUENCIAL_ITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_SECUENCIAL_ITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_SECUENCIAL_ITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_COLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_COLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_UNIDAD_MEDIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_UNIDAD_MEDIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_SECUENCIAL_ITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_SECUENCIAL_ITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_LOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_SECUENCIAL_ITEM1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SECUENCIAL_ITEM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_PROVEEDOR_GENERAL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PROVEEDOR_GENERAL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RUC_CI_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUC_CI_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RAZON_SOCIAL_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZON_SOCIAL_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_COMERCIAL_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_COMERCIAL_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONTABILIDAD_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTABILIDAD_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DIRECCION_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELEFONO_1_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONO_1_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELEFONO_2_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONO_2_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property EMAIL_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_PROVEEDOR_GENERALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_PROVEEDOR_GENERAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As seleccionarProveedoresPorIdSecuencialRow
            Get
                Return CType(Me.Rows(index),seleccionarProveedoresPorIdSecuencialRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event seleccionarProveedoresPorIdSecuencialRowChanging As seleccionarProveedoresPorIdSecuencialRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event seleccionarProveedoresPorIdSecuencialRowChanged As seleccionarProveedoresPorIdSecuencialRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event seleccionarProveedoresPorIdSecuencialRowDeleting As seleccionarProveedoresPorIdSecuencialRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event seleccionarProveedoresPorIdSecuencialRowDeleted As seleccionarProveedoresPorIdSecuencialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddseleccionarProveedoresPorIdSecuencialRow(ByVal row As seleccionarProveedoresPorIdSecuencialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddseleccionarProveedoresPorIdSecuencialRow( _
                    ByVal ID_SECUENCIAL_ITEM As Long,  _
                    ByVal CODIGO_SECUENCIAL_ITEM As String,  _
                    ByVal NOMBRE_SECUENCIAL_ITEM As String,  _
                    ByVal FECHA_SECUENCIAL_ITEM As Date,  _
                    ByVal ID_MARCA As Integer,  _
                    ByVal ID_MODELO As Integer,  _
                    ByVal ID_MATERIAL As Integer,  _
                    ByVal ID_COLOR As Integer,  _
                    ByVal ID_UNIDAD_MEDIDA As Integer,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal ESTADO_SECUENCIAL_ITEM As Integer,  _
                    ByVal ID_LOTE As Long,  _
                    ByVal ID_SECUENCIAL_ITEM1 As Long,  _
                    ByVal ID_PROVEEDOR_GENERAL As Integer,  _
                    ByVal FECHA As Date,  _
                    ByVal ESTADO As Integer,  _
                    ByVal ID_PROVEEDOR_GENERAL1 As Integer,  _
                    ByVal FECHA_PROVEEDOR_GENERAL As Date,  _
                    ByVal RUC_CI_PROVEEDOR_GENERAL As String,  _
                    ByVal RAZON_SOCIAL_PROVEEDOR_GENERAL As String,  _
                    ByVal NOMBRE_COMERCIAL_PROVEEDOR_GENERAL As String,  _
                    ByVal TIPO_PROVEEDOR_GENERAL As String,  _
                    ByVal CONTABILIDAD_PROVEEDOR_GENERAL As String,  _
                    ByVal CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL As String,  _
                    ByVal DIRECCION_PROVEEDOR_GENERAL As String,  _
                    ByVal ID_CIUDAD As Integer,  _
                    ByVal TELEFONO_1_PROVEEDOR_GENERAL As String,  _
                    ByVal TELEFONO_2_PROVEEDOR_GENERAL As String,  _
                    ByVal EMAIL_PROVEEDOR_GENERAL As String,  _
                    ByVal ESTADO_PROVEEDOR_GENERAL As Integer) As seleccionarProveedoresPorIdSecuencialRow
            Dim rowseleccionarProveedoresPorIdSecuencialRow As seleccionarProveedoresPorIdSecuencialRow = CType(Me.NewRow,seleccionarProveedoresPorIdSecuencialRow)
            Dim columnValuesArray() As Object = New Object() {ID_SECUENCIAL_ITEM, CODIGO_SECUENCIAL_ITEM, NOMBRE_SECUENCIAL_ITEM, FECHA_SECUENCIAL_ITEM, ID_MARCA, ID_MODELO, ID_MATERIAL, ID_COLOR, ID_UNIDAD_MEDIDA, DESCRIPCION, ESTADO_SECUENCIAL_ITEM, ID_LOTE, ID_SECUENCIAL_ITEM1, ID_PROVEEDOR_GENERAL, FECHA, ESTADO, ID_PROVEEDOR_GENERAL1, FECHA_PROVEEDOR_GENERAL, RUC_CI_PROVEEDOR_GENERAL, RAZON_SOCIAL_PROVEEDOR_GENERAL, NOMBRE_COMERCIAL_PROVEEDOR_GENERAL, TIPO_PROVEEDOR_GENERAL, CONTABILIDAD_PROVEEDOR_GENERAL, CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL, DIRECCION_PROVEEDOR_GENERAL, ID_CIUDAD, TELEFONO_1_PROVEEDOR_GENERAL, TELEFONO_2_PROVEEDOR_GENERAL, EMAIL_PROVEEDOR_GENERAL, ESTADO_PROVEEDOR_GENERAL}
            rowseleccionarProveedoresPorIdSecuencialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowseleccionarProveedoresPorIdSecuencialRow)
            Return rowseleccionarProveedoresPorIdSecuencialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_SECUENCIAL_ITEMID_PROVEEDOR_GENERAL1(ByVal ID_SECUENCIAL_ITEM As Long, ByVal ID_PROVEEDOR_GENERAL1 As Integer) As seleccionarProveedoresPorIdSecuencialRow
            Return CType(Me.Rows.Find(New Object() {ID_SECUENCIAL_ITEM, ID_PROVEEDOR_GENERAL1}),seleccionarProveedoresPorIdSecuencialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As seleccionarProveedoresPorIdSecuencialDataTable = CType(MyBase.Clone,seleccionarProveedoresPorIdSecuencialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New seleccionarProveedoresPorIdSecuencialDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_SECUENCIAL_ITEM = MyBase.Columns("ID_SECUENCIAL_ITEM")
            Me.columnCODIGO_SECUENCIAL_ITEM = MyBase.Columns("CODIGO_SECUENCIAL_ITEM")
            Me.columnNOMBRE_SECUENCIAL_ITEM = MyBase.Columns("NOMBRE_SECUENCIAL_ITEM")
            Me.columnFECHA_SECUENCIAL_ITEM = MyBase.Columns("FECHA_SECUENCIAL_ITEM")
            Me.columnID_MARCA = MyBase.Columns("ID_MARCA")
            Me.columnID_MODELO = MyBase.Columns("ID_MODELO")
            Me.columnID_MATERIAL = MyBase.Columns("ID_MATERIAL")
            Me.columnID_COLOR = MyBase.Columns("ID_COLOR")
            Me.columnID_UNIDAD_MEDIDA = MyBase.Columns("ID_UNIDAD_MEDIDA")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnESTADO_SECUENCIAL_ITEM = MyBase.Columns("ESTADO_SECUENCIAL_ITEM")
            Me.columnID_LOTE = MyBase.Columns("ID_LOTE")
            Me.columnID_SECUENCIAL_ITEM1 = MyBase.Columns("ID_SECUENCIAL_ITEM1")
            Me.columnID_PROVEEDOR_GENERAL = MyBase.Columns("ID_PROVEEDOR_GENERAL")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnID_PROVEEDOR_GENERAL1 = MyBase.Columns("ID_PROVEEDOR_GENERAL1")
            Me.columnFECHA_PROVEEDOR_GENERAL = MyBase.Columns("FECHA_PROVEEDOR_GENERAL")
            Me.columnRUC_CI_PROVEEDOR_GENERAL = MyBase.Columns("RUC_CI_PROVEEDOR_GENERAL")
            Me.columnRAZON_SOCIAL_PROVEEDOR_GENERAL = MyBase.Columns("RAZON_SOCIAL_PROVEEDOR_GENERAL")
            Me.columnNOMBRE_COMERCIAL_PROVEEDOR_GENERAL = MyBase.Columns("NOMBRE_COMERCIAL_PROVEEDOR_GENERAL")
            Me.columnTIPO_PROVEEDOR_GENERAL = MyBase.Columns("TIPO_PROVEEDOR_GENERAL")
            Me.columnCONTABILIDAD_PROVEEDOR_GENERAL = MyBase.Columns("CONTABILIDAD_PROVEEDOR_GENERAL")
            Me.columnCONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL = MyBase.Columns("CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL")
            Me.columnDIRECCION_PROVEEDOR_GENERAL = MyBase.Columns("DIRECCION_PROVEEDOR_GENERAL")
            Me.columnID_CIUDAD = MyBase.Columns("ID_CIUDAD")
            Me.columnTELEFONO_1_PROVEEDOR_GENERAL = MyBase.Columns("TELEFONO_1_PROVEEDOR_GENERAL")
            Me.columnTELEFONO_2_PROVEEDOR_GENERAL = MyBase.Columns("TELEFONO_2_PROVEEDOR_GENERAL")
            Me.columnEMAIL_PROVEEDOR_GENERAL = MyBase.Columns("EMAIL_PROVEEDOR_GENERAL")
            Me.columnESTADO_PROVEEDOR_GENERAL = MyBase.Columns("ESTADO_PROVEEDOR_GENERAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_SECUENCIAL_ITEM = New Global.System.Data.DataColumn("ID_SECUENCIAL_ITEM", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SECUENCIAL_ITEM)
            Me.columnCODIGO_SECUENCIAL_ITEM = New Global.System.Data.DataColumn("CODIGO_SECUENCIAL_ITEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_SECUENCIAL_ITEM)
            Me.columnNOMBRE_SECUENCIAL_ITEM = New Global.System.Data.DataColumn("NOMBRE_SECUENCIAL_ITEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_SECUENCIAL_ITEM)
            Me.columnFECHA_SECUENCIAL_ITEM = New Global.System.Data.DataColumn("FECHA_SECUENCIAL_ITEM", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_SECUENCIAL_ITEM)
            Me.columnID_MARCA = New Global.System.Data.DataColumn("ID_MARCA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MARCA)
            Me.columnID_MODELO = New Global.System.Data.DataColumn("ID_MODELO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MODELO)
            Me.columnID_MATERIAL = New Global.System.Data.DataColumn("ID_MATERIAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MATERIAL)
            Me.columnID_COLOR = New Global.System.Data.DataColumn("ID_COLOR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_COLOR)
            Me.columnID_UNIDAD_MEDIDA = New Global.System.Data.DataColumn("ID_UNIDAD_MEDIDA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_UNIDAD_MEDIDA)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnESTADO_SECUENCIAL_ITEM = New Global.System.Data.DataColumn("ESTADO_SECUENCIAL_ITEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_SECUENCIAL_ITEM)
            Me.columnID_LOTE = New Global.System.Data.DataColumn("ID_LOTE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_LOTE)
            Me.columnID_SECUENCIAL_ITEM1 = New Global.System.Data.DataColumn("ID_SECUENCIAL_ITEM1", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SECUENCIAL_ITEM1)
            Me.columnID_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("ID_PROVEEDOR_GENERAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PROVEEDOR_GENERAL)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnID_PROVEEDOR_GENERAL1 = New Global.System.Data.DataColumn("ID_PROVEEDOR_GENERAL1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PROVEEDOR_GENERAL1)
            Me.columnFECHA_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("FECHA_PROVEEDOR_GENERAL", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_PROVEEDOR_GENERAL)
            Me.columnRUC_CI_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("RUC_CI_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC_CI_PROVEEDOR_GENERAL)
            Me.columnRAZON_SOCIAL_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("RAZON_SOCIAL_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZON_SOCIAL_PROVEEDOR_GENERAL)
            Me.columnNOMBRE_COMERCIAL_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("NOMBRE_COMERCIAL_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_COMERCIAL_PROVEEDOR_GENERAL)
            Me.columnTIPO_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("TIPO_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_PROVEEDOR_GENERAL)
            Me.columnCONTABILIDAD_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("CONTABILIDAD_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTABILIDAD_PROVEEDOR_GENERAL)
            Me.columnCONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL)
            Me.columnDIRECCION_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("DIRECCION_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION_PROVEEDOR_GENERAL)
            Me.columnID_CIUDAD = New Global.System.Data.DataColumn("ID_CIUDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CIUDAD)
            Me.columnTELEFONO_1_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("TELEFONO_1_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONO_1_PROVEEDOR_GENERAL)
            Me.columnTELEFONO_2_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("TELEFONO_2_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONO_2_PROVEEDOR_GENERAL)
            Me.columnEMAIL_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("EMAIL_PROVEEDOR_GENERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL_PROVEEDOR_GENERAL)
            Me.columnESTADO_PROVEEDOR_GENERAL = New Global.System.Data.DataColumn("ESTADO_PROVEEDOR_GENERAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_PROVEEDOR_GENERAL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_SECUENCIAL_ITEM, Me.columnID_PROVEEDOR_GENERAL1}, true))
            Me.columnID_SECUENCIAL_ITEM.AllowDBNull = false
            Me.columnCODIGO_SECUENCIAL_ITEM.AllowDBNull = false
            Me.columnCODIGO_SECUENCIAL_ITEM.MaxLength = 2147483647
            Me.columnNOMBRE_SECUENCIAL_ITEM.AllowDBNull = false
            Me.columnNOMBRE_SECUENCIAL_ITEM.MaxLength = 2147483647
            Me.columnFECHA_SECUENCIAL_ITEM.AllowDBNull = false
            Me.columnID_MARCA.AllowDBNull = false
            Me.columnID_MODELO.AllowDBNull = false
            Me.columnID_MATERIAL.AllowDBNull = false
            Me.columnID_COLOR.AllowDBNull = false
            Me.columnID_UNIDAD_MEDIDA.AllowDBNull = false
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
            Me.columnESTADO_SECUENCIAL_ITEM.AllowDBNull = false
            Me.columnID_SECUENCIAL_ITEM1.AllowDBNull = false
            Me.columnID_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnFECHA.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
            Me.columnID_PROVEEDOR_GENERAL1.AllowDBNull = false
            Me.columnFECHA_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnRUC_CI_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnRUC_CI_PROVEEDOR_GENERAL.MaxLength = 13
            Me.columnRAZON_SOCIAL_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnRAZON_SOCIAL_PROVEEDOR_GENERAL.MaxLength = 50
            Me.columnNOMBRE_COMERCIAL_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnNOMBRE_COMERCIAL_PROVEEDOR_GENERAL.MaxLength = 50
            Me.columnTIPO_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnTIPO_PROVEEDOR_GENERAL.MaxLength = 50
            Me.columnCONTABILIDAD_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnCONTABILIDAD_PROVEEDOR_GENERAL.MaxLength = 5
            Me.columnCONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnCONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL.MaxLength = 5
            Me.columnDIRECCION_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnDIRECCION_PROVEEDOR_GENERAL.MaxLength = 2147483647
            Me.columnTELEFONO_1_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnTELEFONO_1_PROVEEDOR_GENERAL.MaxLength = 25
            Me.columnTELEFONO_2_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnTELEFONO_2_PROVEEDOR_GENERAL.MaxLength = 25
            Me.columnEMAIL_PROVEEDOR_GENERAL.AllowDBNull = false
            Me.columnEMAIL_PROVEEDOR_GENERAL.MaxLength = 50
            Me.columnESTADO_PROVEEDOR_GENERAL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewseleccionarProveedoresPorIdSecuencialRow() As seleccionarProveedoresPorIdSecuencialRow
            Return CType(Me.NewRow,seleccionarProveedoresPorIdSecuencialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New seleccionarProveedoresPorIdSecuencialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(seleccionarProveedoresPorIdSecuencialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.seleccionarProveedoresPorIdSecuencialRowChangedEvent) Is Nothing) Then
                RaiseEvent seleccionarProveedoresPorIdSecuencialRowChanged(Me, New seleccionarProveedoresPorIdSecuencialRowChangeEvent(CType(e.Row,seleccionarProveedoresPorIdSecuencialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.seleccionarProveedoresPorIdSecuencialRowChangingEvent) Is Nothing) Then
                RaiseEvent seleccionarProveedoresPorIdSecuencialRowChanging(Me, New seleccionarProveedoresPorIdSecuencialRowChangeEvent(CType(e.Row,seleccionarProveedoresPorIdSecuencialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.seleccionarProveedoresPorIdSecuencialRowDeletedEvent) Is Nothing) Then
                RaiseEvent seleccionarProveedoresPorIdSecuencialRowDeleted(Me, New seleccionarProveedoresPorIdSecuencialRowChangeEvent(CType(e.Row,seleccionarProveedoresPorIdSecuencialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.seleccionarProveedoresPorIdSecuencialRowDeletingEvent) Is Nothing) Then
                RaiseEvent seleccionarProveedoresPorIdSecuencialRowDeleting(Me, New seleccionarProveedoresPorIdSecuencialRowChangeEvent(CType(e.Row,seleccionarProveedoresPorIdSecuencialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveseleccionarProveedoresPorIdSecuencialRow(ByVal row As seleccionarProveedoresPorIdSecuencialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsProveedores = New dsProveedores()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "seleccionarProveedoresPorIdSecuencialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class seleccionarProveedoresPorIdSecuencialRow
        Inherits Global.System.Data.DataRow
        
        Private tableseleccionarProveedoresPorIdSecuencial As seleccionarProveedoresPorIdSecuencialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableseleccionarProveedoresPorIdSecuencial = CType(Me.Table,seleccionarProveedoresPorIdSecuencialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_SECUENCIAL_ITEM() As Long
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_SECUENCIAL_ITEMColumn),Long)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_SECUENCIAL_ITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_SECUENCIAL_ITEM() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.CODIGO_SECUENCIAL_ITEMColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.CODIGO_SECUENCIAL_ITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_SECUENCIAL_ITEM() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.NOMBRE_SECUENCIAL_ITEMColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.NOMBRE_SECUENCIAL_ITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_SECUENCIAL_ITEM() As Date
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.FECHA_SECUENCIAL_ITEMColumn),Date)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.FECHA_SECUENCIAL_ITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_MARCA() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_MARCAColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_MODELO() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_MODELOColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_MATERIAL() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_MATERIALColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_COLOR() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_COLORColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_COLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_UNIDAD_MEDIDA() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_UNIDAD_MEDIDAColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_UNIDAD_MEDIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_SECUENCIAL_ITEM() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ESTADO_SECUENCIAL_ITEMColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ESTADO_SECUENCIAL_ITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_LOTE() As Long
            Get
                Try 
                    Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_LOTEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ID_LOTE' de la tabla 'seleccionarProveedoresPorIdSecuenci"& _ 
                            "al' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_SECUENCIAL_ITEM1() As Long
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_SECUENCIAL_ITEM1Column),Long)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_SECUENCIAL_ITEM1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_PROVEEDOR_GENERAL() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_PROVEEDOR_GENERALColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA() As Date
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ESTADOColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_PROVEEDOR_GENERAL1() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_PROVEEDOR_GENERAL1Column),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_PROVEEDOR_GENERAL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_PROVEEDOR_GENERAL() As Date
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.FECHA_PROVEEDOR_GENERALColumn),Date)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.FECHA_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RUC_CI_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.RUC_CI_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.RUC_CI_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RAZON_SOCIAL_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.RAZON_SOCIAL_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.RAZON_SOCIAL_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_COMERCIAL_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.NOMBRE_COMERCIAL_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.NOMBRE_COMERCIAL_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.TIPO_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.TIPO_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONTABILIDAD_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.CONTABILIDAD_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.CONTABILIDAD_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DIRECCION_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.DIRECCION_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.DIRECCION_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_CIUDAD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_CIUDADColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ID_CIUDAD' de la tabla 'seleccionarProveedoresPorIdSecuen"& _ 
                            "cial' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TELEFONO_1_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.TELEFONO_1_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.TELEFONO_1_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TELEFONO_2_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.TELEFONO_2_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.TELEFONO_2_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property EMAIL_PROVEEDOR_GENERAL() As String
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.EMAIL_PROVEEDOR_GENERALColumn),String)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.EMAIL_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_PROVEEDOR_GENERAL() As Integer
            Get
                Return CType(Me(Me.tableseleccionarProveedoresPorIdSecuencial.ESTADO_PROVEEDOR_GENERALColumn),Integer)
            End Get
            Set
                Me(Me.tableseleccionarProveedoresPorIdSecuencial.ESTADO_PROVEEDOR_GENERALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsID_LOTENull() As Boolean
            Return Me.IsNull(Me.tableseleccionarProveedoresPorIdSecuencial.ID_LOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetID_LOTENull()
            Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_LOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsID_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableseleccionarProveedoresPorIdSecuencial.ID_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetID_CIUDADNull()
            Me(Me.tableseleccionarProveedoresPorIdSecuencial.ID_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class seleccionarProveedoresPorIdSecuencialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As seleccionarProveedoresPorIdSecuencialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As seleccionarProveedoresPorIdSecuencialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As seleccionarProveedoresPorIdSecuencialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsProveedoresTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class seleccionarProveedoresPorIdSecuencialTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "seleccionarProveedoresPorIdSecuencial"
            tableMapping.ColumnMappings.Add("ID_SECUENCIAL_ITEM", "ID_SECUENCIAL_ITEM")
            tableMapping.ColumnMappings.Add("CODIGO_SECUENCIAL_ITEM", "CODIGO_SECUENCIAL_ITEM")
            tableMapping.ColumnMappings.Add("NOMBRE_SECUENCIAL_ITEM", "NOMBRE_SECUENCIAL_ITEM")
            tableMapping.ColumnMappings.Add("FECHA_SECUENCIAL_ITEM", "FECHA_SECUENCIAL_ITEM")
            tableMapping.ColumnMappings.Add("ID_MARCA", "ID_MARCA")
            tableMapping.ColumnMappings.Add("ID_MODELO", "ID_MODELO")
            tableMapping.ColumnMappings.Add("ID_MATERIAL", "ID_MATERIAL")
            tableMapping.ColumnMappings.Add("ID_COLOR", "ID_COLOR")
            tableMapping.ColumnMappings.Add("ID_UNIDAD_MEDIDA", "ID_UNIDAD_MEDIDA")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("ESTADO_SECUENCIAL_ITEM", "ESTADO_SECUENCIAL_ITEM")
            tableMapping.ColumnMappings.Add("ID_LOTE", "ID_LOTE")
            tableMapping.ColumnMappings.Add("ID_SECUENCIAL_ITEM1", "ID_SECUENCIAL_ITEM1")
            tableMapping.ColumnMappings.Add("ID_PROVEEDOR_GENERAL", "ID_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            tableMapping.ColumnMappings.Add("ID_PROVEEDOR_GENERAL1", "ID_PROVEEDOR_GENERAL1")
            tableMapping.ColumnMappings.Add("FECHA_PROVEEDOR_GENERAL", "FECHA_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("RUC_CI_PROVEEDOR_GENERAL", "RUC_CI_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("RAZON_SOCIAL_PROVEEDOR_GENERAL", "RAZON_SOCIAL_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("NOMBRE_COMERCIAL_PROVEEDOR_GENERAL", "NOMBRE_COMERCIAL_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("TIPO_PROVEEDOR_GENERAL", "TIPO_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("CONTABILIDAD_PROVEEDOR_GENERAL", "CONTABILIDAD_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL", "CONTRIBUYENTE_ESPECIAL_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("DIRECCION_PROVEEDOR_GENERAL", "DIRECCION_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("ID_CIUDAD", "ID_CIUDAD")
            tableMapping.ColumnMappings.Add("TELEFONO_1_PROVEEDOR_GENERAL", "TELEFONO_1_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("TELEFONO_2_PROVEEDOR_GENERAL", "TELEFONO_2_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("EMAIL_PROVEEDOR_GENERAL", "EMAIL_PROVEEDOR_GENERAL")
            tableMapping.ColumnMappings.Add("ESTADO_PROVEEDOR_GENERAL", "ESTADO_PROVEEDOR_GENERAL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.seleccionarProveedoresPorIdSecuencial"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_SECUENCIAL_ITEM", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 19, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsProveedores.seleccionarProveedoresPorIdSecuencialDataTable, ByVal ID_SECUENCIAL_ITEM As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ID_SECUENCIAL_ITEM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_SECUENCIAL_ITEM.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ID_SECUENCIAL_ITEM As Global.System.Nullable(Of Long)) As dsProveedores.seleccionarProveedoresPorIdSecuencialDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ID_SECUENCIAL_ITEM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_SECUENCIAL_ITEM.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsProveedores.seleccionarProveedoresPorIdSecuencialDataTable = New dsProveedores.seleccionarProveedoresPorIdSecuencialDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsProveedores, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsProveedores, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsProveedores, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsProveedores) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
