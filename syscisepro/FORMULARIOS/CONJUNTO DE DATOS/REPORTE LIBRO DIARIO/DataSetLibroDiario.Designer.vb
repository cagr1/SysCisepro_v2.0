'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetLibroDiario"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetLibroDiario
    Inherits Global.System.Data.DataSet
    
    Private tableLIBRO_DIARIO_GENERAL As LIBRO_DIARIO_GENERALDataTable
    
    Private tableASIENTOS_LIBRO_DIARIO As ASIENTOS_LIBRO_DIARIODataTable
    
    Private relationFK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LIBRO_DIARIO_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New LIBRO_DIARIO_GENERALDataTable(ds.Tables("LIBRO_DIARIO_GENERAL")))
            End If
            If (Not (ds.Tables("ASIENTOS_LIBRO_DIARIO")) Is Nothing) Then
                MyBase.Tables.Add(New ASIENTOS_LIBRO_DIARIODataTable(ds.Tables("ASIENTOS_LIBRO_DIARIO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LIBRO_DIARIO_GENERAL() As LIBRO_DIARIO_GENERALDataTable
        Get
            Return Me.tableLIBRO_DIARIO_GENERAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ASIENTOS_LIBRO_DIARIO() As ASIENTOS_LIBRO_DIARIODataTable
        Get
            Return Me.tableASIENTOS_LIBRO_DIARIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetLibroDiario = CType(MyBase.Clone,DataSetLibroDiario)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("LIBRO_DIARIO_GENERAL")) Is Nothing) Then
                MyBase.Tables.Add(New LIBRO_DIARIO_GENERALDataTable(ds.Tables("LIBRO_DIARIO_GENERAL")))
            End If
            If (Not (ds.Tables("ASIENTOS_LIBRO_DIARIO")) Is Nothing) Then
                MyBase.Tables.Add(New ASIENTOS_LIBRO_DIARIODataTable(ds.Tables("ASIENTOS_LIBRO_DIARIO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLIBRO_DIARIO_GENERAL = CType(MyBase.Tables("LIBRO_DIARIO_GENERAL"),LIBRO_DIARIO_GENERALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLIBRO_DIARIO_GENERAL) Is Nothing) Then
                Me.tableLIBRO_DIARIO_GENERAL.InitVars
            End If
        End If
        Me.tableASIENTOS_LIBRO_DIARIO = CType(MyBase.Tables("ASIENTOS_LIBRO_DIARIO"),ASIENTOS_LIBRO_DIARIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableASIENTOS_LIBRO_DIARIO) Is Nothing) Then
                Me.tableASIENTOS_LIBRO_DIARIO.InitVars
            End If
        End If
        Me.relationFK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL = Me.Relations("FK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetLibroDiario"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetLibroDiario.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLIBRO_DIARIO_GENERAL = New LIBRO_DIARIO_GENERALDataTable()
        MyBase.Tables.Add(Me.tableLIBRO_DIARIO_GENERAL)
        Me.tableASIENTOS_LIBRO_DIARIO = New ASIENTOS_LIBRO_DIARIODataTable()
        MyBase.Tables.Add(Me.tableASIENTOS_LIBRO_DIARIO)
        Me.relationFK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL = New Global.System.Data.DataRelation("FK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL", New Global.System.Data.DataColumn() {Me.tableLIBRO_DIARIO_GENERAL.ID_LIBRO_DIARIOColumn}, New Global.System.Data.DataColumn() {Me.tableASIENTOS_LIBRO_DIARIO.ID_LIBRO_DIARIOColumn}, false)
        Me.Relations.Add(Me.relationFK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeLIBRO_DIARIO_GENERAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeASIENTOS_LIBRO_DIARIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetLibroDiario = New DataSetLibroDiario()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub LIBRO_DIARIO_GENERALRowChangeEventHandler(ByVal sender As Object, ByVal e As LIBRO_DIARIO_GENERALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub ASIENTOS_LIBRO_DIARIORowChangeEventHandler(ByVal sender As Object, ByVal e As ASIENTOS_LIBRO_DIARIORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LIBRO_DIARIO_GENERALDataTable
        Inherits Global.System.Data.TypedTableBase(Of LIBRO_DIARIO_GENERALRow)
        
        Private columnID_LIBRO_DIARIO As Global.System.Data.DataColumn
        
        Private columnFECHA_LIBRO_DIARIO As Global.System.Data.DataColumn
        
        Private columnTOTAL_DEBE_LIBRO_DIARIO As Global.System.Data.DataColumn
        
        Private columnTOTAL_HABER_LIBRO_DIARIO As Global.System.Data.DataColumn
        
        Private columnESTADO_LIBRO_DIARIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LIBRO_DIARIO_GENERAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_LIBRO_DIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_LIBRO_DIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_LIBRO_DIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_LIBRO_DIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TOTAL_DEBE_LIBRO_DIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_DEBE_LIBRO_DIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TOTAL_HABER_LIBRO_DIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_HABER_LIBRO_DIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_LIBRO_DIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_LIBRO_DIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LIBRO_DIARIO_GENERALRow
            Get
                Return CType(Me.Rows(index),LIBRO_DIARIO_GENERALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LIBRO_DIARIO_GENERALRowChanging As LIBRO_DIARIO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LIBRO_DIARIO_GENERALRowChanged As LIBRO_DIARIO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LIBRO_DIARIO_GENERALRowDeleting As LIBRO_DIARIO_GENERALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LIBRO_DIARIO_GENERALRowDeleted As LIBRO_DIARIO_GENERALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddLIBRO_DIARIO_GENERALRow(ByVal row As LIBRO_DIARIO_GENERALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddLIBRO_DIARIO_GENERALRow(ByVal ID_LIBRO_DIARIO As Long, ByVal FECHA_LIBRO_DIARIO As Date, ByVal TOTAL_DEBE_LIBRO_DIARIO As Decimal, ByVal TOTAL_HABER_LIBRO_DIARIO As Decimal, ByVal ESTADO_LIBRO_DIARIO As String) As LIBRO_DIARIO_GENERALRow
            Dim rowLIBRO_DIARIO_GENERALRow As LIBRO_DIARIO_GENERALRow = CType(Me.NewRow,LIBRO_DIARIO_GENERALRow)
            Dim columnValuesArray() As Object = New Object() {ID_LIBRO_DIARIO, FECHA_LIBRO_DIARIO, TOTAL_DEBE_LIBRO_DIARIO, TOTAL_HABER_LIBRO_DIARIO, ESTADO_LIBRO_DIARIO}
            rowLIBRO_DIARIO_GENERALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLIBRO_DIARIO_GENERALRow)
            Return rowLIBRO_DIARIO_GENERALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_LIBRO_DIARIO(ByVal ID_LIBRO_DIARIO As Long) As LIBRO_DIARIO_GENERALRow
            Return CType(Me.Rows.Find(New Object() {ID_LIBRO_DIARIO}),LIBRO_DIARIO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LIBRO_DIARIO_GENERALDataTable = CType(MyBase.Clone,LIBRO_DIARIO_GENERALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LIBRO_DIARIO_GENERALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_LIBRO_DIARIO = MyBase.Columns("ID_LIBRO_DIARIO")
            Me.columnFECHA_LIBRO_DIARIO = MyBase.Columns("FECHA_LIBRO_DIARIO")
            Me.columnTOTAL_DEBE_LIBRO_DIARIO = MyBase.Columns("TOTAL_DEBE_LIBRO_DIARIO")
            Me.columnTOTAL_HABER_LIBRO_DIARIO = MyBase.Columns("TOTAL_HABER_LIBRO_DIARIO")
            Me.columnESTADO_LIBRO_DIARIO = MyBase.Columns("ESTADO_LIBRO_DIARIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_LIBRO_DIARIO = New Global.System.Data.DataColumn("ID_LIBRO_DIARIO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_LIBRO_DIARIO)
            Me.columnFECHA_LIBRO_DIARIO = New Global.System.Data.DataColumn("FECHA_LIBRO_DIARIO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_LIBRO_DIARIO)
            Me.columnTOTAL_DEBE_LIBRO_DIARIO = New Global.System.Data.DataColumn("TOTAL_DEBE_LIBRO_DIARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_DEBE_LIBRO_DIARIO)
            Me.columnTOTAL_HABER_LIBRO_DIARIO = New Global.System.Data.DataColumn("TOTAL_HABER_LIBRO_DIARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_HABER_LIBRO_DIARIO)
            Me.columnESTADO_LIBRO_DIARIO = New Global.System.Data.DataColumn("ESTADO_LIBRO_DIARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_LIBRO_DIARIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_LIBRO_DIARIO}, true))
            Me.columnID_LIBRO_DIARIO.AllowDBNull = false
            Me.columnID_LIBRO_DIARIO.Unique = true
            Me.columnFECHA_LIBRO_DIARIO.AllowDBNull = false
            Me.columnESTADO_LIBRO_DIARIO.AllowDBNull = false
            Me.columnESTADO_LIBRO_DIARIO.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewLIBRO_DIARIO_GENERALRow() As LIBRO_DIARIO_GENERALRow
            Return CType(Me.NewRow,LIBRO_DIARIO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LIBRO_DIARIO_GENERALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LIBRO_DIARIO_GENERALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LIBRO_DIARIO_GENERALRowChangedEvent) Is Nothing) Then
                RaiseEvent LIBRO_DIARIO_GENERALRowChanged(Me, New LIBRO_DIARIO_GENERALRowChangeEvent(CType(e.Row,LIBRO_DIARIO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LIBRO_DIARIO_GENERALRowChangingEvent) Is Nothing) Then
                RaiseEvent LIBRO_DIARIO_GENERALRowChanging(Me, New LIBRO_DIARIO_GENERALRowChangeEvent(CType(e.Row,LIBRO_DIARIO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LIBRO_DIARIO_GENERALRowDeletedEvent) Is Nothing) Then
                RaiseEvent LIBRO_DIARIO_GENERALRowDeleted(Me, New LIBRO_DIARIO_GENERALRowChangeEvent(CType(e.Row,LIBRO_DIARIO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LIBRO_DIARIO_GENERALRowDeletingEvent) Is Nothing) Then
                RaiseEvent LIBRO_DIARIO_GENERALRowDeleting(Me, New LIBRO_DIARIO_GENERALRowChangeEvent(CType(e.Row,LIBRO_DIARIO_GENERALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveLIBRO_DIARIO_GENERALRow(ByVal row As LIBRO_DIARIO_GENERALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetLibroDiario = New DataSetLibroDiario()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LIBRO_DIARIO_GENERALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ASIENTOS_LIBRO_DIARIODataTable
        Inherits Global.System.Data.TypedTableBase(Of ASIENTOS_LIBRO_DIARIORow)
        
        Private columnID_ASIENTO As Global.System.Data.DataColumn
        
        Private columnFECHA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnCODIGO_CUENTA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_CUENTA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnCONCEPTO_ASIENTO As Global.System.Data.DataColumn
        
        Private columnDETALLE_TRANSACCION_ASIENTO As Global.System.Data.DataColumn
        
        Private columnPROVINCIA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnCIUDAD_ASIENTO As Global.System.Data.DataColumn
        
        Private columnPARROQUIA_ASIENTO As Global.System.Data.DataColumn
        
        Private columnCENTRO_COSTO_ASIENTO As Global.System.Data.DataColumn
        
        Private columnVALOR_DEBE_ASIENTO As Global.System.Data.DataColumn
        
        Private columnVALOR_HABER_ASIENTO As Global.System.Data.DataColumn
        
        Private columnNUMERO_REGISTRO_ASIENTO As Global.System.Data.DataColumn
        
        Private columnDEBE_HABER As Global.System.Data.DataColumn
        
        Private columnCONCILIAR_ASIENTO As Global.System.Data.DataColumn
        
        Private columnESTADO_ASIENTO As Global.System.Data.DataColumn
        
        Private columnID_LIBRO_DIARIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ASIENTOS_LIBRO_DIARIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_CUENTA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CUENTA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_CUENTA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_CUENTA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONCEPTO_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONCEPTO_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DETALLE_TRANSACCION_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETALLE_TRANSACCION_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PROVINCIA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVINCIA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CIUDAD_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIUDAD_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PARROQUIA_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARROQUIA_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CENTRO_COSTO_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCENTRO_COSTO_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_DEBE_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_DEBE_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VALOR_HABER_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_HABER_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NUMERO_REGISTRO_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_REGISTRO_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DEBE_HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE_HABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONCILIAR_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONCILIAR_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ESTADO_ASIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO_ASIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ID_LIBRO_DIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_LIBRO_DIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ASIENTOS_LIBRO_DIARIORow
            Get
                Return CType(Me.Rows(index),ASIENTOS_LIBRO_DIARIORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ASIENTOS_LIBRO_DIARIORowChanging As ASIENTOS_LIBRO_DIARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ASIENTOS_LIBRO_DIARIORowChanged As ASIENTOS_LIBRO_DIARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ASIENTOS_LIBRO_DIARIORowDeleting As ASIENTOS_LIBRO_DIARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ASIENTOS_LIBRO_DIARIORowDeleted As ASIENTOS_LIBRO_DIARIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddASIENTOS_LIBRO_DIARIORow(ByVal row As ASIENTOS_LIBRO_DIARIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddASIENTOS_LIBRO_DIARIORow( _
                    ByVal ID_ASIENTO As Long,  _
                    ByVal FECHA_ASIENTO As Date,  _
                    ByVal CODIGO_CUENTA_ASIENTO As String,  _
                    ByVal NOMBRE_CUENTA_ASIENTO As String,  _
                    ByVal CONCEPTO_ASIENTO As String,  _
                    ByVal DETALLE_TRANSACCION_ASIENTO As String,  _
                    ByVal PROVINCIA_ASIENTO As String,  _
                    ByVal CIUDAD_ASIENTO As String,  _
                    ByVal PARROQUIA_ASIENTO As String,  _
                    ByVal CENTRO_COSTO_ASIENTO As String,  _
                    ByVal VALOR_DEBE_ASIENTO As Decimal,  _
                    ByVal VALOR_HABER_ASIENTO As Decimal,  _
                    ByVal NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal DEBE_HABER As Integer,  _
                    ByVal CONCILIAR_ASIENTO As Integer,  _
                    ByVal ESTADO_ASIENTO As Integer,  _
                    ByVal parentLIBRO_DIARIO_GENERALRowByFK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL As LIBRO_DIARIO_GENERALRow) As ASIENTOS_LIBRO_DIARIORow
            Dim rowASIENTOS_LIBRO_DIARIORow As ASIENTOS_LIBRO_DIARIORow = CType(Me.NewRow,ASIENTOS_LIBRO_DIARIORow)
            Dim columnValuesArray() As Object = New Object() {ID_ASIENTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CUENTA_ASIENTO, CONCEPTO_ASIENTO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, CIUDAD_ASIENTO, PARROQUIA_ASIENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VALOR_HABER_ASIENTO, NUMERO_REGISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO_ASIENTO, Nothing}
            If (Not (parentLIBRO_DIARIO_GENERALRowByFK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL) Is Nothing) Then
                columnValuesArray(16) = parentLIBRO_DIARIO_GENERALRowByFK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL(0)
            End If
            rowASIENTOS_LIBRO_DIARIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowASIENTOS_LIBRO_DIARIORow)
            Return rowASIENTOS_LIBRO_DIARIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByID_ASIENTO(ByVal ID_ASIENTO As Long) As ASIENTOS_LIBRO_DIARIORow
            Return CType(Me.Rows.Find(New Object() {ID_ASIENTO}),ASIENTOS_LIBRO_DIARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ASIENTOS_LIBRO_DIARIODataTable = CType(MyBase.Clone,ASIENTOS_LIBRO_DIARIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ASIENTOS_LIBRO_DIARIODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID_ASIENTO = MyBase.Columns("ID_ASIENTO")
            Me.columnFECHA_ASIENTO = MyBase.Columns("FECHA_ASIENTO")
            Me.columnCODIGO_CUENTA_ASIENTO = MyBase.Columns("CODIGO_CUENTA_ASIENTO")
            Me.columnNOMBRE_CUENTA_ASIENTO = MyBase.Columns("NOMBRE_CUENTA_ASIENTO")
            Me.columnCONCEPTO_ASIENTO = MyBase.Columns("CONCEPTO_ASIENTO")
            Me.columnDETALLE_TRANSACCION_ASIENTO = MyBase.Columns("DETALLE_TRANSACCION_ASIENTO")
            Me.columnPROVINCIA_ASIENTO = MyBase.Columns("PROVINCIA_ASIENTO")
            Me.columnCIUDAD_ASIENTO = MyBase.Columns("CIUDAD_ASIENTO")
            Me.columnPARROQUIA_ASIENTO = MyBase.Columns("PARROQUIA_ASIENTO")
            Me.columnCENTRO_COSTO_ASIENTO = MyBase.Columns("CENTRO_COSTO_ASIENTO")
            Me.columnVALOR_DEBE_ASIENTO = MyBase.Columns("VALOR_DEBE_ASIENTO")
            Me.columnVALOR_HABER_ASIENTO = MyBase.Columns("VALOR_HABER_ASIENTO")
            Me.columnNUMERO_REGISTRO_ASIENTO = MyBase.Columns("NUMERO_REGISTRO_ASIENTO")
            Me.columnDEBE_HABER = MyBase.Columns("DEBE_HABER")
            Me.columnCONCILIAR_ASIENTO = MyBase.Columns("CONCILIAR_ASIENTO")
            Me.columnESTADO_ASIENTO = MyBase.Columns("ESTADO_ASIENTO")
            Me.columnID_LIBRO_DIARIO = MyBase.Columns("ID_LIBRO_DIARIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID_ASIENTO = New Global.System.Data.DataColumn("ID_ASIENTO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ASIENTO)
            Me.columnFECHA_ASIENTO = New Global.System.Data.DataColumn("FECHA_ASIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ASIENTO)
            Me.columnCODIGO_CUENTA_ASIENTO = New Global.System.Data.DataColumn("CODIGO_CUENTA_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CUENTA_ASIENTO)
            Me.columnNOMBRE_CUENTA_ASIENTO = New Global.System.Data.DataColumn("NOMBRE_CUENTA_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_CUENTA_ASIENTO)
            Me.columnCONCEPTO_ASIENTO = New Global.System.Data.DataColumn("CONCEPTO_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONCEPTO_ASIENTO)
            Me.columnDETALLE_TRANSACCION_ASIENTO = New Global.System.Data.DataColumn("DETALLE_TRANSACCION_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETALLE_TRANSACCION_ASIENTO)
            Me.columnPROVINCIA_ASIENTO = New Global.System.Data.DataColumn("PROVINCIA_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVINCIA_ASIENTO)
            Me.columnCIUDAD_ASIENTO = New Global.System.Data.DataColumn("CIUDAD_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIUDAD_ASIENTO)
            Me.columnPARROQUIA_ASIENTO = New Global.System.Data.DataColumn("PARROQUIA_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARROQUIA_ASIENTO)
            Me.columnCENTRO_COSTO_ASIENTO = New Global.System.Data.DataColumn("CENTRO_COSTO_ASIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCENTRO_COSTO_ASIENTO)
            Me.columnVALOR_DEBE_ASIENTO = New Global.System.Data.DataColumn("VALOR_DEBE_ASIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_DEBE_ASIENTO)
            Me.columnVALOR_HABER_ASIENTO = New Global.System.Data.DataColumn("VALOR_HABER_ASIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_HABER_ASIENTO)
            Me.columnNUMERO_REGISTRO_ASIENTO = New Global.System.Data.DataColumn("NUMERO_REGISTRO_ASIENTO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_REGISTRO_ASIENTO)
            Me.columnDEBE_HABER = New Global.System.Data.DataColumn("DEBE_HABER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE_HABER)
            Me.columnCONCILIAR_ASIENTO = New Global.System.Data.DataColumn("CONCILIAR_ASIENTO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONCILIAR_ASIENTO)
            Me.columnESTADO_ASIENTO = New Global.System.Data.DataColumn("ESTADO_ASIENTO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO_ASIENTO)
            Me.columnID_LIBRO_DIARIO = New Global.System.Data.DataColumn("ID_LIBRO_DIARIO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_LIBRO_DIARIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_ASIENTO}, true))
            Me.columnID_ASIENTO.AllowDBNull = false
            Me.columnID_ASIENTO.Unique = true
            Me.columnFECHA_ASIENTO.AllowDBNull = false
            Me.columnCODIGO_CUENTA_ASIENTO.AllowDBNull = false
            Me.columnCODIGO_CUENTA_ASIENTO.MaxLength = 2147483647
            Me.columnNOMBRE_CUENTA_ASIENTO.AllowDBNull = false
            Me.columnNOMBRE_CUENTA_ASIENTO.MaxLength = 2147483647
            Me.columnCONCEPTO_ASIENTO.AllowDBNull = false
            Me.columnCONCEPTO_ASIENTO.MaxLength = 2147483647
            Me.columnDETALLE_TRANSACCION_ASIENTO.AllowDBNull = false
            Me.columnDETALLE_TRANSACCION_ASIENTO.MaxLength = 2147483647
            Me.columnPROVINCIA_ASIENTO.AllowDBNull = false
            Me.columnPROVINCIA_ASIENTO.MaxLength = 2147483647
            Me.columnCIUDAD_ASIENTO.AllowDBNull = false
            Me.columnCIUDAD_ASIENTO.MaxLength = 2147483647
            Me.columnPARROQUIA_ASIENTO.AllowDBNull = false
            Me.columnPARROQUIA_ASIENTO.MaxLength = 2147483647
            Me.columnCENTRO_COSTO_ASIENTO.AllowDBNull = false
            Me.columnCENTRO_COSTO_ASIENTO.MaxLength = 2147483647
            Me.columnNUMERO_REGISTRO_ASIENTO.AllowDBNull = false
            Me.columnDEBE_HABER.AllowDBNull = false
            Me.columnESTADO_ASIENTO.AllowDBNull = false
            Me.columnID_LIBRO_DIARIO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewASIENTOS_LIBRO_DIARIORow() As ASIENTOS_LIBRO_DIARIORow
            Return CType(Me.NewRow,ASIENTOS_LIBRO_DIARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ASIENTOS_LIBRO_DIARIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ASIENTOS_LIBRO_DIARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ASIENTOS_LIBRO_DIARIORowChangedEvent) Is Nothing) Then
                RaiseEvent ASIENTOS_LIBRO_DIARIORowChanged(Me, New ASIENTOS_LIBRO_DIARIORowChangeEvent(CType(e.Row,ASIENTOS_LIBRO_DIARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ASIENTOS_LIBRO_DIARIORowChangingEvent) Is Nothing) Then
                RaiseEvent ASIENTOS_LIBRO_DIARIORowChanging(Me, New ASIENTOS_LIBRO_DIARIORowChangeEvent(CType(e.Row,ASIENTOS_LIBRO_DIARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ASIENTOS_LIBRO_DIARIORowDeletedEvent) Is Nothing) Then
                RaiseEvent ASIENTOS_LIBRO_DIARIORowDeleted(Me, New ASIENTOS_LIBRO_DIARIORowChangeEvent(CType(e.Row,ASIENTOS_LIBRO_DIARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ASIENTOS_LIBRO_DIARIORowDeletingEvent) Is Nothing) Then
                RaiseEvent ASIENTOS_LIBRO_DIARIORowDeleting(Me, New ASIENTOS_LIBRO_DIARIORowChangeEvent(CType(e.Row,ASIENTOS_LIBRO_DIARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveASIENTOS_LIBRO_DIARIORow(ByVal row As ASIENTOS_LIBRO_DIARIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetLibroDiario = New DataSetLibroDiario()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ASIENTOS_LIBRO_DIARIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LIBRO_DIARIO_GENERALRow
        Inherits Global.System.Data.DataRow
        
        Private tableLIBRO_DIARIO_GENERAL As LIBRO_DIARIO_GENERALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLIBRO_DIARIO_GENERAL = CType(Me.Table,LIBRO_DIARIO_GENERALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_LIBRO_DIARIO() As Long
            Get
                Return CType(Me(Me.tableLIBRO_DIARIO_GENERAL.ID_LIBRO_DIARIOColumn),Long)
            End Get
            Set
                Me(Me.tableLIBRO_DIARIO_GENERAL.ID_LIBRO_DIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_LIBRO_DIARIO() As Date
            Get
                Return CType(Me(Me.tableLIBRO_DIARIO_GENERAL.FECHA_LIBRO_DIARIOColumn),Date)
            End Get
            Set
                Me(Me.tableLIBRO_DIARIO_GENERAL.FECHA_LIBRO_DIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TOTAL_DEBE_LIBRO_DIARIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_DIARIO_GENERAL.TOTAL_DEBE_LIBRO_DIARIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOTAL_DEBE_LIBRO_DIARIO' de la tabla 'LIBRO_DIARIO_GENERA"& _ 
                            "L' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_DIARIO_GENERAL.TOTAL_DEBE_LIBRO_DIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TOTAL_HABER_LIBRO_DIARIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_DIARIO_GENERAL.TOTAL_HABER_LIBRO_DIARIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOTAL_HABER_LIBRO_DIARIO' de la tabla 'LIBRO_DIARIO_GENER"& _ 
                            "AL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_DIARIO_GENERAL.TOTAL_HABER_LIBRO_DIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_LIBRO_DIARIO() As String
            Get
                Return CType(Me(Me.tableLIBRO_DIARIO_GENERAL.ESTADO_LIBRO_DIARIOColumn),String)
            End Get
            Set
                Me(Me.tableLIBRO_DIARIO_GENERAL.ESTADO_LIBRO_DIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTOTAL_DEBE_LIBRO_DIARIONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_DIARIO_GENERAL.TOTAL_DEBE_LIBRO_DIARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTOTAL_DEBE_LIBRO_DIARIONull()
            Me(Me.tableLIBRO_DIARIO_GENERAL.TOTAL_DEBE_LIBRO_DIARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTOTAL_HABER_LIBRO_DIARIONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_DIARIO_GENERAL.TOTAL_HABER_LIBRO_DIARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTOTAL_HABER_LIBRO_DIARIONull()
            Me(Me.tableLIBRO_DIARIO_GENERAL.TOTAL_HABER_LIBRO_DIARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetASIENTOS_LIBRO_DIARIORows() As ASIENTOS_LIBRO_DIARIORow()
            If (Me.Table.ChildRelations("FK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL") Is Nothing) Then
                Return New ASIENTOS_LIBRO_DIARIORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL")),ASIENTOS_LIBRO_DIARIORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ASIENTOS_LIBRO_DIARIORow
        Inherits Global.System.Data.DataRow
        
        Private tableASIENTOS_LIBRO_DIARIO As ASIENTOS_LIBRO_DIARIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableASIENTOS_LIBRO_DIARIO = CType(Me.Table,ASIENTOS_LIBRO_DIARIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_ASIENTO() As Long
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.ID_ASIENTOColumn),Long)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.ID_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_ASIENTO() As Date
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.FECHA_ASIENTOColumn),Date)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.FECHA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_CUENTA_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CODIGO_CUENTA_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CODIGO_CUENTA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_CUENTA_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.NOMBRE_CUENTA_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.NOMBRE_CUENTA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONCEPTO_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCEPTO_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCEPTO_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DETALLE_TRANSACCION_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.DETALLE_TRANSACCION_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.DETALLE_TRANSACCION_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PROVINCIA_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.PROVINCIA_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.PROVINCIA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CIUDAD_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CIUDAD_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CIUDAD_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PARROQUIA_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.PARROQUIA_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.PARROQUIA_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CENTRO_COSTO_ASIENTO() As String
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CENTRO_COSTO_ASIENTOColumn),String)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CENTRO_COSTO_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_DEBE_ASIENTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_DEBE_ASIENTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VALOR_DEBE_ASIENTO' de la tabla 'ASIENTOS_LIBRO_DIARIO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_DEBE_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VALOR_HABER_ASIENTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_HABER_ASIENTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VALOR_HABER_ASIENTO' de la tabla 'ASIENTOS_LIBRO_DIARIO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_HABER_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NUMERO_REGISTRO_ASIENTO() As Long
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.NUMERO_REGISTRO_ASIENTOColumn),Long)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.NUMERO_REGISTRO_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DEBE_HABER() As Integer
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.DEBE_HABERColumn),Integer)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.DEBE_HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONCILIAR_ASIENTO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCILIAR_ASIENTOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CONCILIAR_ASIENTO' de la tabla 'ASIENTOS_LIBRO_DIARIO' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCILIAR_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ESTADO_ASIENTO() As Integer
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.ESTADO_ASIENTOColumn),Integer)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.ESTADO_ASIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID_LIBRO_DIARIO() As Long
            Get
                Return CType(Me(Me.tableASIENTOS_LIBRO_DIARIO.ID_LIBRO_DIARIOColumn),Long)
            End Get
            Set
                Me(Me.tableASIENTOS_LIBRO_DIARIO.ID_LIBRO_DIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LIBRO_DIARIO_GENERALRow() As LIBRO_DIARIO_GENERALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL")),LIBRO_DIARIO_GENERALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ASIENTOS_LIBRO_DIARIO_LIBRO_DIARIO_GENERAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsVALOR_DEBE_ASIENTONull() As Boolean
            Return Me.IsNull(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_DEBE_ASIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetVALOR_DEBE_ASIENTONull()
            Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_DEBE_ASIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsVALOR_HABER_ASIENTONull() As Boolean
            Return Me.IsNull(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_HABER_ASIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetVALOR_HABER_ASIENTONull()
            Me(Me.tableASIENTOS_LIBRO_DIARIO.VALOR_HABER_ASIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCONCILIAR_ASIENTONull() As Boolean
            Return Me.IsNull(Me.tableASIENTOS_LIBRO_DIARIO.CONCILIAR_ASIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCONCILIAR_ASIENTONull()
            Me(Me.tableASIENTOS_LIBRO_DIARIO.CONCILIAR_ASIENTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class LIBRO_DIARIO_GENERALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LIBRO_DIARIO_GENERALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As LIBRO_DIARIO_GENERALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As LIBRO_DIARIO_GENERALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class ASIENTOS_LIBRO_DIARIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ASIENTOS_LIBRO_DIARIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As ASIENTOS_LIBRO_DIARIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As ASIENTOS_LIBRO_DIARIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetLibroDiarioTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LIBRO_DIARIO_GENERALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LIBRO_DIARIO_GENERAL"
            tableMapping.ColumnMappings.Add("ID_LIBRO_DIARIO", "ID_LIBRO_DIARIO")
            tableMapping.ColumnMappings.Add("FECHA_LIBRO_DIARIO", "FECHA_LIBRO_DIARIO")
            tableMapping.ColumnMappings.Add("TOTAL_DEBE_LIBRO_DIARIO", "TOTAL_DEBE_LIBRO_DIARIO")
            tableMapping.ColumnMappings.Add("TOTAL_HABER_LIBRO_DIARIO", "TOTAL_HABER_LIBRO_DIARIO")
            tableMapping.ColumnMappings.Add("ESTADO_LIBRO_DIARIO", "ESTADO_LIBRO_DIARIO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LIBRO_DIARIO_GENERAL] WHERE (([ID_LIBRO_DIARIO] = @Original_ID"& _ 
                "_LIBRO_DIARIO) AND ([FECHA_LIBRO_DIARIO] = @Original_FECHA_LIBRO_DIARIO) AND ((@"& _ 
                "IsNull_TOTAL_DEBE_LIBRO_DIARIO = 1 AND [TOTAL_DEBE_LIBRO_DIARIO] IS NULL) OR ([T"& _ 
                "OTAL_DEBE_LIBRO_DIARIO] = @Original_TOTAL_DEBE_LIBRO_DIARIO)) AND ((@IsNull_TOTA"& _ 
                "L_HABER_LIBRO_DIARIO = 1 AND [TOTAL_HABER_LIBRO_DIARIO] IS NULL) OR ([TOTAL_HABE"& _ 
                "R_LIBRO_DIARIO] = @Original_TOTAL_HABER_LIBRO_DIARIO)) AND ([ESTADO_LIBRO_DIARIO"& _ 
                "] = @Original_ESTADO_LIBRO_DIARIO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_LIBRO_DIARIO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_LIBRO_DIARIO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LIBRO_DIARIO_GENERAL] ([ID_LIBRO_DIARIO], [FECHA_LIBRO_DIARIO]"& _ 
                ", [TOTAL_DEBE_LIBRO_DIARIO], [TOTAL_HABER_LIBRO_DIARIO], [ESTADO_LIBRO_DIARIO]) "& _ 
                "VALUES (@ID_LIBRO_DIARIO, @FECHA_LIBRO_DIARIO, @TOTAL_DEBE_LIBRO_DIARIO, @TOTAL_"& _ 
                "HABER_LIBRO_DIARIO, @ESTADO_LIBRO_DIARIO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_LIBRO_DIARIO, FECHA_LIBRO_"& _ 
                "DIARIO, TOTAL_DEBE_LIBRO_DIARIO, TOTAL_HABER_LIBRO_DIARIO, ESTADO_LIBRO_DIARIO F"& _ 
                "ROM LIBRO_DIARIO_GENERAL WHERE (ID_LIBRO_DIARIO = @ID_LIBRO_DIARIO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_LIBRO_DIARIO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_LIBRO_DIARIO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LIBRO_DIARIO_GENERAL] SET [ID_LIBRO_DIARIO] = @ID_LIBRO_DIARIO, [FE"& _ 
                "CHA_LIBRO_DIARIO] = @FECHA_LIBRO_DIARIO, [TOTAL_DEBE_LIBRO_DIARIO] = @TOTAL_DEBE"& _ 
                "_LIBRO_DIARIO, [TOTAL_HABER_LIBRO_DIARIO] = @TOTAL_HABER_LIBRO_DIARIO, [ESTADO_L"& _ 
                "IBRO_DIARIO] = @ESTADO_LIBRO_DIARIO WHERE (([ID_LIBRO_DIARIO] = @Original_ID_LIB"& _ 
                "RO_DIARIO) AND ([FECHA_LIBRO_DIARIO] = @Original_FECHA_LIBRO_DIARIO) AND ((@IsNu"& _ 
                "ll_TOTAL_DEBE_LIBRO_DIARIO = 1 AND [TOTAL_DEBE_LIBRO_DIARIO] IS NULL) OR ([TOTAL"& _ 
                "_DEBE_LIBRO_DIARIO] = @Original_TOTAL_DEBE_LIBRO_DIARIO)) AND ((@IsNull_TOTAL_HA"& _ 
                "BER_LIBRO_DIARIO = 1 AND [TOTAL_HABER_LIBRO_DIARIO] IS NULL) OR ([TOTAL_HABER_LI"& _ 
                "BRO_DIARIO] = @Original_TOTAL_HABER_LIBRO_DIARIO)) AND ([ESTADO_LIBRO_DIARIO] = "& _ 
                "@Original_ESTADO_LIBRO_DIARIO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_LIBRO_DIARIO, FECHA_LIBRO_DIARIO, TO"& _ 
                "TAL_DEBE_LIBRO_DIARIO, TOTAL_HABER_LIBRO_DIARIO, ESTADO_LIBRO_DIARIO FROM LIBRO_"& _ 
                "DIARIO_GENERAL WHERE (ID_LIBRO_DIARIO = @ID_LIBRO_DIARIO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_LIBRO_DIARIO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_LIBRO_DIARIO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_LIBRO_DIARIO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DEBE_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_HABER_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_LIBRO_DIARIO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_LIBRO_DIARIO, FECHA_LIBRO_DIARIO, TOTAL_DEBE_LIBRO_DIARIO, TOTAL_HABER_"& _ 
                "LIBRO_DIARIO, ESTADO_LIBRO_DIARIO FROM dbo.LIBRO_DIARIO_GENERAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetLibroDiario.LIBRO_DIARIO_GENERALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetLibroDiario.LIBRO_DIARIO_GENERALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetLibroDiario.LIBRO_DIARIO_GENERALDataTable = New DataSetLibroDiario.LIBRO_DIARIO_GENERALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetLibroDiario.LIBRO_DIARIO_GENERALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetLibroDiario) As Integer
            Return Me.Adapter.Update(dataSet, "LIBRO_DIARIO_GENERAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_LIBRO_DIARIO As Long, ByVal Original_FECHA_LIBRO_DIARIO As Date, ByVal Original_TOTAL_DEBE_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal Original_TOTAL_HABER_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal Original_ESTADO_LIBRO_DIARIO As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_LIBRO_DIARIO,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA_LIBRO_DIARIO,Date)
            If (Original_TOTAL_DEBE_LIBRO_DIARIO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TOTAL_DEBE_LIBRO_DIARIO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_HABER_LIBRO_DIARIO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TOTAL_HABER_LIBRO_DIARIO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_ESTADO_LIBRO_DIARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESTADO_LIBRO_DIARIO")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ESTADO_LIBRO_DIARIO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_LIBRO_DIARIO As Long, ByVal FECHA_LIBRO_DIARIO As Date, ByVal TOTAL_DEBE_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal TOTAL_HABER_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal ESTADO_LIBRO_DIARIO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_LIBRO_DIARIO,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA_LIBRO_DIARIO,Date)
            If (TOTAL_DEBE_LIBRO_DIARIO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TOTAL_DEBE_LIBRO_DIARIO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_HABER_LIBRO_DIARIO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TOTAL_HABER_LIBRO_DIARIO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ESTADO_LIBRO_DIARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_LIBRO_DIARIO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ESTADO_LIBRO_DIARIO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_LIBRO_DIARIO As Long, ByVal FECHA_LIBRO_DIARIO As Date, ByVal TOTAL_DEBE_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal TOTAL_HABER_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal ESTADO_LIBRO_DIARIO As String, ByVal Original_ID_LIBRO_DIARIO As Long, ByVal Original_FECHA_LIBRO_DIARIO As Date, ByVal Original_TOTAL_DEBE_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal Original_TOTAL_HABER_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal Original_ESTADO_LIBRO_DIARIO As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_LIBRO_DIARIO,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA_LIBRO_DIARIO,Date)
            If (TOTAL_DEBE_LIBRO_DIARIO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TOTAL_DEBE_LIBRO_DIARIO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_HABER_LIBRO_DIARIO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TOTAL_HABER_LIBRO_DIARIO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ESTADO_LIBRO_DIARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ESTADO_LIBRO_DIARIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ESTADO_LIBRO_DIARIO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_LIBRO_DIARIO,Long)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FECHA_LIBRO_DIARIO,Date)
            If (Original_TOTAL_DEBE_LIBRO_DIARIO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TOTAL_DEBE_LIBRO_DIARIO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_HABER_LIBRO_DIARIO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TOTAL_HABER_LIBRO_DIARIO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ESTADO_LIBRO_DIARIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ESTADO_LIBRO_DIARIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ESTADO_LIBRO_DIARIO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FECHA_LIBRO_DIARIO As Date, ByVal TOTAL_DEBE_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal TOTAL_HABER_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal ESTADO_LIBRO_DIARIO As String, ByVal Original_ID_LIBRO_DIARIO As Long, ByVal Original_FECHA_LIBRO_DIARIO As Date, ByVal Original_TOTAL_DEBE_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal Original_TOTAL_HABER_LIBRO_DIARIO As Global.System.Nullable(Of Decimal), ByVal Original_ESTADO_LIBRO_DIARIO As String) As Integer
            Return Me.Update(Original_ID_LIBRO_DIARIO, FECHA_LIBRO_DIARIO, TOTAL_DEBE_LIBRO_DIARIO, TOTAL_HABER_LIBRO_DIARIO, ESTADO_LIBRO_DIARIO, Original_ID_LIBRO_DIARIO, Original_FECHA_LIBRO_DIARIO, Original_TOTAL_DEBE_LIBRO_DIARIO, Original_TOTAL_HABER_LIBRO_DIARIO, Original_ESTADO_LIBRO_DIARIO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ASIENTOS_LIBRO_DIARIOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ASIENTOS_LIBRO_DIARIO"
            tableMapping.ColumnMappings.Add("ID_ASIENTO", "ID_ASIENTO")
            tableMapping.ColumnMappings.Add("FECHA_ASIENTO", "FECHA_ASIENTO")
            tableMapping.ColumnMappings.Add("CODIGO_CUENTA_ASIENTO", "CODIGO_CUENTA_ASIENTO")
            tableMapping.ColumnMappings.Add("NOMBRE_CUENTA_ASIENTO", "NOMBRE_CUENTA_ASIENTO")
            tableMapping.ColumnMappings.Add("CONCEPTO_ASIENTO", "CONCEPTO_ASIENTO")
            tableMapping.ColumnMappings.Add("DETALLE_TRANSACCION_ASIENTO", "DETALLE_TRANSACCION_ASIENTO")
            tableMapping.ColumnMappings.Add("PROVINCIA_ASIENTO", "PROVINCIA_ASIENTO")
            tableMapping.ColumnMappings.Add("CIUDAD_ASIENTO", "CIUDAD_ASIENTO")
            tableMapping.ColumnMappings.Add("PARROQUIA_ASIENTO", "PARROQUIA_ASIENTO")
            tableMapping.ColumnMappings.Add("CENTRO_COSTO_ASIENTO", "CENTRO_COSTO_ASIENTO")
            tableMapping.ColumnMappings.Add("VALOR_DEBE_ASIENTO", "VALOR_DEBE_ASIENTO")
            tableMapping.ColumnMappings.Add("VALOR_HABER_ASIENTO", "VALOR_HABER_ASIENTO")
            tableMapping.ColumnMappings.Add("NUMERO_REGISTRO_ASIENTO", "NUMERO_REGISTRO_ASIENTO")
            tableMapping.ColumnMappings.Add("DEBE_HABER", "DEBE_HABER")
            tableMapping.ColumnMappings.Add("CONCILIAR_ASIENTO", "CONCILIAR_ASIENTO")
            tableMapping.ColumnMappings.Add("ESTADO_ASIENTO", "ESTADO_ASIENTO")
            tableMapping.ColumnMappings.Add("ID_LIBRO_DIARIO", "ID_LIBRO_DIARIO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ASIENTOS_LIBRO_DIARIO] WHERE (([ID_ASIENTO] = @Original_ID_ASI"& _ 
                "ENTO) AND ([FECHA_ASIENTO] = @Original_FECHA_ASIENTO) AND ((@IsNull_VALOR_DEBE_A"& _ 
                "SIENTO = 1 AND [VALOR_DEBE_ASIENTO] IS NULL) OR ([VALOR_DEBE_ASIENTO] = @Origina"& _ 
                "l_VALOR_DEBE_ASIENTO)) AND ((@IsNull_VALOR_HABER_ASIENTO = 1 AND [VALOR_HABER_AS"& _ 
                "IENTO] IS NULL) OR ([VALOR_HABER_ASIENTO] = @Original_VALOR_HABER_ASIENTO)) AND "& _ 
                "([NUMERO_REGISTRO_ASIENTO] = @Original_NUMERO_REGISTRO_ASIENTO) AND ([DEBE_HABER"& _ 
                "] = @Original_DEBE_HABER) AND ((@IsNull_CONCILIAR_ASIENTO = 1 AND [CONCILIAR_ASI"& _ 
                "ENTO] IS NULL) OR ([CONCILIAR_ASIENTO] = @Original_CONCILIAR_ASIENTO)) AND ([EST"& _ 
                "ADO_ASIENTO] = @Original_ESTADO_ASIENTO) AND ([ID_LIBRO_DIARIO] = @Original_ID_L"& _ 
                "IBRO_DIARIO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ASIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_REGISTRO_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_REGISTRO_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEBE_HABER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEBE_HABER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ASIENTOS_LIBRO_DIARIO] ([ID_ASIENTO], [FECHA_ASIENTO], [CODIGO"& _ 
                "_CUENTA_ASIENTO], [NOMBRE_CUENTA_ASIENTO], [CONCEPTO_ASIENTO], [DETALLE_TRANSACC"& _ 
                "ION_ASIENTO], [PROVINCIA_ASIENTO], [CIUDAD_ASIENTO], [PARROQUIA_ASIENTO], [CENTR"& _ 
                "O_COSTO_ASIENTO], [VALOR_DEBE_ASIENTO], [VALOR_HABER_ASIENTO], [NUMERO_REGISTRO_"& _ 
                "ASIENTO], [DEBE_HABER], [CONCILIAR_ASIENTO], [ESTADO_ASIENTO], [ID_LIBRO_DIARIO]"& _ 
                ") VALUES (@ID_ASIENTO, @FECHA_ASIENTO, @CODIGO_CUENTA_ASIENTO, @NOMBRE_CUENTA_AS"& _ 
                "IENTO, @CONCEPTO_ASIENTO, @DETALLE_TRANSACCION_ASIENTO, @PROVINCIA_ASIENTO, @CIU"& _ 
                "DAD_ASIENTO, @PARROQUIA_ASIENTO, @CENTRO_COSTO_ASIENTO, @VALOR_DEBE_ASIENTO, @VA"& _ 
                "LOR_HABER_ASIENTO, @NUMERO_REGISTRO_ASIENTO, @DEBE_HABER, @CONCILIAR_ASIENTO, @E"& _ 
                "STADO_ASIENTO, @ID_LIBRO_DIARIO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_ASIENTO, FECHA_ASIENTO, CODIGO_CUEN"& _ 
                "TA_ASIENTO, NOMBRE_CUENTA_ASIENTO, CONCEPTO_ASIENTO, DETALLE_TRANSACCION_ASIENTO"& _ 
                ", PROVINCIA_ASIENTO, CIUDAD_ASIENTO, PARROQUIA_ASIENTO, CENTRO_COSTO_ASIENTO, VA"& _ 
                "LOR_DEBE_ASIENTO, VALOR_HABER_ASIENTO, NUMERO_REGISTRO_ASIENTO, DEBE_HABER, CONC"& _ 
                "ILIAR_ASIENTO, ESTADO_ASIENTO, ID_LIBRO_DIARIO FROM ASIENTOS_LIBRO_DIARIO WHERE "& _ 
                "(ID_ASIENTO = @ID_ASIENTO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ASIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_CUENTA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_CUENTA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_CUENTA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_CUENTA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCEPTO_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCEPTO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETALLE_TRANSACCION_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETALLE_TRANSACCION_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCIA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCIA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CIUDAD_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CIUDAD_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARROQUIA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARROQUIA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CENTRO_COSTO_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENTRO_COSTO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_REGISTRO_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_REGISTRO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEBE_HABER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEBE_HABER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ASIENTOS_LIBRO_DIARIO] SET [ID_ASIENTO] = @ID_ASIENTO, [FECHA_ASIEN"& _ 
                "TO] = @FECHA_ASIENTO, [CODIGO_CUENTA_ASIENTO] = @CODIGO_CUENTA_ASIENTO, [NOMBRE_"& _ 
                "CUENTA_ASIENTO] = @NOMBRE_CUENTA_ASIENTO, [CONCEPTO_ASIENTO] = @CONCEPTO_ASIENTO"& _ 
                ", [DETALLE_TRANSACCION_ASIENTO] = @DETALLE_TRANSACCION_ASIENTO, [PROVINCIA_ASIEN"& _ 
                "TO] = @PROVINCIA_ASIENTO, [CIUDAD_ASIENTO] = @CIUDAD_ASIENTO, [PARROQUIA_ASIENTO"& _ 
                "] = @PARROQUIA_ASIENTO, [CENTRO_COSTO_ASIENTO] = @CENTRO_COSTO_ASIENTO, [VALOR_D"& _ 
                "EBE_ASIENTO] = @VALOR_DEBE_ASIENTO, [VALOR_HABER_ASIENTO] = @VALOR_HABER_ASIENTO"& _ 
                ", [NUMERO_REGISTRO_ASIENTO] = @NUMERO_REGISTRO_ASIENTO, [DEBE_HABER] = @DEBE_HAB"& _ 
                "ER, [CONCILIAR_ASIENTO] = @CONCILIAR_ASIENTO, [ESTADO_ASIENTO] = @ESTADO_ASIENTO"& _ 
                ", [ID_LIBRO_DIARIO] = @ID_LIBRO_DIARIO WHERE (([ID_ASIENTO] = @Original_ID_ASIEN"& _ 
                "TO) AND ([FECHA_ASIENTO] = @Original_FECHA_ASIENTO) AND ((@IsNull_VALOR_DEBE_ASI"& _ 
                "ENTO = 1 AND [VALOR_DEBE_ASIENTO] IS NULL) OR ([VALOR_DEBE_ASIENTO] = @Original_"& _ 
                "VALOR_DEBE_ASIENTO)) AND ((@IsNull_VALOR_HABER_ASIENTO = 1 AND [VALOR_HABER_ASIE"& _ 
                "NTO] IS NULL) OR ([VALOR_HABER_ASIENTO] = @Original_VALOR_HABER_ASIENTO)) AND (["& _ 
                "NUMERO_REGISTRO_ASIENTO] = @Original_NUMERO_REGISTRO_ASIENTO) AND ([DEBE_HABER] "& _ 
                "= @Original_DEBE_HABER) AND ((@IsNull_CONCILIAR_ASIENTO = 1 AND [CONCILIAR_ASIEN"& _ 
                "TO] IS NULL) OR ([CONCILIAR_ASIENTO] = @Original_CONCILIAR_ASIENTO)) AND ([ESTAD"& _ 
                "O_ASIENTO] = @Original_ESTADO_ASIENTO) AND ([ID_LIBRO_DIARIO] = @Original_ID_LIB"& _ 
                "RO_DIARIO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_ASIENTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CU"& _ 
                "ENTA_ASIENTO, CONCEPTO_ASIENTO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, "& _ 
                "CIUDAD_ASIENTO, PARROQUIA_ASIENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VAL"& _ 
                "OR_HABER_ASIENTO, NUMERO_REGISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO"& _ 
                "_ASIENTO, ID_LIBRO_DIARIO FROM ASIENTOS_LIBRO_DIARIO WHERE (ID_ASIENTO = @ID_ASI"& _ 
                "ENTO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_ASIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODIGO_CUENTA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODIGO_CUENTA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE_CUENTA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE_CUENTA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCEPTO_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCEPTO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETALLE_TRANSACCION_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETALLE_TRANSACCION_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCIA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCIA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CIUDAD_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CIUDAD_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARROQUIA_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARROQUIA_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CENTRO_COSTO_ASIENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENTRO_COSTO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUMERO_REGISTRO_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_REGISTRO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEBE_HABER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEBE_HABER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTADO_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ASIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_ASIENTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_DEBE_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_DEBE_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VALOR_HABER_ASIENTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "VALOR_HABER_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NUMERO_REGISTRO_ASIENTO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUMERO_REGISTRO_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEBE_HABER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEBE_HABER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONCILIAR_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONCILIAR_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ESTADO_ASIENTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTADO_ASIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID_LIBRO_DIARIO", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID_LIBRO_DIARIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.syscisepro.My.MySettings.Default.SYSCISEPROConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_ASIENTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CUENTA_ASIENTO, C"& _ 
                "ONCEPTO_ASIENTO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, CIUDAD_ASIENTO,"& _ 
                " PARROQUIA_ASIENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VALOR_HABER_ASIENT"& _ 
                "O, NUMERO_REGISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO_ASIENTO, ID_LI"& _ 
                "BRO_DIARIO FROM dbo.ASIENTOS_LIBRO_DIARIO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetLibroDiario.ASIENTOS_LIBRO_DIARIODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetLibroDiario.ASIENTOS_LIBRO_DIARIODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetLibroDiario.ASIENTOS_LIBRO_DIARIODataTable = New DataSetLibroDiario.ASIENTOS_LIBRO_DIARIODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetLibroDiario.ASIENTOS_LIBRO_DIARIODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetLibroDiario) As Integer
            Return Me.Adapter.Update(dataSet, "ASIENTOS_LIBRO_DIARIO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_ASIENTO As Long, ByVal Original_FECHA_ASIENTO As Date, ByVal Original_VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal), ByVal Original_VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal), ByVal Original_NUMERO_REGISTRO_ASIENTO As Long, ByVal Original_DEBE_HABER As Integer, ByVal Original_CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer), ByVal Original_ESTADO_ASIENTO As Integer, ByVal Original_ID_LIBRO_DIARIO As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_ASIENTO,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA_ASIENTO,Date)
            If (Original_VALOR_DEBE_ASIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_VALOR_DEBE_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_VALOR_HABER_ASIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_VALOR_HABER_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NUMERO_REGISTRO_ASIENTO,Long)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_DEBE_HABER,Integer)
            If (Original_CONCILIAR_ASIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CONCILIAR_ASIENTO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ESTADO_ASIENTO,Integer)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ID_LIBRO_DIARIO,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID_ASIENTO As Long,  _
                    ByVal FECHA_ASIENTO As Date,  _
                    ByVal CODIGO_CUENTA_ASIENTO As String,  _
                    ByVal NOMBRE_CUENTA_ASIENTO As String,  _
                    ByVal CONCEPTO_ASIENTO As String,  _
                    ByVal DETALLE_TRANSACCION_ASIENTO As String,  _
                    ByVal PROVINCIA_ASIENTO As String,  _
                    ByVal CIUDAD_ASIENTO As String,  _
                    ByVal PARROQUIA_ASIENTO As String,  _
                    ByVal CENTRO_COSTO_ASIENTO As String,  _
                    ByVal VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal DEBE_HABER As Integer,  _
                    ByVal CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal ESTADO_ASIENTO As Integer,  _
                    ByVal ID_LIBRO_DIARIO As Long) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_ASIENTO,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA_ASIENTO,Date)
            If (CODIGO_CUENTA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_CUENTA_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CODIGO_CUENTA_ASIENTO,String)
            End If
            If (NOMBRE_CUENTA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_CUENTA_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NOMBRE_CUENTA_ASIENTO,String)
            End If
            If (CONCEPTO_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONCEPTO_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CONCEPTO_ASIENTO,String)
            End If
            If (DETALLE_TRANSACCION_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DETALLE_TRANSACCION_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DETALLE_TRANSACCION_ASIENTO,String)
            End If
            If (PROVINCIA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVINCIA_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PROVINCIA_ASIENTO,String)
            End If
            If (CIUDAD_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIUDAD_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CIUDAD_ASIENTO,String)
            End If
            If (PARROQUIA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARROQUIA_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PARROQUIA_ASIENTO,String)
            End If
            If (CENTRO_COSTO_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CENTRO_COSTO_ASIENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CENTRO_COSTO_ASIENTO,String)
            End If
            If (VALOR_DEBE_ASIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(VALOR_DEBE_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (VALOR_HABER_ASIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(VALOR_HABER_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(NUMERO_REGISTRO_ASIENTO,Long)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(DEBE_HABER,Integer)
            If (CONCILIAR_ASIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CONCILIAR_ASIENTO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(ESTADO_ASIENTO,Integer)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(ID_LIBRO_DIARIO,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID_ASIENTO As Long,  _
                    ByVal FECHA_ASIENTO As Date,  _
                    ByVal CODIGO_CUENTA_ASIENTO As String,  _
                    ByVal NOMBRE_CUENTA_ASIENTO As String,  _
                    ByVal CONCEPTO_ASIENTO As String,  _
                    ByVal DETALLE_TRANSACCION_ASIENTO As String,  _
                    ByVal PROVINCIA_ASIENTO As String,  _
                    ByVal CIUDAD_ASIENTO As String,  _
                    ByVal PARROQUIA_ASIENTO As String,  _
                    ByVal CENTRO_COSTO_ASIENTO As String,  _
                    ByVal VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal DEBE_HABER As Integer,  _
                    ByVal CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal ESTADO_ASIENTO As Integer,  _
                    ByVal ID_LIBRO_DIARIO As Long,  _
                    ByVal Original_ID_ASIENTO As Long,  _
                    ByVal Original_FECHA_ASIENTO As Date,  _
                    ByVal Original_VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal Original_DEBE_HABER As Integer,  _
                    ByVal Original_CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ESTADO_ASIENTO As Integer,  _
                    ByVal Original_ID_LIBRO_DIARIO As Long) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_ASIENTO,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA_ASIENTO,Date)
            If (CODIGO_CUENTA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODIGO_CUENTA_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CODIGO_CUENTA_ASIENTO,String)
            End If
            If (NOMBRE_CUENTA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_CUENTA_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NOMBRE_CUENTA_ASIENTO,String)
            End If
            If (CONCEPTO_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONCEPTO_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CONCEPTO_ASIENTO,String)
            End If
            If (DETALLE_TRANSACCION_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DETALLE_TRANSACCION_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DETALLE_TRANSACCION_ASIENTO,String)
            End If
            If (PROVINCIA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROVINCIA_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PROVINCIA_ASIENTO,String)
            End If
            If (CIUDAD_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CIUDAD_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CIUDAD_ASIENTO,String)
            End If
            If (PARROQUIA_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARROQUIA_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PARROQUIA_ASIENTO,String)
            End If
            If (CENTRO_COSTO_ASIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CENTRO_COSTO_ASIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CENTRO_COSTO_ASIENTO,String)
            End If
            If (VALOR_DEBE_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(VALOR_DEBE_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (VALOR_HABER_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(VALOR_HABER_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(NUMERO_REGISTRO_ASIENTO,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DEBE_HABER,Integer)
            If (CONCILIAR_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CONCILIAR_ASIENTO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ESTADO_ASIENTO,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ID_LIBRO_DIARIO,Long)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ID_ASIENTO,Long)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_FECHA_ASIENTO,Date)
            If (Original_VALOR_DEBE_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_VALOR_DEBE_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_VALOR_HABER_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_VALOR_HABER_ASIENTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_NUMERO_REGISTRO_ASIENTO,Long)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_DEBE_HABER,Integer)
            If (Original_CONCILIAR_ASIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_CONCILIAR_ASIENTO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ESTADO_ASIENTO,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ID_LIBRO_DIARIO,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FECHA_ASIENTO As Date,  _
                    ByVal CODIGO_CUENTA_ASIENTO As String,  _
                    ByVal NOMBRE_CUENTA_ASIENTO As String,  _
                    ByVal CONCEPTO_ASIENTO As String,  _
                    ByVal DETALLE_TRANSACCION_ASIENTO As String,  _
                    ByVal PROVINCIA_ASIENTO As String,  _
                    ByVal CIUDAD_ASIENTO As String,  _
                    ByVal PARROQUIA_ASIENTO As String,  _
                    ByVal CENTRO_COSTO_ASIENTO As String,  _
                    ByVal VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal DEBE_HABER As Integer,  _
                    ByVal CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal ESTADO_ASIENTO As Integer,  _
                    ByVal ID_LIBRO_DIARIO As Long,  _
                    ByVal Original_ID_ASIENTO As Long,  _
                    ByVal Original_FECHA_ASIENTO As Date,  _
                    ByVal Original_VALOR_DEBE_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_VALOR_HABER_ASIENTO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NUMERO_REGISTRO_ASIENTO As Long,  _
                    ByVal Original_DEBE_HABER As Integer,  _
                    ByVal Original_CONCILIAR_ASIENTO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ESTADO_ASIENTO As Integer,  _
                    ByVal Original_ID_LIBRO_DIARIO As Long) As Integer
            Return Me.Update(Original_ID_ASIENTO, FECHA_ASIENTO, CODIGO_CUENTA_ASIENTO, NOMBRE_CUENTA_ASIENTO, CONCEPTO_ASIENTO, DETALLE_TRANSACCION_ASIENTO, PROVINCIA_ASIENTO, CIUDAD_ASIENTO, PARROQUIA_ASIENTO, CENTRO_COSTO_ASIENTO, VALOR_DEBE_ASIENTO, VALOR_HABER_ASIENTO, NUMERO_REGISTRO_ASIENTO, DEBE_HABER, CONCILIAR_ASIENTO, ESTADO_ASIENTO, ID_LIBRO_DIARIO, Original_ID_ASIENTO, Original_FECHA_ASIENTO, Original_VALOR_DEBE_ASIENTO, Original_VALOR_HABER_ASIENTO, Original_NUMERO_REGISTRO_ASIENTO, Original_DEBE_HABER, Original_CONCILIAR_ASIENTO, Original_ESTADO_ASIENTO, Original_ID_LIBRO_DIARIO)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _lIBRO_DIARIO_GENERALTableAdapter As LIBRO_DIARIO_GENERALTableAdapter
        
        Private _aSIENTOS_LIBRO_DIARIOTableAdapter As ASIENTOS_LIBRO_DIARIOTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LIBRO_DIARIO_GENERALTableAdapter() As LIBRO_DIARIO_GENERALTableAdapter
            Get
                Return Me._lIBRO_DIARIO_GENERALTableAdapter
            End Get
            Set
                Me._lIBRO_DIARIO_GENERALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ASIENTOS_LIBRO_DIARIOTableAdapter() As ASIENTOS_LIBRO_DIARIOTableAdapter
            Get
                Return Me._aSIENTOS_LIBRO_DIARIOTableAdapter
            End Get
            Set
                Me._aSIENTOS_LIBRO_DIARIOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._lIBRO_DIARIO_GENERALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lIBRO_DIARIO_GENERALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lIBRO_DIARIO_GENERALTableAdapter.Connection
                End If
                If ((Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._lIBRO_DIARIO_GENERALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetLibroDiario, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lIBRO_DIARIO_GENERALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LIBRO_DIARIO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lIBRO_DIARIO_GENERALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ASIENTOS_LIBRO_DIARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetLibroDiario, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lIBRO_DIARIO_GENERALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LIBRO_DIARIO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lIBRO_DIARIO_GENERALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ASIENTOS_LIBRO_DIARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetLibroDiario, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ASIENTOS_LIBRO_DIARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lIBRO_DIARIO_GENERALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LIBRO_DIARIO_GENERAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lIBRO_DIARIO_GENERALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetLibroDiario) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._lIBRO_DIARIO_GENERALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lIBRO_DIARIO_GENERALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._lIBRO_DIARIO_GENERALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lIBRO_DIARIO_GENERALTableAdapter, Me._lIBRO_DIARIO_GENERALTableAdapter.Connection)
                    Me._lIBRO_DIARIO_GENERALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._lIBRO_DIARIO_GENERALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._lIBRO_DIARIO_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lIBRO_DIARIO_GENERALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lIBRO_DIARIO_GENERALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aSIENTOS_LIBRO_DIARIOTableAdapter, Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection)
                    Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._lIBRO_DIARIO_GENERALTableAdapter) Is Nothing) Then
                    Me._lIBRO_DIARIO_GENERALTableAdapter.Connection = CType(revertConnections(Me._lIBRO_DIARIO_GENERALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._lIBRO_DIARIO_GENERALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aSIENTOS_LIBRO_DIARIOTableAdapter) Is Nothing) Then
                    Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Connection = CType(revertConnections(Me._aSIENTOS_LIBRO_DIARIOTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aSIENTOS_LIBRO_DIARIOTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
